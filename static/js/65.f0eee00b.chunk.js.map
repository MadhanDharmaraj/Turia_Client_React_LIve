{"version":3,"sources":["views/apps/client/add/AddCard.js","views/apps/client/add/index.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","AddCard","phoneRegExp","navigate","useNavigate","dispatch","useDispatch","useState","businessEntityOptions","setBusinessEntityOptions","stateOptions","setStateOptions","countryOptions","setCountryOptions","currencyOptions","setCurrencyOptions","gstRegistrationTypeOptions","setGstRegistrationTypeOptions","clientInfo","setClientInfo","contactId","setConatctId","schema","yup","shape","clientType","default","createdBy","organization","uniqueIdentity","nullable","contactPersonName","required","name","when","is","then","contactNumber","matches","message","excludeEmptyString","email","businessEntity","gstRegistrationType","gstin","placeOfSupply","currency","billingAddressZip","contact_info","of","designation","min","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","control","errors","formState","useFieldArray","fields","append","remove","onSubmit","data","a","temp","predata","addClient","datatemp","payload","client","id","addItem","primarytag","_formValues","length","organizationId","primaryStatus","getRow","fieldLabel","fieldName","reqflag","className","sm","size","classnames","for","render","field","invalid","getSelectRow","options","ref","inputRef","isDisabled","classNamePrefix","value","find","c","onChange","val","getOptionLabel","option","getOptionValue","useEffect","axios","post","response","arr","businessentities","countries","currencies","gstregistrationtypes","states","clientId","forEach","obj","ind","rows","addContactInfo","saveContactInfo","md","type","onInput","target","map","item","i","lg","defaultChecked","onClick","color","outline","tag","Link","to","ClientAdd","xl"],"mappings":"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","file":"static/js/65.f0eee00b.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport classnames from 'classnames'\nimport { useDispatch } from 'react-redux'\n// ** Custom Components\nimport { addClient, addContactInfo } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\n\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback, CardTitle, CardHeader } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\nconst AddCard = () => {\n\n  // ** States\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const zipcodeExp = /^[0-9\\- ]{6,6}$/\n  const navigate = useNavigate({})\n\n  const dispatch = useDispatch()\n  const [businessEntityOptions, setBusinessEntityOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [gstRegistrationTypeOptions, setGstRegistrationTypeOptions] = useState([])\n  //const [setClientType] = useState(2)\n  const [clientInfo, setClientInfo] = useState([])\n  const [contactId, setConatctId] = useState(null)\n\n  const schema = yup.object().shape({\n    clientType: yup.number().default(2),\n    createdBy: yup.string().default(userId),\n    organization: yup.number().default(activeOrgId),\n    uniqueIdentity: yup.string().nullable(),\n    contactPersonName: yup.string().required(\"Please Enter a Contact Person Name\"),\n    name: yup.string().when(\"clientType\", { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Enter Business Name.\") }),\n    contactNumber: yup.string().required(\"Please Enter Conatct Number\").matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n    email: yup.string().email(\"Please Enter valid Email\").required(\"Please Enter valid Email\"),\n    businessEntity: yup.string().when(\"clientType\", { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Select Business Enity.\") }),\n    gstRegistrationType: yup.string().required(\"Please select a GST Type\"),\n    gstin: yup.string().required(\"Please Enter GSTIN No\"),\n    placeOfSupply: yup.string().required(\"Please select Place Of Supply\"),\n    currency: yup.string().default(3),\n    billingAddressZip: yup.string().matches(zipcodeExp, { message: 'Zip Code is not valid', excludeEmptyString: true }),\n    contact_info: yup.array().of(\n      yup.object().shape({\n        createdBy: yup.string().default(userId),\n        name: yup.string().required(\"Please Enter A Name\"),\n        email: yup.string().email().required(\"Please Enter valid Email\"),\n        designation: yup.string().required(\"Please Enter Designation\"),\n        contactNumber: yup.string().required(\"Please Enter Conatct Number\").matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true })\n      })\n    ).min(1, \"Please Enter atleast one contact Info\")\n\n  })\n\n\n  const { handleSubmit, control, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ name: 'contact_info', control })\n\n  const saveContactInfo = (clientId) => {\n    if (clientInfo.length > 0) {\n      clientInfo.forEach((obj, ind) => {\n        clientInfo[ind].contactId = clientId\n      })\n      const rows = clientInfo\n      dispatch(addContactInfo({ rows }))\n      navigate(`/client/view/${clientId}`)\n    }\n  }\n\n  const onSubmit = async (data) => {\n\n    const temp = data.contact_info\n    setClientInfo(predata => ([...predata, ...temp]))\n    delete data.contact_info\n    const datatemp = await dispatch(addClient(data))\n    setConatctId(datatemp.payload.client.id)\n\n  }\n\n  const addItem = (() => {\n    let primarytag = true\n    if (control._formValues.contact_info.length > 0) {\n      primarytag = false\n    }\n    append({ createdBy: userId, organizationId: activeOrgId, contactId: 0, name: '', email: '', contactNumber: '', designation: '', primaryStatus: primarytag })\n  })\n\n  const removeItem = ind => {\n    remove(ind)\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityOptions(arr.businessentities)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/list').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getCurrency = () => {\n    axios.post('/currencies/list').then(response => {\n      const arr = response.data\n      setCurrencyOptions(arr.currencies)\n    })\n  }\n\n  const getGSTRegType = () => {\n    axios.post('/gstregistrationtypes/list').then(response => {\n      const arr = response.data\n      setGstRegistrationTypeOptions(arr.gstregistrationtypes)\n    })\n  }\n\n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='4' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='8'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='4' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName} >\n          {fieldLabel}\n        </Label>\n        <Col sm='8'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                isDisabled={fieldName === 'currency'}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => { return field.onChange(val.id) }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n  useEffect(() => {\n    getBusineessEntity()\n    getCountries()\n    getCurrency()\n    getGSTRegType()\n    getStates()\n\n    addItem()\n    if (contactId !== null) {\n      saveContactInfo(contactId)\n    }\n\n  }, [clientInfo, contactId])\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardHeader>\n          <CardTitle> Add Client</CardTitle>\n        </CardHeader>\n        <CardBody className='pb-0'>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='4' size='lg' className='form-label required' for='contactPersonName'>\n                  Client Type\n                </Label>\n                <Col sm='8'>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      id='clientType_2'\n\n                      control={control}\n                      render={({ field }) => (<Input name='clientType' id='clientType_2' type='radio'\n                        {...field} onInput={val => { return val.target.value }} value={1} />)}\n                    />\n                    <Label className='form-check-label' for='clientType_2'>\n                      Business\n                    </Label>\n                  </div>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      id='clientType_1'\n                      control={control}\n                      render={({ field }) => (<Input name='clientType' id='clientType_1' type='radio'\n                        {...field} onInput={val => { return val.target.value }} value={2} />)}\n                    />\n                    <Label className='form-check-label' for='clientType_1'>\n                      Individual\n                    </Label>\n                  </div>\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Unique No', 'uniqueIdentity', false)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Contact Person Name', 'contactPersonName', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Business Name', 'name', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Mobile Number', 'contactNumber')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Email ID', 'email', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Business Entity', 'businessEntity', businessEntityOptions, true)}\n            </Col>\n          </Row>\n\n        </CardBody>\n        {/* /Header */}\n\n        <hr className='invoice-spacing' />\n        {errors.contact_info && <p className='text-danger ms-2'>{errors.contact_info?.message}</p>}\n        {/* Product Details */}\n        <CardBody className='invoice-padding invoice-product-details'>\n          {fields.map((item, i) => (\n\n            <div key={item.id} className='repeater-wrapper'>\n              <Row >\n                <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                  <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                    <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-50 mb-0'>First Name</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_firstName'\n                        name={`contact_info[${i}].name`}\n                        render={({ field }) => (\n                          <Input type='text' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.name && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.name && <FormFeedback>{errors.contact_info?.[i]?.name.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-2 mb-0 '>Email</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_email'\n                        name={`contact_info[${i}].email`}\n                        render={({ field }) => (\n                          <Input type='email' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.email && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.email && <FormFeedback>{errors.contact_info?.[i]?.email.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-2 mb-0'>Mobile</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_contactNumber'\n                        name={`contact_info[${i}].contactNumber`}\n                        render={({ field }) => (\n                          <Input type='number' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.contactNumber && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.contactNumber && <FormFeedback>{errors.contact_info?.[i]?.contactNumber.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Designation</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_designation'\n                        name={`contact_info[${i}].designation`}\n                        render={({ field }) => (\n                          <Input type='text onChange={(val) => { field.onChange(val)}}' invalid={errors.contact_info?.[i]?.designation && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.designation && <FormFeedback>{errors.contact_info?.[i]?.designation.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Primary</CardText>\n                      <div className='form-switch form-check-primary'>\n                        <Controller\n                          control={control}\n                          id='contact_info_primaryStatus'\n                          name={`contact_info[${i}].primaryStatus`}\n                          render={({ field }) => (\n                            <Input type='switch' onChange={(val) => { field.onChange(val) }} {...field} defaultChecked={field.value} />\n                          )}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                  <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                    <X size={18} className='cursor-pointer' onClick={() => { removeItem(i) }} />\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          ))}\n\n          <Row className='mt-1'>\n            <Col sm='12' className='px-0'>\n              <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n              </Button>\n            </Col>\n          </Row>\n\n        </CardBody>\n\n        <hr className='invoice-spacing' />\n        {/* Product Details */}\n        <CardBody>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('GST Type', 'gstRegistrationType', gstRegistrationTypeOptions, true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Place of Supply', 'placeOfSupply', stateOptions, true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('GSTIN', 'gstin', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Currency', 'currency', currencyOptions, false)}\n            </Col>\n          </Row>\n        </CardBody>\n        {/* Invoice Total */}\n        <CardBody className=''>\n          <h4 className='text-primary'>Billing Address</h4>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line1', 'billingAddressLine1')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line2', 'billingAddressLine2')}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('City', 'billingAddressCity')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('State', 'billingAddressState', stateOptions)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Country', 'billingAddressCountry', countryOptions)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Zip Code', 'billingAddressZip')}\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/client/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form >\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ClientAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ClientAdd\n"],"sourceRoot":""}