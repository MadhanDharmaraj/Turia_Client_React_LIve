{"version":3,"sources":["views/pages/authentication/ResetPasswordBasic.js","@core/components/input-password-toggle/index.js"],"names":["ResetPasswordBasic","search","useLocation","token","URLSearchParams","get","email","navigate","useNavigate","SignupSchema","yup","shape","default","password","required","matches","confirmPassword","oneOf","useForm","resolver","yupResolver","control","handleSubmit","errors","formState","setError","onSubmit","data","axios","post","then","toast","success","position","catch","err","console","log","className","to","onClick","e","preventDefault","src","themeConfig","app","appLogoImage","alt","width","height","tag","for","id","name","render","field","htmlFor","invalid","message","color","block","size","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","placeholder","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","classnames","type","renderIcon","defaultProps"],"mappings":"qSA8HeA,UA3GY,WAEzB,IACMC,EAASC,cAAcD,OACvBE,EAAQ,IAAIC,gBAAgBH,GAAQI,IAAI,SACxCC,EAAQ,IAAIF,gBAAgBH,GAAQI,IAAI,SACxCE,EAAWC,cACXC,EAAeC,MAAaC,MAAM,CACtCL,MAAOI,MAAaJ,QAAQM,QAAQN,GACpCH,MAAOO,MAAaE,QAAQT,GAC5BU,SAAUH,MAAaI,SAAS,wBAAwBC,QARrC,iEAUjB,+GACFC,gBAAiBN,MAEdI,SAAS,gCACTG,MAAM,CAACP,IAAQ,YAAa,MAAO,0BAIxC,EAIIQ,YAAQ,CACVC,SAAUC,YAAYX,KAJtBY,EAAO,EAAPA,QACAC,EAAY,EAAZA,aACaC,EAAM,EAAnBC,UAAaD,OAAUE,EAAQ,EAARA,SAKnBC,EAAQ,iDAAG,WAAMC,GAAI,2EAEzBC,IAAMC,KAAK,gCAAiCF,GACzCG,MAAK,WACJC,IAAMC,QAAQ,iCAAkC,CAAEC,SAAU,iBAC5D1B,EAAS,SACX,IAAG2B,OAAM,SAACC,GAAUC,QAAQC,IAAIF,GAAMV,EAASU,EAAK,IAAE,2CAEzD,gBARa,sCAUd,OACE,qBAAKG,UAAU,+BAA8B,SAC3C,qBAAKA,UAAU,kBAAiB,SAC9B,cAAC,IAAI,CAACA,UAAU,OAAM,SACpB,eAAC,IAAQ,WACP,eAAC,IAAI,CAACA,UAAU,aAAaC,GAAG,IAAIC,QAAS,SAAAC,GAAC,OAAIA,EAAEC,gBAAgB,EAAC,UACnE,qBAAKC,IAAKC,IAAYC,IAAIC,aAAcC,IAAK,aAAcC,MAAO,GAAIC,OAAQ,KAC9E,oBAAIX,UAAU,0BAAyB,SAAC,aAE1C,cAAC,IAAS,CAACY,IAAI,KAAKZ,UAAU,OAAM,SAAC,gCAGrC,cAAC,IAAQ,CAACA,UAAU,OAAM,SAAC,uEAC3B,eAAC,IAAI,CAACA,UAAU,gCAAgCZ,SAAUJ,EAAaI,GAAU,UAC/E,sBAAKY,UAAU,OAAM,UACnB,cAAC,IAAK,CAACA,UAAU,aAAaa,IAAI,eAAc,SAAC,iBAGjD,cAAC,IAAU,CACTC,GAAG,WACHC,KAAK,WACLhC,QAASA,EACTiC,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACd,cAAC,IAAmB,aAClBC,QAAQ,WACRlB,UAAU,oBACVmB,QAASlC,EAAOV,WAAY,GACxB0C,GACJ,IAGLhC,EAAOV,UAAY,cAAC,IAAY,UAAEU,EAAOV,SAAS6C,aAErD,sBAAKpB,UAAU,OAAM,UACnB,cAAC,IAAK,CAACA,UAAU,aAAaa,IAAI,mBAAkB,SAAC,qBAGrD,cAAC,IAAU,CACT9B,QAASA,EACT+B,GAAG,kBACHC,KAAK,kBACLC,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACd,cAAC,IAAmB,aAClBC,QAAQ,kBACRlB,UAAU,oBACVmB,QAASlC,EAAOP,kBAAmB,GAC/BuC,GACJ,IAGLhC,EAAOP,iBAAmB,cAAC,IAAY,UAAEO,EAAOP,gBAAgB0C,aAEnE,cAAC,IAAM,CAACC,MAAM,UAAUC,OAAK,WAAC,wBAIhC,mBAAGtB,UAAU,mBAAkB,SAC7B,eAAC,IAAI,CAACC,GAAG,qBAAoB,UAC3B,cAAC,IAAW,CAACD,UAAU,mBAAmBuB,KAAM,KAChD,sBAAMvB,UAAU,eAAc,SAAC,+BAQ/C,C,6QCjHMwB,EAAsBC,sBAAW,SAACC,EAAOC,GAAS,IAAD,EAGnDC,EAWEF,EAXFE,MACAC,EAUEH,EAVFG,SACAC,EASEJ,EATFI,SACAC,EAQEL,EARFK,QACA/B,EAOE0B,EAPF1B,UACAkB,EAMEQ,EANFR,QACAc,EAKEN,EALFM,YACAC,EAIEP,EAJFO,SACAC,EAGER,EAHFQ,eACAf,EAEEO,EAFFP,QACGgB,EAXL,YAYIT,EAZJ,GAeA,EAA8CU,mBAASL,GAAvD,mBAAOM,EAAP,KAAwBC,EAAxB,KAaA,OACE,eAAC,WAAD,WACGV,EACC,cAAC,IAAD,CAAO5B,UAAU,aAAaa,IAAKK,EAAnC,SACGU,IAED,KACJ,eAAC,IAAD,CACE5B,UAAWuC,KAAU,mBAClBvC,EAAYA,GADM,cAEnB,aAAcmB,GAFK,IADvB,UAME,cAAC,IAAD,yBACEQ,IAAKA,EACLR,QAASA,EACTqB,MAA0B,IAApBH,EAA4B,WAAa,OAC/CL,YAAaA,GAA4B,mDACzChC,UAAWuC,IAAW,eACnBL,EAAiBA,KAGfN,GAASV,EACV,CACEJ,GAAII,GAEN,CAAC,GACDiB,IAGN,cAAC,IAAD,CAAgBnC,UAAU,iBAAiBE,QAAS,kBAAMoC,GAAoBD,EAA1B,EAApD,SAxCa,WACjB,IAAMd,EAAOU,GAAsB,GAEnC,OAAwB,IAApBI,EACKR,GAAsB,cAAC,IAAD,CAAKN,KAAMA,IAEjCO,GAAsB,cAAC,IAAD,CAAQP,KAAMA,GAE9C,CAiCQkB,UAKV,IAEcjB,MA2BfA,EAAoBkB,aAAe,CACjCX,SAAS,E","file":"static/js/128.ef6d8643.chunk.js","sourcesContent":["// ** React Imports\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\nimport themeConfig from '@src/configs/themeConfig'\n// ** Icons Imports\nimport { ChevronLeft } from 'react-feather'\n\n// ** Custom Components\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport axios from '@src/configs/axios/axiosConfig'\nimport * as yup from 'yup'\nimport { useForm, Controller } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\n// ** Reactstrap Imports\nimport { Card, CardBody, CardTitle, CardText, Form, Label, Button, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/pages/page-authentication.scss'\nimport toast from 'react-hot-toast'\n\nconst ResetPasswordBasic = () => {\n\n  const passwordRegx = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/\n  const search = useLocation().search\n  const token = new URLSearchParams(search).get('token')\n  const email = new URLSearchParams(search).get('email')\n  const navigate = useNavigate()\n  const SignupSchema = yup.object().shape({\n    email: yup.string().email().default(email),\n    token: yup.string().default(token),\n    password: yup.string().required('Password is Required').matches(\n      passwordRegx,\n      \"Password must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"),\n    confirmPassword: yup\n      .string()\n      .required('Confirm Password is Required')\n      .oneOf([yup.ref(`password`), null], 'Passwords must match')\n  })\n\n  // ** Hooks\n  const {\n    control,\n    handleSubmit,\n    formState: { errors }, setError\n  } = useForm({\n    resolver: yupResolver(SignupSchema)\n  })\n\n  const onSubmit = async data => {\n\n    axios.post('/passwordresets/resetpassword', data)\n      .then(() => {\n        toast.success('Password Reset Successfully...', { position: 'bottom-right' })\n        navigate('/login')\n      }).catch((err) => { console.log(err); setError(err) })\n\n  }\n\n  return (\n    <div className='auth-wrapper auth-basic px-2'>\n      <div className='auth-inner my-2'>\n        <Card className='mb-0'>\n          <CardBody>\n            <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n              <img src={themeConfig.app.appLogoImage} alt={'Turia Logo'} width={45} height={35} />\n              <h1 className='brand-text text-primary'>Turia</h1>\n            </Link>\n            <CardTitle tag='h4' className='mb-1'>\n              Reset Password ðŸ”’\n            </CardTitle>\n            <CardText className='mb-2'>Your new password must be different from previously used passwords</CardText>\n            <Form className='auth-reset-password-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <div className='mb-1'>\n                <Label className='form-label' for='new-password'>\n                  New Password\n                </Label>\n                <Controller\n                  id='password'\n                  name='password'\n                  control={control}\n                  render={({ field }) => (\n                    <InputPasswordToggle\n                      htmlFor='password'\n                      className='input-group-merge'\n                      invalid={errors.password && true}\n                      {...field}\n                    />\n                  )}\n                />\n                {errors.password && <FormFeedback>{errors.password.message}</FormFeedback>}\n              </div>\n              <div className='mb-1'>\n                <Label className='form-label' for='confirm-password'>\n                  Confirm Password\n                </Label>\n                <Controller\n                  control={control}\n                  id='confirmPassword'\n                  name='confirmPassword'\n                  render={({ field }) => (\n                    <InputPasswordToggle\n                      htmlFor='confirmPassword'\n                      className='input-group-merge'\n                      invalid={errors.confirmPassword && true}\n                      {...field}\n                    />\n                  )}\n                />\n                {errors.confirmPassword && <FormFeedback>{errors.confirmPassword.message}</FormFeedback>}\n              </div>\n              <Button color='primary' block>\n                Set New Password\n              </Button>\n            </Form>\n            <p className='text-center mt-2'>\n              <Link to='/pages/login-basic'>\n                <ChevronLeft className='rotate-rtl me-25' size={14} />\n                <span className='align-middle'>Back to login</span>\n              </Link>\n            </p>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nexport default ResetPasswordBasic\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : 'Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}