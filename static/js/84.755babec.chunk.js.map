{"version":3,"sources":["views/apps/task/edit/EditCard.js","views/apps/task/edit/index.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","EditCard","inputRef","useRef","navigate","useNavigate","useState","date","setDate","id","useParams","schema","yup","shape","updatedBy","default","clientId","required","serviceId","assignee","min","reviewer","clientAccessFlag","organizationId","taskStatus","invoiceId","startDate","endDate","priority","invoiceFlag","store","useSelector","state","task","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","reset","setValue","priorityOptions","name","assigneeUserOptions","setAssigneeUserOptions","reviewerUserOptions","setReviewerUserOptions","userOptions","dispatch","useDispatch","clientOptions","setClientOptions","serviceOptions","setServiceOptions","setinvoiceFlag","taskParticipants","seTaskParticipants","useEffect","a","taskId","arr","map","obj","addTaskParticipants","rows","formatparticipants","user","type","createdBy","onSubmit","data","tempParticipants","forEach","push","updateTask","axios","post","then","response","clients","services","handleAssigneeChange","e","reviewerOptions","tempArr","Array","isArray","x","length","filter","id1","some","id2","handleReviwerChange","assigneeOptions","selectedTask","clientid","serviceid","taskstatus","invoiceid","startdate","enddate","parseInt","invoiceflag","undefined","getTask","className","Object","keys","k","message","sm","size","for","render","field","ref","classnames","classNamePrefix","options","value","find","c","onChange","val","getClientData","getOptionLabel","option","getOptionValue","invalid","description","multiple","event","console","log","target","files","outline","color","onClick","current","click","isMulti","rules","dateFormat","dateStr","altInput","altFormat","tag","Link","to","TaskEdit","xl","md"],"mappings":"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","file":"static/js/84.755babec.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect, useRef } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\n// ** Custom Components\nimport classnames from 'classnames'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus } from 'react-feather'\nimport Select, { components } from 'react-select'\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\nimport { getTask, addTaskParticipants } from '../store'\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, FormFeedback, Input, CardHeader } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n\nconst EditCard = () => {\n  // ** States\n  const inputRef = useRef(null)\n  const navigate = useNavigate()\n  const [setOpen] = useState(false)\n  const [date, setDate] = useState(\"\")\n  const { id } = useParams()\n\n  const schema = yup.object().shape({\n    updatedBy: yup.string().default(userId),\n    clientId: yup.number().required(\"Please select a Client\"),\n    serviceId: yup.number().required(\"Please select a Service\"),\n    assignee: yup.array().min(1, \"Please select Assignee\"),\n    reviewer: yup.array(),\n    clientAccessFlag: yup.boolean().default(false),\n    organizationId: yup.number().default(activeOrgId),\n    taskStatus: yup.number().default(1),\n    invoiceId: yup.number().default(0),\n    startDate: yup.string().required('Please Select Start Date'),\n    endDate: yup.string().required('Please Select End Date'),\n    priority: yup.string().required(\"Please select a Priority\"),\n    invoiceFlag: yup.boolean().default(false)\n  })\n  const store = useSelector(state => state.task)\n\n  const { handleSubmit, formState: { errors }, control, reset, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const priorityOptions = [\n    { id: 1, name: \"Low\" },\n    { id: 2, name: \"Medium\" },\n    { id: 3, name: \"High\" }\n  ]\n\n  const [assigneeUserOptions, setAssigneeUserOptions] = useState([{ id: 1, name: 'Madhan' }, { id: 2, name: 'Kavin' }, { id: 3, name: 'Akhalya' }])\n  const [reviewerUserOptions, setReviewerUserOptions] = useState([{ id: 1, name: 'Madhan' }, { id: 2, name: 'Kavin' }, { id: 3, name: 'Akhalya' }])\n  const userOptions = [{ id: 1, name: 'Madhan' }, { id: 2, name: 'Kavin' }, { id: 3, name: 'Akhalya' }]\n\n  const dispatch = useDispatch()\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  //const [userOptions, setUserOptions] = useState([])\n\n  const [invoiceFlag, setinvoiceFlag] = useState(false)\n  const [taskParticipants, seTaskParticipants] = useState([])\n\n  useEffect(async () => {\n    if (store.taskId !== null) {\n      const arr = taskParticipants.map((obj) => {\n        return { ...obj, taskId: store.taskId }\n      })\n      await dispatch(addTaskParticipants({ rows: arr }))\n\n      const id = store.taskId\n      navigate(`/task/view/${id}`)\n\n    }\n  }, [store.taskId])\n\n  const formatparticipants = (user, type) => {\n    const obj = {\n      organizationId: activeOrgId,\n      userId: user,\n      type,\n      createdBy: userId\n    }\n    return obj\n  }\n\n  const onSubmit = async data => {\n\n    const tempParticipants = []\n    data.assignee.forEach((user) => {\n      tempParticipants.push(formatparticipants(user, 2))\n    })\n\n    data.reviewer.forEach((user) => {\n      tempParticipants.push(formatparticipants(user, 2))\n    })\n\n    seTaskParticipants(tempParticipants)\n    delete data.assignee\n    delete data.reviewer\n\n    await dispatch(updateTask(data))\n  }\n\n  const getClients = () => {\n    axios.post('/clients/dropdown').then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown').then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const enableInvoice = () => {\n    setinvoiceFlag(!invoiceFlag)\n  }\n\n  useEffect(() => {\n    getClients()\n    getServices()\n  }, [])\n\n  // handle onChange event of the dropdown\n  const handleAssigneeChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let reviewerOptions\n    if (tempArr.length > 0) {\n      reviewerOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { reviewerOptions = userOptions }\n\n    setReviewerUserOptions(reviewerOptions)\n    setValue(\"assignee\", tempArr)\n  }\n\n  const handleReviwerChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let assigneeOptions\n    if (tempArr.length > 0) {\n      assigneeOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { assigneeOptions = userOptions }\n\n    setAssigneeUserOptions(assigneeOptions)\n    setValue(\"reviewer\", tempArr)\n  }\n\n  const changeHandler = (event) => {\n    console.log(event.target.files)\n  }\n\n  // const handleSubmission = () => {\n  //   const formData = new FormData()\n\n  //     // Update the formData object\n  //     formData.append(\n  //       \"myFile\",\n  //       selectedFile,\n  //       selectedFile.name\n  //     )\n\n  //     // Details of the uploaded file\n  //     console.log(selectedFile)\n  // }\n\n  useEffect(async () => {\n    if (store.selectedTask !== null) {\n      reset({\n        updatedBy: userId,\n        clientId: store.selectedTask.clientid,\n        serviceId: store.selectedTask.serviceid,\n        assignee: [],\n        reviewer: [],\n        clientAccessFlag: false,\n        organizationId: activeOrgId,\n        taskStatus: store.selectedTask.taskstatus,\n        invoiceId: store.selectedTask.invoiceid || 0,\n        startDate: store.selectedTask.startdate,\n        endDate: store.selectedTask.enddate,\n        priority: parseInt(store.selectedTask.priority),\n        invoiceFlag: store.selectedTask.invoiceflag\n      })\n    }\n  }, [store.selectedTask])\n\n  useEffect(async () => {\n    if (id !== undefined) {\n      await dispatch(getTask(id))\n    }\n  }, [id])\n\n  // ** Custom Options Component\n  const OptionComponent = ({ data, ...props }) => {\n    if (data.type === 'button') {\n      return (\n        <Button className='text-start rounded-0 px-50' color={data.color} block onClick={() => setOpen(true)}>\n          <Plus className='font-medium-1 me-50' />\n          <span className='align-middle'>{data.label}</span>\n        </Button>\n      )\n    } else {\n      return <components.Option {...props}> {data.label} </components.Option>\n    }\n  }\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {Object.keys(errors).map((obj, k) => {\n          return <FormFeedback key={k}> {errors[obj]?.message}</FormFeedback>\n        })}\n        <CardHeader>Edit Task</CardHeader>\n        {/* Header */}\n        <CardBody className='pb-2 px-2'>\n          <Row>\n            <div className='col-lg-6 col-sm-12'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='clientId'>\n                  Client\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"clientId\"\n                    id=\"clientId\"\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.clientId })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={clientOptions}\n                        value={clientOptions.find(c => { return c.id === field.value })}\n                        onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.clientId && <FormFeedback className='text-danger'>{errors.clientId?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='serviceId'>\n                  Service\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"serviceId\"\n                    id=\"serviceId\"\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.serviceId })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={serviceOptions}\n                        value={serviceOptions.find(c => { return c.id === field.value })}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.serviceId && <FormFeedback className='text-danger'>{errors.serviceId?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='description'>\n                  Description\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='description'\n                    name='description'\n                    control={control}\n                    render={({ field }) => <Input type=\"textarea\" invalid={errors.description && true} {...field} />}\n                  />\n                  {errors.description && <FormFeedback>{errors.description.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='my-2'>\n                <Col>\n                  <div className='d-lg-flex'>\n                    <input type='file' className='hidden' multiple onChange={changeHandler} ref={inputRef} />\n                    <Button type='button' outline color='primary' onClick={() => inputRef.current.click()}>\n                      <Plus size={14} className='me-25'></Plus> Add Attachment</Button>\n                  </div>\n                </Col>\n              </Row>\n            </div>\n            <div className='col-lg-6 col-sm-12'>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='assignee'>\n                  Assignee\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"assignee\"\n                    id=\"assignee\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.assignee })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={assigneeUserOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleAssigneeChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.assignee && <FormFeedback className='text-danger'>{errors.assignee?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='reviewer'>\n                  Reviewer\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={reviewerUserOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleReviwerChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.reviewer && <FormFeedback className='text-danger'>{errors.reviewer?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='startDate'>\n                  Start Date\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    value={date}\n                    name=\"startDate\"\n                    control={control}\n                    rules={{ required: true }}\n                    options={{ dateFormat: \"d-m-Y\" }}\n                    render={({ field }) => (\n                      <Flatpickr\n                        value={field.value}\n                        onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                        options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                        className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.startDate })} />\n                    )}\n                  />\n\n                  {errors.startDate && <FormFeedback className='text-danger'>{errors.startDate?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='endDate'>\n                  End Date\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    value={date}\n                    onChange={date => setDate(date)}\n                    name=\"endDate\"\n                    control={control}\n                    rules={{ required: true }}\n                    options={{ dateFormat: \"d-m-Y\" }}\n                    render={({ field }) => (\n                      <Flatpickr\n                        value={field.value}\n                        onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                        options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                        className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.endDate })} />\n                    )}\n                  />\n\n                  {errors.endDate && <FormFeedback className='text-danger'>{errors.endDate?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='priority'>\n                  Priority\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"priority\"\n                    id=\"priority\"\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.priority })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={priorityOptions}\n                        value={priorityOptions.find(c => { return c.id === field.value })}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.priority && <FormFeedback className='text-danger'>{errors.priority?.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </div>\n          </Row>\n        </CardBody>\n        <hr className='invoice-spacing' />\n        <Row className='px-1 pb-2'>\n          <div className='form-check form-check-primary mx-2'>\n            <Controller\n              control={control}\n              name={`invoiceFlag`}\n              rules={{ required: true }}\n              render={({ field }) => (\n                <Input className='form-check-input' type='checkbox' id='invoice_flag' value={field.value} {...field} onChange={(val) => { field.onChange(val); enableInvoice() }} />\n              )}\n            />\n            <Label className='form-check-label' for='invoice_flag'>\n              Create Proposal for this Task\n            </Label>\n          </div>\n        </Row>\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button className='add-new-user' outline color='warning' tag={Link} to='/task/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form >\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst TaskEdit = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default TaskEdit\n"],"sourceRoot":""}