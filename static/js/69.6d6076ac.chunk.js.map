{"version":3,"sources":["views/apps/recurring-task/edit/EditCard.js","views/apps/recurring-task/edit/index.js","views/apps/recurring-task/store/index.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","EditCard","inputRef","useRef","navigate","useNavigate","useState","date","setDate","id","useParams","schema","yup","shape","updatedBy","default","clientId","required","serviceId","assignee","min","reviewer","clientAccessFlag","organizationId","taskStatus","invoiceId","startDate","endDate","priority","invoiceFlag","store","useSelector","state","task","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","reset","setValue","priorityOptions","name","assigneeUserOptions","setAssigneeUserOptions","reviewerUserOptions","setReviewerUserOptions","dispatch","useDispatch","clientOptions","setClientOptions","serviceOptions","setServiceOptions","userOptions","setUserOptions","setinvoiceFlag","taskParticipants","seTaskParticipants","useEffect","a","taskId","arr","map","obj","addTaskParticipants","rows","formatparticipants","user","type","createdBy","onSubmit","data","tempParticipants","forEach","push","updateTask","getOrganizationUsers","axios","post","then","response","organizationusers","catch","err","console","log","clients","services","handleAssigneeChange","e","reviewerOptions","tempArr","Array","isArray","x","length","filter","id1","some","id2","handleReviwerChange","assigneeOptions","selectedTask","clientid","serviceid","taskstatus","invoiceid","startdate","enddate","parseInt","invoiceflag","undefined","getTask","className","Object","keys","k","message","sm","size","for","render","field","ref","classnames","classNamePrefix","options","value","find","c","onChange","val","getClientData","getOptionLabel","option","getOptionValue","invalid","description","multiple","event","target","files","outline","color","onClick","current","click","isMulti","rules","dateFormat","dateStr","altInput","altFormat","tag","Link","to","TaskEdit","xl","md","getData","createAsyncThunk","params","tasks","totalPages","total","getClient","addTask","taskparticpants","updateInvocieId","taskworkflows","deleteTask","getState","createSlice","initialState","allData","editflag","reducers","extraReducers","builder","addCase","fulfilled","action","payload"],"mappings":"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","file":"static/js/69.6d6076ac.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect, useRef } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\n// ** Custom Components\nimport classnames from 'classnames'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus } from 'react-feather'\nimport Select, { components } from 'react-select'\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\nimport { getTask, addTaskParticipants } from '../store'\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, FormFeedback, Input, CardHeader } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n\nconst EditCard = () => {\n  // ** States\n  const inputRef = useRef(null)\n  const navigate = useNavigate()\n  const [setOpen] = useState(false)\n  const [date, setDate] = useState(\"\")\n  const { id } = useParams()\n\n  const schema = yup.object().shape({\n    updatedBy: yup.string().default(userId),\n    clientId: yup.number().required(\"Please select a Client\"),\n    serviceId: yup.number().required(\"Please select a Service\"),\n    assignee: yup.array().min(1, \"Please select Assignee\"),\n    reviewer: yup.array(),\n    clientAccessFlag: yup.boolean().default(false),\n    organizationId: yup.number().default(activeOrgId),\n    taskStatus: yup.number().default(1),\n    invoiceId: yup.number().default(0),\n    startDate: yup.string().required('Please Select Start Date'),\n    endDate: yup.string().required('Please Select End Date'),\n    priority: yup.string().required(\"Please select a Priority\"),\n    invoiceFlag: yup.boolean().default(false)\n  })\n  const store = useSelector(state => state.task)\n\n  const { handleSubmit, formState: { errors }, control, reset, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const priorityOptions = [\n    { id: 1, name: \"Low\" },\n    { id: 2, name: \"Medium\" },\n    { id: 3, name: \"High\" }\n  ]\n\n  const [assigneeUserOptions, setAssigneeUserOptions] = useState([])\n  const [reviewerUserOptions, setReviewerUserOptions] = useState([])\n\n  const dispatch = useDispatch()\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [userOptions, setUserOptions] = useState([])\n\n  const [invoiceFlag, setinvoiceFlag] = useState(false)\n  const [taskParticipants, seTaskParticipants] = useState([])\n\n  useEffect(async () => {\n    if (store.taskId !== null) {\n      const arr = taskParticipants.map((obj) => {\n        return { ...obj, taskId: store.taskId }\n      })\n      await dispatch(addTaskParticipants({ rows: arr }))\n\n      const id = store.taskId\n      navigate(`/recurring-task/view/${id}`)\n\n    }\n  }, [store.taskId])\n\n  const formatparticipants = (user, type) => {\n    const obj = {\n      organizationId: activeOrgId,\n      userId: user,\n      type,\n      createdBy: userId\n    }\n    return obj\n  }\n\n  const onSubmit = async data => {\n\n    const tempParticipants = []\n    data.assignee.forEach((user) => {\n      tempParticipants.push(formatparticipants(user, 1))\n    })\n\n    data.reviewer.forEach((user) => {\n      tempParticipants.push(formatparticipants(user, 2))\n    })\n\n    seTaskParticipants(tempParticipants)\n    delete data.assignee\n    delete data.reviewer\n\n    await dispatch(updateTask(data))\n  }\n\n  const getClients = () => {\n    axios.post('/clients/dropdown').then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown').then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data\n      setReviewerUserOptions(arr.organizationusers)\n      setAssigneeUserOptions(arr.organizationusers)\n      setUserOptions(arr.organizationusers)\n    }).catch((err) => {\n      console.log(err)\n    })\n\n  }\n\n  const enableInvoice = () => {\n    setinvoiceFlag(!invoiceFlag)\n  }\n\n  useEffect(() => {\n    getClients()\n    getServices()\n    getOrganizationUsers()\n  }, [])\n\n  // handle onChange event of the dropdown\n  const handleAssigneeChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let reviewerOptions\n    if (tempArr.length > 0) {\n      reviewerOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { reviewerOptions = userOptions }\n\n    setReviewerUserOptions(reviewerOptions)\n    setValue(\"assignee\", tempArr)\n  }\n\n  const handleReviwerChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let assigneeOptions\n    if (tempArr.length > 0) {\n      assigneeOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { assigneeOptions = userOptions }\n\n    setAssigneeUserOptions(assigneeOptions)\n    setValue(\"reviewer\", tempArr)\n  }\n\n  const changeHandler = (event) => {\n    console.log(event.target.files)\n  }\n\n  // const handleSubmission = () => {\n  //   const formData = new FormData()\n\n  //     // Update the formData object\n  //     formData.append(\n  //       \"myFile\",\n  //       selectedFile,\n  //       selectedFile.name\n  //     )\n\n  //     // Details of the uploaded file\n  //     console.log(selectedFile)\n  // }\n\n  useEffect(async () => {\n    if (store.selectedTask !== null) {\n      reset({\n        updatedBy: userId,\n        clientId: store.selectedTask.clientid,\n        serviceId: store.selectedTask.serviceid,\n        assignee: [],\n        reviewer: [],\n        clientAccessFlag: false,\n        organizationId: activeOrgId,\n        taskStatus: store.selectedTask.taskstatus,\n        invoiceId: store.selectedTask.invoiceid || 0,\n        startDate: store.selectedTask.startdate,\n        endDate: store.selectedTask.enddate,\n        priority: parseInt(store.selectedTask.priority),\n        invoiceFlag: store.selectedTask.invoiceflag\n      })\n    }\n  }, [store.selectedTask])\n\n  useEffect(async () => {\n    if (id !== undefined) {\n      await dispatch(getTask(id))\n    }\n  }, [id])\n\n  // ** Custom Options Component\n  const OptionComponent = ({ data, ...props }) => {\n    if (data.type === 'button') {\n      return (\n        <Button className='text-start rounded-0 px-50' color={data.color} block onClick={() => setOpen(true)}>\n          <Plus className='font-medium-1 me-50' />\n          <span className='align-middle'>{data.label}</span>\n        </Button>\n      )\n    } else {\n      return <components.Option {...props}> {data.label} </components.Option>\n    }\n  }\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {Object.keys(errors).map((obj, k) => {\n          return <FormFeedback key={k}> {errors[obj]?.message}</FormFeedback>\n        })}\n        <CardHeader>Edit Task</CardHeader>\n        {/* Header */}\n        <CardBody className='pb-2 px-2'>\n          <Row>\n            <div className='col-lg-6 col-sm-12'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='clientId'>\n                  Client\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"clientId\"\n                    id=\"clientId\"\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.clientId })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={clientOptions}\n                        value={clientOptions.find(c => { return c.id === field.value })}\n                        onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.clientId && <FormFeedback className='text-danger'>{errors.clientId?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='serviceId'>\n                  Service\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"serviceId\"\n                    id=\"serviceId\"\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.serviceId })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={serviceOptions}\n                        value={serviceOptions.find(c => { return c.id === field.value })}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.serviceId && <FormFeedback className='text-danger'>{errors.serviceId?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='description'>\n                  Description\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='description'\n                    name='description'\n                    control={control}\n                    render={({ field }) => <Input type=\"textarea\" invalid={errors.description && true} {...field} />}\n                  />\n                  {errors.description && <FormFeedback>{errors.description.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='my-2'>\n                <Col>\n                  <div className='d-lg-flex'>\n                    <input type='file' className='hidden' multiple onChange={changeHandler} ref={inputRef} />\n                    <Button type='button' outline color='primary' onClick={() => inputRef.current.click()}>\n                      <Plus size={14} className='me-25'></Plus> Add Attachment</Button>\n                  </div>\n                </Col>\n              </Row>\n            </div>\n            <div className='col-lg-6 col-sm-12'>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='assignee'>\n                  Assignee\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"assignee\"\n                    id=\"assignee\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.assignee })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={assigneeUserOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleAssigneeChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.assignee && <FormFeedback className='text-danger'>{errors.assignee?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='reviewer'>\n                  Reviewer\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={reviewerUserOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleReviwerChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.reviewer && <FormFeedback className='text-danger'>{errors.reviewer?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='startDate'>\n                  Start Date\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    value={date}\n                    name=\"startDate\"\n                    control={control}\n                    rules={{ required: true }}\n                    options={{ dateFormat: \"d-m-Y\" }}\n                    render={({ field }) => (\n                      <Flatpickr\n                        value={field.value}\n                        onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                        options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                        className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.startDate })} />\n                    )}\n                  />\n\n                  {errors.startDate && <FormFeedback className='text-danger'>{errors.startDate?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='endDate'>\n                  End Date\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    value={date}\n                    onChange={date => setDate(date)}\n                    name=\"endDate\"\n                    control={control}\n                    rules={{ required: true }}\n                    options={{ dateFormat: \"d-m-Y\" }}\n                    render={({ field }) => (\n                      <Flatpickr\n                        value={field.value}\n                        onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                        options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                        className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.endDate })} />\n                    )}\n                  />\n\n                  {errors.endDate && <FormFeedback className='text-danger'>{errors.endDate?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='priority'>\n                  Priority\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"priority\"\n                    id=\"priority\"\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.priority })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={priorityOptions}\n                        value={priorityOptions.find(c => { return c.id === field.value })}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.priority && <FormFeedback className='text-danger'>{errors.priority?.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </div>\n          </Row>\n        </CardBody>\n        <hr className='invoice-spacing' />\n        <Row className='px-1 pb-2'>\n          <div className='form-check form-check-primary mx-2'>\n            <Controller\n              control={control}\n              name={`invoiceFlag`}\n              rules={{ required: true }}\n              render={({ field }) => (\n                <Input className='form-check-input' type='checkbox' id='invoice_flag' value={field.value} {...field} onChange={(val) => { field.onChange(val); enableInvoice() }} />\n              )}\n            />\n            <Label className='form-check-label' for='invoice_flag'>\n              Create Proposal for this Task\n            </Label>\n          </div>\n        </Row>\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button className='add-new-user' outline color='warning' tag={Link} to='/recurring-task/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form >\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst TaskEdit = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default TaskEdit\n","// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\n// ** Axios Imports\nimport axios from '@src/configs/axios/axiosConfig'\nimport { orgUserId } from '@src/helper/sassHelper'\nconst userId = orgUserId()\n\nexport const getData = createAsyncThunk('appTasks/getData', async params => {\n  const response = await axios.post('/tasks/list', params)\n  return {\n    params,\n    data: response.data.tasks.tasks,\n    totalPages: response.data.tasks.total\n  }\n})\n\nexport const getClient = createAsyncThunk('appTasks/getClient', async id => {\n  const response = await axios.post('/clients/get', { id })\n  return response.data.clients\n})\n\nexport const getTask = createAsyncThunk('appTasks/getTask', async id => {\n  const response = await axios.post('/tasks/get', { id })\n  return response.data.task\n})\n\nexport const addTask = createAsyncThunk('appTasks/addTask', async (task, { }) => {\n  const response = await axios.post('/tasks/create', task)\n  return response.data.task\n})\n\nexport const addTaskParticipants = createAsyncThunk('appTasks/addTaskParticipants', async (taskparticpants, { }) => {\n  await axios.post('/recurring-taskparticpants/create', taskparticpants)\n  return []\n})\n\nexport const addTaskWorkflow = createAsyncThunk('appTasks/addTaskWorkflow', async (taskworkflows, { }) => {\n  await axios.post('/recurring-taskworkflows/create', taskworkflows)\n  return []\n})\n\nexport const updateInvocieId = createAsyncThunk('appTasks/updateInvocieId', async (data, { }) => {\n  await axios.post('/tasks/updateinvocieid', data)\n  return response.data.task\n})\n\nexport const updateTask = createAsyncThunk('appTasks/updateTask', async (task, { }) => {\n  const response = await axios.post('/tasks/create', task)\n  return response.data.task\n})\n\nexport const deleteTask = createAsyncThunk('appTasks/deleteTask', async (id, { dispatch, getState }) => {\n  await axios.post('/tasks/delete', { id, updatedBy :userId })\n  await dispatch(getData(getState().tasks.params))\n  return id\n})\n\nexport const appTasksSlice = createSlice({\n  name: 'appTasks',\n  initialState: {\n    data: [],\n    total: 1,\n    params: {},\n    allData: [],\n    selectedTask: null,\n    taskId: null,\n    editflag : true\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getData.fulfilled, (state, action) => {\n        state.data = action.payload.data\n        state.params = action.payload.params\n        state.total = action.payload.totalPages\n      })\n      .addCase(getTask.fulfilled, (state, action) => {\n        state.selectedTask = action.payload\n      })\n      .addCase(addTask.fulfilled, (state, action) => {\n        state.taskId = action.payload\n      })\n      .addCase(updateTask.fulfilled, (state, action) => {\n        state.taskId = action.payload\n      })\n  }\n})\n\nexport default appTasksSlice.reducer\n"],"sourceRoot":""}