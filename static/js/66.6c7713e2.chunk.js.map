{"version":3,"sources":["views/apps/service/edit/EditCard.js","views/apps/service/edit/index.js"],"names":["EditCard","id","useParams","navigate","useNavigate","dispatch","useDispatch","useState","categoryOptions","setCateoryOptions","taxGroupOptions","setTaxGroupOptions","serviceDetails","setServiceDetails","schema","yup","shape","categoryId","required","name","taxgroupid","sellingPrice","sacCode","useForm","resolver","yupResolver","defaultValues","organizationId","categoryType","description","handleSubmit","control","reset","errors","formState","getServiceData","a","getService","service","payload","useEffect","Object","keys","length","categoryid","organizationid","sellingprice","saccode","axios","post","then","response","arr","data","taxgroups","categories","onSubmit","updateService","datatemp","seviceId","services","getRow","fieldLabel","fieldName","reqflag","className","sm","size","classnames","for","render","field","invalid","message","getSelectRow","options","ref","inputRef","classNamePrefix","value","find","c","onChange","val","getOptionLabel","option","getOptionValue","md","type","color","outline","tag","Link","to","ServiceAdd","xl"],"mappings":"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","file":"static/js/66.6c7713e2.chunk.js","sourcesContent":["import Select from \"react-select\"\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { useDispatch } from \"react-redux\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { updateService, getService } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\nimport classnames from 'classnames'\n\n// ** Reactstrap Importsz\nimport { Row, Col, Card, Label, Button, CardBody, Input, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { useEffect, useState } from \"react\"\n\nconst EditCard = () => {\n\n  const { id } = useParams()\n\n  // ** States\n  const navigate = useNavigate({})\n  const dispatch = useDispatch()\n  const [categoryOptions, setCateoryOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [serviceDetails, setServiceDetails] = useState([])\n\n  const schema = yup.object().shape({\n    categoryId: yup.string().required(\"Please select a Category\"),\n    name: yup.string().required(\"Please Enter Service Name\"),\n    taxgroupid: yup.string().required(\"Please Select Tax Rate\"),\n    sellingPrice: yup.string().required(\"Please Enter Professional Fee\"),\n    sacCode: yup.string().required(\"Please Enter SAC Code\")\n  })\n\n\n  const { handleSubmit, control, reset, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: {\n      organizationId: 1,\n      categoryType: 1,\n      categoryId: '',\n      name: '',\n      sellingPrice: '',\n      sacCode: '',\n      taxgroupid: '',\n      description: ''\n    }\n  })\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n  const getCategories = () => {\n    axios.post('/categories/list').then(response => {\n      const arr = response.data\n      setCateoryOptions(arr.categories)\n    })\n  }\n\n  const getServiceData = async () => {\n    const service = await dispatch(getService(id))\n    setServiceDetails(service.payload)\n\n  }\n\n  useEffect(() => {\n\n    if (Object.keys(serviceDetails).length > 0) {\n      reset({\n        categoryId: serviceDetails.categoryid,\n        name: serviceDetails.name,\n        organizationId: serviceDetails.organizationid,\n        sellingPrice: serviceDetails.sellingprice,\n        sacCode: serviceDetails.saccode,\n        taxgroupid: serviceDetails.taxgroupid,\n        description: serviceDetails.description\n      })\n    }\n\n  }, [serviceDetails])\n\n  useEffect(() => {\n    getTaxGroups()\n    getCategories()\n\n    getServiceData()\n  }, [])\n\n  const onSubmit = async (data) => {\n    const datatemp = await dispatch(updateService({ data, id }))\n    const seviceId = datatemp.payload.services.id\n    navigate(`/service/view/${seviceId}`)\n  }\n\n\n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => field.onChange(val.id)}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardBody className='pb-0'>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Category', 'categoryId', categoryOptions, true)}\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Name', 'name', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('SAC Code', 'sacCode', true)}\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Professional Fee', 'sellingPrice', true)}\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Tax Rate', 'taxgroupid', taxGroupOptions, true)}\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label required' for='description'>\n                  Description\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='description'\n                    name='description'\n                    control={control}\n                    render={({ field }) => <Input type=\"textarea\" invalid={errors.description && true} {...field} />}\n                  />\n                  {errors.description && <FormFeedback>{errors.description.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </CardBody>\n        {/* /Header */}\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/service/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form>\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ServiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ServiceAdd\n"],"sourceRoot":""}