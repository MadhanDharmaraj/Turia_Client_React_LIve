{"version":3,"sources":["views/apps/service/add/AddCard.js","views/apps/service/add/index.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","AddCard","navigate","useNavigate","dispatch","useDispatch","useState","categoryOptions","setCateoryOptions","isTaxApplicable","setIsTaxApplicable","taxGroupOptions","setTaxGroupOptions","exemptionReasonOptions","setExemptionReasonOptions","schema","yup","shape","createdBy","default","categoryId","nullable","categoryType","name","required","organizationId","taxGroupId","sellingPrice","exemptionReasonId","sacCode","description","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","control","errors","formState","setValue","useEffect","axios","post","then","response","arr","data","taxgroups","categories","exemptionreasons","onSubmit","a","addService","datatemp","seviceId","payload","id","showExemption","val","nontaxableflag","getRow","fieldLabel","fieldName","reqflag","className","sm","size","classnames","for","render","field","invalid","message","getSelectRow","options","ref","inputRef","classNamePrefix","value","find","c","onChange","getOptionLabel","option","getOptionValue","md","type","color","outline","tag","Link","to","ServiceAdd","xl"],"mappings":"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","file":"static/js/70.e4378ae8.chunk.js","sourcesContent":["import Select from \"react-select\"\nimport { Link, useNavigate } from 'react-router-dom'\nimport { useDispatch } from \"react-redux\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { addService } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\nimport classnames from 'classnames'\n\n// ** Reactstrap Importsz\nimport { Row, Col, Card, Label, Button, CardBody, Input, FormFeedback, CardTitle, CardHeader } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { useEffect, useState } from \"react\"\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\n\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\nconst AddCard = () => {\n  // ** States\n  const navigate = useNavigate({})\n  const dispatch = useDispatch()\n  const [categoryOptions, setCateoryOptions] = useState([])\n  const [isTaxApplicable, setIsTaxApplicable] = useState(true)\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [exemptionReasonOptions, setExemptionReasonOptions] = useState([])\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    categoryId: yup.string().nullable(),\n    categoryType: yup.number().default(1),\n    name: yup.string().required(\"Please Enter Service Name\"),\n    organizationId: yup.number().default(activeOrgId),\n    taxGroupId: yup.string().nullable(),\n    sellingPrice: yup.string().nullable(),\n    isTaxApplicable: yup.boolean().default(false),\n    exemptionReasonId: yup.number().nullable(),\n    sacCode: yup.string().nullable(),\n    description: yup.string().nullable()\n  })\n\n  const { handleSubmit, control, formState: { errors }, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const getExemptionReason = () => {\n    axios.post('/exemptionreasons/dropdown').then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n  const getCategories = () => {\n    axios.post('/categories/list').then(response => {\n      const arr = response.data\n      setCateoryOptions(arr.categories)\n    })\n  }\n\n  useEffect(() => {\n    getTaxGroups()\n    getCategories()\n    getExemptionReason()\n\n  }, [])\n\n  const onSubmit = async (data) => {\n    const datatemp = await dispatch(addService(data))\n    const seviceId = datatemp.payload.id\n    navigate(`/service/view/${seviceId}`)\n  }\n\n  const showExemption = (val) => {\n    if (val.nontaxableflag) {\n      setIsTaxApplicable(false)\n      setValue('isTaxApplicable', false)\n    } else {\n      setIsTaxApplicable(true)\n      setValue('exemptionReasonId', null)\n      setValue('isTaxApplicable', true)\n    }\n  }\n\n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => { field.onChange(val.id); if (fieldName === 'taxGroupId') { showExemption(val) } }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardHeader>\n          <CardTitle> Add Service</CardTitle>\n        </CardHeader>\n        <CardBody className='pb-0'>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Service Name', 'name', true)}\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Category', 'categoryId', categoryOptions, false)}\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('SAC Code', 'sacCode', false)}\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Professional Fee', 'sellingPrice', false)}\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Tax Rate', 'taxGroupId', taxGroupOptions, false)}\n            </Col>\n          </Row>\n          {!isTaxApplicable &&\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('Exemption Reason', 'exemptionReasonId', exemptionReasonOptions, true)}\n              </Col>\n            </Row>\n          }\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='description'>\n                  Description\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='description'\n                    name='description'\n                    control={control}\n                    render={({ field }) => <Input type=\"textarea\" invalid={errors.description && true} {...field} />}\n                  />\n                  {errors.description && <FormFeedback>{errors.description.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </CardBody>\n        {/* /Header */}\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/service/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form>\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ServiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ServiceAdd\n"],"sourceRoot":""}