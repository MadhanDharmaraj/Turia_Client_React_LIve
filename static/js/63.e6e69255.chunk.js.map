{"version":3,"sources":["views/apps/client/add/AddCard.js","views/apps/client/add/index.js"],"names":["AddCard","phoneRegExp","navigate","useNavigate","dispatch","useDispatch","useState","businessEntityOptions","setBusinessEntityOptions","stateOptions","setStateOptions","countryOptions","setCountryOptions","currencyOptions","setCurrencyOptions","gstRegistrationTypeOptions","setGstRegistrationTypeOptions","clientInfo","setClientInfo","contactId","setConatctId","schema","yup","shape","clientType","uniqueIdentity","required","contactPersonName","name","when","is","then","contactNumber","matches","message","excludeEmptyString","email","businessEntity","gstRegistrationType","gstin","placeOfSupply","currency","billingAddressZip","contact_info","of","designation","min","useForm","resolver","yupResolver","defaultValues","organization","billingAddressLine1","billingAddressLine2","billingAddressCountry","billingAddressState","billingAddressCity","register","handleSubmit","control","errors","formState","useFieldArray","fields","append","onSubmit","data","a","temp","predata","addClient","datatemp","payload","client","id","addItem","organizationId","primaryStatus","removeItem","e","preventDefault","target","closest","remove","useEffect","axios","post","response","arr","businessentities","countries","currencies","gstregistrationtypes","states","clientId","length","forEach","obj","ind","rows","addContactInfo","saveContactInfo","className","md","sm","size","for","render","field","type","value","defaultChecked","invalid","ref","inputRef","classnames","classNamePrefix","options","find","c","onChange","val","getOptionLabel","option","getOptionValue","map","item","i","lg","onClick","color","title","outline","tag","Link","to","ClientAdd","xl"],"mappings":"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","file":"static/js/63.e6e69255.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport classnames from 'classnames'\nimport { useDispatch } from 'react-redux'\n// ** Custom Components\nimport { addClient, addContactInfo } from '../store'\nimport axios from '../../../../configs/axios/axiosConfig'\n\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst AddCard = () => {\n\n  // ** States\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const zipcodeExp = /^[0-9\\- ]{6,6}$/\n  const navigate = useNavigate({})\n\n  const dispatch = useDispatch()\n  const [businessEntityOptions, setBusinessEntityOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [gstRegistrationTypeOptions, setGstRegistrationTypeOptions] = useState([])\n  //const [setClientType] = useState(2)\n  const [clientInfo, setClientInfo] = useState([])\n  const [contactId, setConatctId] = useState(null)\n\n  const schema = yup.object().shape({\n    clientType: yup.number(),\n    uniqueIdentity: yup.string().required(\"Please Enter Unique Identity\"),\n    contactPersonName: yup.string().required(\"Please Enter a Contact Person Name\"),\n    name: yup.string().when(\"clientType\", { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Enter Business Name.\") }),\n    contactNumber: yup.string().required(\"Please Enter Conatct Number\").matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n    email: yup.string().email(\"Please Enter valid Email\").required(\"Please Enter valid Email\"),\n    businessEntity: yup.string().when(\"clientType\", { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Select Business Enity.\") }),\n    gstRegistrationType: yup.string().required(\"Please select a GST Type\"),\n    gstin: yup.string().required(\"Please Enter GSTIN No\"),\n    placeOfSupply: yup.string().required(\"Please select Place Of Supply\"),\n    currency: yup.string(),\n    billingAddressZip: yup.string().matches(zipcodeExp, { message: 'Zip Code is not valid', excludeEmptyString: true }),\n    contact_info: yup.array().of(\n      yup.object().shape({\n        name: yup.string().required(\"Please Enter A Name\"),\n        email: yup.string().email().required(\"Please Enter valid Email\"),\n        designation: yup.string().required(\"Please Enter Designation\"),\n        contactNumber: yup.string().required(\"Please Enter Conatct Number\").matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true })\n      })\n    ).min(1, \"Please Enter atleast one contact Info\")\n\n  })\n\n  const { register, handleSubmit, control, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: {\n      clientType: 1,\n      uniqueIdentity: '',\n      contactPersonName: '',\n      organization: 1,\n      name: '',\n      contactNumber: '',\n      businessEntity: '',\n      email: '',\n      gstRegistrationType: '',\n      gstin: '',\n      placeOfSupply: '',\n      currency: '',\n      contact_info: [],\n      billingAddressLine1: '',\n      billingAddressLine2: '',\n      billingAddressCountry: '',\n      billingAddressState: '',\n      billingAddressZip: '',\n      billingAddressCity: ''\n    }\n  })\n\n  const { fields, append } = useFieldArray({ name: 'contact_info', control })\n\n  const saveContactInfo = (clientId) => {\n    if (clientInfo.length > 0) {\n      clientInfo.forEach((obj, ind) => {\n        clientInfo[ind].contactId = clientId\n      })\n      const rows = clientInfo\n      dispatch(addContactInfo({ rows }))\n      navigate(`/client/view/${clientId}`)\n    }\n  }\n\n  const onSubmit = async (data) => {\n\n    const temp = data.contact_info\n    setClientInfo(predata => ([...predata, ...temp]))\n    delete data.contact_info\n    const datatemp = await dispatch(addClient(data))\n    setConatctId(datatemp.payload.client.id)\n\n  }\n\n  const addItem = (() => {\n    append({ organizationId : 1, contactId: 0, name: '', email: '', contactNumber: '', designation: '', primaryStatus: '' })\n  })\n\n  const removeItem = e => {\n    e.preventDefault()\n    e.target.closest('.repeater-wrapper').remove()\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityOptions(arr.businessentities)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/list').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getCurrency = () => {\n    axios.post('/currencies/list').then(response => {\n      const arr = response.data\n      setCurrencyOptions(arr.currencies)\n    })\n  }\n\n  const getGSTRegType = () => {\n    axios.post('/gstregistrationtypes/list').then(response => {\n      const arr = response.data\n      setGstRegistrationTypeOptions(arr.gstregistrationtypes)\n    })\n  }\n\n  useEffect(() => {\n    getBusineessEntity()\n    getCountries()\n    getCurrency()\n    getGSTRegType()\n    getStates()\n\n    addItem()\n    if (contactId !== null) {\n      saveContactInfo(contactId)\n    }\n\n  }, [clientInfo, contactId])\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardBody className='pb-0'>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='contactPersonName'>\n                  Client Type\n                </Label>\n                <Col sm='9'>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      control={control}\n                      render={({ field }) => <Input type='radio' id='clientType_1' name='clientType'  value={2} {...field} />}\n                    />\n                    <Label className='form-check-label' for='clientType_1'>\n                      Business\n                    </Label>\n                  </div>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      control={control}\n                      render={({ field }) => <Input id='clientType_2' type='radio' name='clientType' defaultChecked value={1} {...field} />}\n                    />\n                    <Label className='form-check-label' for='clientType_2'>\n                      Individual\n                    </Label>\n                  </div>\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='uniqueIdentity'>\n                  Unique No\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='uniqueIdentity'\n                    name='uniqueIdentity'\n                    control={control}\n                    render={({ field }) => <Input invalid={errors.uniqueIdentity && true} {...field} />}\n                  />\n                  {errors.uniqueIdentity && <FormFeedback>{errors.uniqueIdentity.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='contactPersonName'>\n                  Conatct Person Name\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='contactPersonName'\n                    name='contactPersonName'\n                    control={control}\n                    render={({ field }) => <Input invalid={errors.contactPersonName && true} {...field} />}\n                  />\n                  {errors.contactPersonName && <FormFeedback>{errors.contactPersonName.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='name'>\n                  Business Name\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    id='name'\n                    name='name'\n                    render={({ field }) => (\n                      <Input type='text' invalid={errors.name && true} {...field} />\n                    )}\n                  />\n                  {errors.name && <FormFeedback>{errors.name.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='contactNumber'>\n                  Mobile Number\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='contactNumber'\n                    name='contactNumber'\n                    control={control}\n                    render={({ field }) => <Input invalid={errors.contactNumber && true} {...field} />}\n                  />\n                  {errors.contactNumber && <FormFeedback>{errors.contactNumber.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='email'>\n                  Email ID\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    id='email'\n                    name='email'\n                    render={({ field }) => (\n                      <Input type='email' invalid={errors.email && true} {...field} />\n                    )}\n                  />\n                  {errors.email && <FormFeedback>{errors.email.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n\n\n            <Row>\n              <Col md='6' className='mb-1'>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='businessEntity'>\n                    Business Entity\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"businessEntity\"\n                      id=\"businessEntity\"\n                      render={({ field, value, ref }) => (\n                        <Select\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.businessEntity })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={businessEntityOptions}\n                          value={businessEntityOptions.find(c => { return c.id === value })}\n                          onChange={val => field.onChange(val.id)}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n\n                    />\n                    {errors.businessEntity && <FormFeedback className='text-danger'>{errors.businessEntity?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          \n        </CardBody>\n        {/* /Header */}\n\n        <hr className='invoice-spacing' />\n        {errors.contact_info && <p className='text-danger ms-2'>{errors.contact_info?.message}</p>}\n        {/* Product Details */}\n        <CardBody className='invoice-padding invoice-product-details'>\n          {fields.map((item, i) => (\n\n            <div key={i} className='repeater-wrapper'>\n              <Row >\n                <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                  <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                    <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-50 mb-0'>First Name</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_firstName'\n                        name={`contact_info.${i}.name`}\n                        render={({ field }) => (\n                          <Input type='text' {...register(`contact_info.${i}.name`)} invalid={errors.contact_info?.[i]?.name && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.name && <FormFeedback>{errors.contact_info?.[i]?.name.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-2 mb-0'>Email</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_email'\n                        name={`contact_info.${i}.email`}\n                        render={({ field }) => (\n                          <Input type='email' {...register(`contact_info.${i}.email`)} invalid={errors.contact_info?.[i]?.email && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.email && <FormFeedback>{errors.contact_info?.[i]?.email.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-2 mb-0'>Mobile</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_contactNumber'\n                        name={`contact_info.${i}.contactNumber`}\n                        render={({ field }) => (\n                          <Input type='number'  {...register(`contact_info.${i}.contactNumber`)} invalid={errors.contact_info?.[i]?.contactNumber && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.contactNumber && <FormFeedback>{errors.contact_info?.[i]?.contactNumber.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Designation</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_designation'\n                        name={`contact_info.${i}.designation`}\n                        render={({ field }) => (\n                          <Input type='text' invalid={errors.contact_info?.[i]?.designation && true} {...register(`contact_info.${i}.designation`)} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.designation && <FormFeedback>{errors.contact_info?.[i]?.designation.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Primary</CardText>\n                      <div className='form-switch form-check-primary'>\n                        <Controller\n                          control={control}\n                          id='contact_info_primaryStatus'\n                          name={`contact_info.${i}.primaryStatus`}\n                          render={({ field }) => (\n                            <Input type='switch' {...register(`contact_info.${i}.primaryStatus`)} {...field} />\n                          )}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                  <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                    <X size={18} className='cursor-pointer' onClick={removeItem} />\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          ))}\n\n          <Row className='mt-1'>\n            <Col sm='12' className='px-0'>\n              <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n              </Button>\n            </Col>\n          </Row>\n\n        </CardBody>\n\n        <hr className='invoice-spacing' />\n        {/* Product Details */}\n        <CardBody>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='gstRegistrationType'>\n                  GST Type\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"gstRegistrationType\"\n                    id=\"gstRegistrationType\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.gstRegistrationType })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={gstRegistrationTypeOptions}\n                        value={gstRegistrationTypeOptions.find(c => { return c.id === value })}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.gstRegistrationType && <FormFeedback className='text-danger'>{errors.gstRegistrationType?.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='placeOfSupply'>\n                  Place of Supply\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"placeOfSupply\"\n                    id=\"placeOfSupply\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        name=\"placeOfSupply\"\n                        title=\"Country\"\n                        className={classnames('react-select', { 'is-invalid': errors.gstRegistrationType })}\n                        {...field}\n                        classNamePrefix='select'\n                        aria-label='name'\n                        value={stateOptions.find(c => c.id === value)}\n                        options={stateOptions}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        onChange={val => field.onChange(val.id)}\n                      />\n                    )}\n                  />\n                  {errors.placeOfSupply && <FormFeedback className='text-danger'>{errors.placeOfSupply?.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='gstin'>\n                  GSTIN\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='gstin'\n                    name='gstin'\n                    control={control}\n                    render={({ field }) => <Input invalid={errors.gstin && true} {...field} />}\n                  />\n                  {errors.gstin && <FormFeedback>{errors.gstin.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='currency'>\n                  Currency\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"currency\"\n                    id=\"currency\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        {...register(\"currency\")}\n                        inputRef={ref}\n                        className=\"react-select col-lg-12 col-sm-12\"\n                        classNamePrefix=\"addl-class\"\n                        options={currencyOptions}\n                        value={currencyOptions.find(c => c.id === value)}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                  {errors.currency && <FormFeedback>{errors.currency.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </CardBody>\n        {/* Invoice Total */}\n        <CardBody className=''>\n          <h4 className='text-primary'>Billing Address</h4>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='billingAddress_addressline1'>\n                  Address Line1\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='billingAddress_addressline1'\n                    name=\"billingAddressLine1\"\n                    control={control}\n                    render={({ field }) => <Input {...field} />}\n                  />\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='billingAddress_addressline2'>\n                  Address Line 2\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='billingAddress_addressline2'\n                    name=\"billingAddressLine2\"\n                    control={control}\n                    render={({ field }) => <Input {...field} />}\n                  />\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='billingAddress_city'>\n                  City\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='billingAddress_city'\n                    name=\"billingAddressCity\"\n                    control={control}\n                    render={({ field }) => <Input  {...field} />}\n                  />\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='billingAddressState'>\n                  State\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"billingAddressState\"\n                    id=\"billingAddressState\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select')}\n                        {...field}\n                        classNamePrefix='select'\n                        options={stateOptions}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        value={stateOptions.find(c => { return c.id === value })}\n                        onChange={val => field.onChange(val.id)}\n                      />\n                    )}\n                  />\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='billingAddressCountry'>\n                  Country\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"billingAddressCountry\"\n                    id=\"billingAddressCountry\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select')}\n                        {...field}\n                        classNamePrefix='select'\n                        options={countryOptions}\n                        value={countryOptions.find(c => { return c.id === value })}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='billingAddress_zipcode'>\n                  Zip Code\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='billingAddress_zipcode'\n                    name='billingAddressZip'\n                    control={control}\n                    render={({ field }) => <Input type='text' invalid={errors.billingAddressZip && true} {...field} />}\n                  />\n                  {errors.billingAddressZip && <FormFeedback>{errors.billingAddressZip.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/client/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form >\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ClientAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ClientAdd\n"],"sourceRoot":""}