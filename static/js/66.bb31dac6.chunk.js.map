{"version":3,"sources":["views/apps/client/add/AddCard.js","views/apps/client/add/index.js"],"names":["activeOrg","activeOrganization","userId","orgUserId","AddCard","phoneRegExp","navigate","useNavigate","dispatch","useDispatch","useState","businessEntityOptions","setBusinessEntityOptions","stateOptions","setStateOptions","countryOptions","setCountryOptions","currencyOptions","setCurrencyOptions","gstRegistrationTypeOptions","setGstRegistrationTypeOptions","clientInfo","setClientInfo","contactId","setConatctId","store","useSelector","state","client","schema","yup","shape","createdBy","default","organization","id","contactPersonName","required","name","contactNumber","matches","message","excludeEmptyString","email","businessEntity","gstRegistrationType","nullable","gstin","placeOfSupply","currency","billingAddressLine1","billingAddressLine2","billingAddressCity","billingAddressState","billingAddressCountry","billingAddressZip","contact_info","of","designation","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","control","errors","formState","setError","useFieldArray","fields","append","remove","useEffect","clientErrors","Object","keys","map","obj","type","onSubmit","data","a","temp","predata","addClient","undefined","datatemp","payload","addItem","primarytag","_formValues","length","organizationId","primaryStatus","getRow","fieldLabel","fieldName","reqflag","className","sm","size","classnames","for","render","field","invalid","getSelectRow","options","ref","inputRef","isDisabled","classNamePrefix","value","find","c","onChange","val","getOptionLabel","option","getOptionValue","axios","post","then","response","arr","businessentities","countries","currencies","gstregistrationtypes","states","clientId","forEach","ind","splice","rows","addContactInfo","saveContactInfo","md","item","i","lg","defaultChecked","onClick","color","outline","tag","Link","to","ClientAdd","xl"],"mappings":"4XAuBMA,EAAYC,cACZC,EAASC,cA2ZAC,EA1ZC,WAAO,IAAD,EAGdC,EAAc,oBAEdC,EAAWC,YAAY,IAEvBC,EAAWC,cACjB,EAA0DC,mBAAS,IAAnE,mBAAOC,EAAP,KAA8BC,EAA9B,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA4CJ,mBAAS,IAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAA8CN,mBAAS,IAAvD,mBAAOO,EAAP,KAAwBC,EAAxB,KACA,EAAoER,mBAAS,IAA7E,mBAAOS,EAAP,KAAmCC,EAAnC,KAEA,EAAoCV,mBAAS,IAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KACA,EAAkCZ,mBAAS,MAA3C,mBAAOa,EAAP,KAAkBC,GAAlB,KAGMC,GAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,UAEnCC,GAASC,MAAaC,MAAM,CAChCC,UAAWF,MAAaG,QAAQ9B,KAChC+B,aAAcJ,MAAaG,QAAQjC,EAAUmC,IAC7CC,kBAAmBN,MAAaO,SAAS,sCACzCC,KAAMR,MAAaO,SAAS,+BAA+BJ,QAAQ,IACnEM,cAAeT,MAAaO,SAAS,+BAA+BG,QAAQnC,EAAa,CAAEoC,QAAS,4BAA6BC,oBAAoB,IACrJC,MAAOb,MAAaa,MAAM,4BAA4BN,SAAS,4BAC/DO,eAAgBd,MAAaO,SAAS,iCACtCQ,oBAAqBf,MAAagB,WAClCC,MAAOjB,MAAagB,WACpBE,cAAelB,MAAagB,WAC5BG,SAAUnB,MAAaG,QAAQjC,EAAUiD,UACzCC,oBAAqBpB,MAAagB,WAClCK,oBAAqBrB,MAAagB,WAClCM,mBAAoBtB,MAAagB,WACjCO,oBAAqBvB,MAAagB,WAClCQ,sBAAuBxB,MAAagB,WACpCS,kBAAmBzB,MAAaU,QAjCf,kBAiCmC,CAAEC,QAAS,wBAAyBC,oBAAoB,IAC5Gc,aAAc1B,MAAY2B,GACxB3B,MAAaC,MAAM,CACjBC,UAAWF,MAAaG,QAAQ/B,GAChCoC,KAAMR,MAAagB,WACnBH,MAAOb,MAAaa,QAAQG,WAC5BY,YAAa5B,MAAagB,WAC1BP,cAAeT,MAAagB,WAAWN,QAAQnC,EAAa,CAAEoC,QAAS,4BAA6BC,oBAAoB,SAM9H,GAAmEiB,YAAQ,CACzEC,SAAUC,YAAYhC,IACtBiC,cAAejC,GAAOkC,SAFhBC,GAAR,GAAQA,aAAcC,GAAtB,GAAsBA,QAAsBC,GAA5C,GAA+BC,UAAaD,OAAUE,GAAtD,GAAsDA,SAKtD,GAAmCC,YAAc,CAAE/B,KAAM,eAAgB2B,aAAjEK,GAAR,GAAQA,OAAQC,GAAhB,GAAgBA,OAAQC,GAAxB,GAAwBA,OAkBxBC,qBAAU,WACmB,OAAvBhD,GAAMiD,cAERC,OAAOC,KAAKnD,GAAMiD,cAAcG,KAAI,SAACC,GACnCV,GAASU,EAAK,CAAEC,KAAM,SAAUtC,QAAShB,GAAMiD,aAAaI,GAAK,UAGpE,CAACrD,GAAMiD,eAEV,IAAMM,GAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DAETC,EAAOF,EAAKzB,aAClBlC,GAAc,SAAA8D,GAAO,4BAASA,GAAT,YAAqBD,cACnCF,EAAKzB,aAJG,SAKQhD,EAAS6E,YAAUJ,IAL3B,eAMiBK,KAD1BC,EALS,QAMFC,QAAQ5D,OANN,2CAON,GAPM,QASbJ,GAAa+D,EAASC,QAAQ5D,OAAOO,IATxB,4CAAH,sDAcRsD,GAAW,WACf,IAAIC,GAAa,EACbzB,GAAQ0B,YAAYnC,aAAaoC,OAAS,IAC5CF,GAAa,GAEfnB,GAAO,CAAEvC,UAAW9B,EAAQ2F,eAAgB7F,EAAUmC,GAAIZ,UAAW,EAAGe,KAAM,GAAIK,MAAO,GAAIJ,cAAe,GAAImB,YAAa,GAAIoC,cAAeJ,KA0C5IK,GAAS,SAACC,EAAYC,GAAgC,IAArBC,EAAoB,wDACzD,OACE,eAAC,KAAD,CAAKC,UAAU,OAAf,UACE,cAAC,IAAD,CAAOC,GAAG,IAAIC,KAAK,KAAKF,UAAWG,IAAW,cAAD,OAAeJ,EAAU,WAAa,KAAOK,IAAKN,EAA/F,SACGD,IAEH,eAAC,IAAD,CAAKI,GAAG,IAAR,UACE,cAAC,IAAD,CACEjE,GAAI8D,EACJ3D,KAAM2D,EACNhC,QAASA,GACTuC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OAAe,cAAC,IAAD,aAAOC,QAASxC,GAAO+B,KAAc,GAAUQ,OAEvEvC,GAAO+B,IAAc,cAAC,IAAD,UAAe/B,GAAO+B,GAAWxD,iBAMzDkE,GAAe,SAACX,EAAYC,EAAWW,GAA8B,IAAD,EAApBV,EAAoB,wDACxE,OAEE,eAAC,KAAD,CAAKC,UAAU,OAAf,UACE,cAAC,IAAD,CAAOC,GAAG,IAAIC,KAAK,KAAKF,UAAWG,IAAW,cAAD,OAAeJ,EAAU,WAAa,KAAOK,IAAKN,EAA/F,SACGD,IAEH,eAAC,IAAD,CAAKI,GAAG,IAAR,UACE,cAAC,IAAD,CACEnC,QAASA,GACT3B,KAAM2D,EACN9D,GAAI8D,EACJO,OAAQ,gBAAGC,EAAH,EAAGA,MAAOI,EAAV,EAAUA,IAAV,OACN,cAAC,IAAD,yBACEC,SAAUD,EACVV,UAAWG,IAAW,eAAgB,CAAE,aAAcpC,GAAO+B,MACzDQ,GAHN,IAIEM,WAA0B,aAAdd,EACZe,gBAAgB,SAChBJ,QAASA,EACTK,MAAOL,EAAQM,MAAK,SAAAC,GAAO,OAAOA,EAAEhF,KAAOsE,EAAMQ,SACjDG,SAAU,SAAAC,GAAS,OAAOZ,EAAMW,SAASC,EAAIlF,KAC7CmF,eAAgB,SAACC,GAAD,OAAYA,EAAOjF,MACnCkF,eAAgB,SAACD,GAAD,OAAYA,EAAOpF,UAKxC+B,GAAO+B,IAAc,cAAC,IAAD,CAAcE,UAAU,cAAxB,mBAAuCjC,GAAO+B,UAA9C,aAAuC,EAAmBxD,iBAwBxF,OAjBAgC,qBAAU,WACU,OAAdlD,IAzFJkG,IAAMC,KAAK,0BAA0BC,MAAK,SAAAC,GACxC,IAAMC,EAAMD,EAAS3C,KACrBrE,EAAyBiH,EAAIC,qBAK/BL,IAAMC,KAAK,mBAAmBC,MAAK,SAAAC,GACjC,IAAMC,EAAMD,EAAS3C,KACrBjE,EAAkB6G,EAAIE,cAYxBN,IAAMC,KAAK,oBAAoBC,MAAK,SAAAC,GAClC,IAAMC,EAAMD,EAAS3C,KACrB/D,EAAmB2G,EAAIG,eAKzBP,IAAMC,KAAK,8BAA8BC,MAAK,SAAAC,GAC5C,IAAMC,EAAMD,EAAS3C,KACrB7D,EAA8ByG,EAAII,yBAhBpCR,IAAMC,KAAK,gBAAgBC,MAAK,SAAAC,GAC9B,IAAMC,EAAMD,EAAS3C,KACrBnE,EAAgB+G,EAAIK,WAgFpBzC,MAGgB,OAAdlE,GAvJkB,SAAC4G,GACvB,GAAI9G,EAAWuE,OAAS,EAAG,CACzBvE,EAAW+G,SAAQ,SAACtD,EAAKuD,GACvBhH,EAAWgH,GAAK9G,UAAY4G,EACX,KAAbrD,EAAIxC,MAA6B,KAAdwC,EAAInC,OACzBtB,EAAWiH,OAAOD,EAAK,MAG3B,IAAME,EAAOlH,EACTkH,EAAK3C,OAAS,GAChBpF,EAASgI,YAAe,CAAED,UAE5BjI,EAAS,gBAAD,OAAiB6H,KA4IzBM,CAAgBlH,KAGjB,CAACF,EAAYE,IAId,uBAAMyD,SAAUhB,GAAagB,IAA7B,UACE,eAAC,IAAD,CAAMmB,UAAU,uBAAhB,UAEE,cAAC,IAAD,UACE,cAAC,IAAD,4BAEF,eAAC,IAAD,CAAUA,UAAU,OAApB,UAEE,eAAC,KAAD,WACE,cAAC,IAAD,CAAKuC,GAAG,IAAIvC,UAAU,OAAtB,SACGJ,GAAO,sBAAuB,qBAAqB,KAEtD,cAAC,IAAD,CAAK2C,GAAG,IAAIvC,UAAU,OAAtB,SACGJ,GAAO,gBAAiB,QAAQ,QAIrC,eAAC,KAAD,WACE,cAAC,IAAD,CAAK2C,GAAG,IAAIvC,UAAU,OAAtB,SACGJ,GAAO,gBAAiB,iBAAiB,KAE5C,cAAC,IAAD,CAAK2C,GAAG,IAAIvC,UAAU,OAAtB,SACGJ,GAAO,WAAY,SAAS,QAIjC,cAAC,KAAD,UACE,cAAC,IAAD,CAAK2C,GAAG,IAAIvC,UAAU,OAAtB,SACGQ,GAAa,kBAAmB,iBAAkBhG,GAAuB,UAOhF,oBAAIwF,UAAU,oBACbjC,GAAOV,cAAgB,mBAAG2C,UAAU,mBAAb,mBAAiCjC,GAAOV,oBAAxC,aAAiC,EAAqBf,UAE9E,eAAC,IAAD,CAAU0D,UAAU,0CAApB,UACG7B,GAAOO,KAAI,SAAC8D,EAAMC,GAAP,2CAEV,qBAAmBzC,UAAU,mBAA7B,SACE,cAAC,KAAD,UACE,eAAC,IAAD,CAAKA,UAAU,0DAA0DC,GAAG,KAA5E,UACE,eAAC,KAAD,CAAKD,UAAU,0BAAf,UACE,eAAC,IAAD,CAAKA,UAAU,+CAAf,UACE,cAAC,IAAD,CAAUA,UAAU,0BAApB,wBACA,cAAC,IAAD,CACElC,QAASA,GACT9B,GAAG,yBACHG,KAAI,uBAAkBsG,EAAlB,UACJpC,OAAQ,oBAAGC,EAAH,EAAGA,MAAH,OACN,cAAC,IAAD,aAAO1B,KAAK,OAAOqC,SAAU,SAACC,GAAUZ,EAAMW,SAASC,IAAQX,SAAS,UAAAxC,GAAOV,oBAAP,mBAAsBoF,UAAtB,eAA0BtG,QAAQ,GAAUmE,QAGvH,UAAAvC,GAAOV,oBAAP,mBAAsBoF,UAAtB,eAA0BtG,OAAQ,cAAC,IAAD,oBAAe4B,GAAOV,oBAAtB,iBAAe,EAAsBoF,UAArC,aAAe,EAA0BtG,KAAKG,aAEnF,eAAC,IAAD,CAAK0D,UAAU,kCAAf,UACE,cAAC,IAAD,CAAUA,UAAU,0BAApB,mBACA,cAAC,IAAD,CACElC,QAASA,GACT9B,GAAG,qBACHG,KAAI,uBAAkBsG,EAAlB,WACJpC,OAAQ,oBAAGC,EAAH,EAAGA,MAAH,OACN,cAAC,IAAD,aAAO1B,KAAK,QAAQqC,SAAU,SAACC,GAAUZ,EAAMW,SAASC,IAAQX,SAAS,UAAAxC,GAAOV,oBAAP,mBAAsBoF,UAAtB,eAA0BjG,SAAS,GAAU8D,QAGzH,UAAAvC,GAAOV,oBAAP,mBAAsBoF,UAAtB,eAA0BjG,QAAS,cAAC,IAAD,oBAAeuB,GAAOV,oBAAtB,iBAAe,EAAsBoF,UAArC,aAAe,EAA0BjG,MAAMF,aAErF,eAAC,IAAD,CAAK0D,UAAU,eAAe0C,GAAG,IAAIzC,GAAG,KAAxC,UACE,cAAC,IAAD,CAAUD,UAAU,yBAApB,oBACA,cAAC,IAAD,CACElC,QAASA,GACT9B,GAAG,6BACHG,KAAI,uBAAkBsG,EAAlB,mBACJpC,OAAQ,oBAAGC,EAAH,EAAGA,MAAH,OACN,cAAC,IAAD,aAAO1B,KAAK,SAASqC,SAAU,SAACC,GAAUZ,EAAMW,SAASC,IAAQX,SAAS,UAAAxC,GAAOV,oBAAP,mBAAsBoF,UAAtB,eAA0BrG,iBAAiB,GAAUkE,QAGlI,UAAAvC,GAAOV,oBAAP,mBAAsBoF,UAAtB,eAA0BrG,gBAAiB,cAAC,IAAD,oBAAe2B,GAAOV,oBAAtB,iBAAe,EAAsBoF,UAArC,aAAe,EAA0BrG,cAAcE,aAErG,eAAC,IAAD,CAAK0D,UAAU,eAAe0C,GAAG,IAAIzC,GAAG,KAAxC,UACE,cAAC,IAAD,CAAUD,UAAU,0BAApB,yBACA,cAAC,IAAD,CACElC,QAASA,GACT9B,GAAG,2BACHG,KAAI,uBAAkBsG,EAAlB,iBACJpC,OAAQ,oBAAGC,EAAH,EAAGA,MAAH,OACN,cAAC,IAAD,aAAO1B,KAAK,kDAAkD2B,SAAS,UAAAxC,GAAOV,oBAAP,mBAAsBoF,UAAtB,eAA0BlF,eAAe,GAAU+C,QAG7H,UAAAvC,GAAOV,oBAAP,mBAAsBoF,UAAtB,eAA0BlF,cAAe,cAAC,IAAD,oBAAeQ,GAAOV,oBAAtB,iBAAe,EAAsBoF,UAArC,aAAe,EAA0BlF,YAAYjB,aAEjG,eAAC,IAAD,CAAK0D,UAAU,eAAe0C,GAAG,IAAIzC,GAAG,KAAxC,UACE,cAAC,IAAD,CAAUD,UAAU,0BAApB,qBACA,qBAAKA,UAAU,iCAAf,SACE,cAAC,IAAD,CACElC,QAASA,GACT9B,GAAG,6BACHG,KAAI,uBAAkBsG,EAAlB,mBACJpC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACN,cAAC,IAAD,yBAAO1B,KAAK,SAASqC,SAAU,SAACC,GAAUZ,EAAMW,SAASC,KAAYZ,GAArE,IAA4EqC,eAAgBrC,EAAMQ,oBAM5G,qBAAKd,UAAU,oFAAf,SACE,cAAC,IAAD,CAAGE,KAAM,GAAIF,UAAU,iBAAiB4C,QAAS,WA3NjEvE,GA2NoFoE,cAnElED,EAAKxG,OA0EjB,cAAC,KAAD,CAAKgE,UAAU,OAAf,SACE,cAAC,IAAD,CAAKC,GAAG,KAAKD,UAAU,OAAvB,SACE,eAAC,IAAD,CAAQ6C,MAAM,UAAU3C,KAAK,KAAKF,UAAU,cAAc4C,QAAS,kBAAMtD,MAAzE,UACE,cAAC,IAAD,CAAMY,KAAM,GAAIF,UAAU,UAD5B,IAC4C,sBAAMA,UAAU,eAAhB,gCAOlD,oBAAIA,UAAU,oBAEd,eAAC,IAAD,WAEE,eAAC,KAAD,WACE,cAAC,IAAD,CAAKuC,GAAG,IAAIvC,UAAU,OAAtB,SACGQ,GAAa,WAAY,sBAAuBxF,KAEnD,cAAC,IAAD,CAAKuH,GAAG,IAAIvC,UAAU,OAAtB,SACGQ,GAAa,kBAAmB,gBAAiB9F,QAItD,eAAC,KAAD,WACE,cAAC,IAAD,CAAK6H,GAAG,IAAIvC,UAAU,OAAtB,SACGJ,GAAO,QAAS,WAEnB,cAAC,IAAD,CAAK2C,GAAG,IAAIvC,UAAU,OAAtB,SACGQ,GAAa,WAAY,WAAY1F,GAAiB,WAK7D,eAAC,IAAD,CAAUkF,UAAU,GAApB,UACE,oBAAIA,UAAU,eAAd,6BACA,eAAC,KAAD,WACE,cAAC,IAAD,CAAKuC,GAAG,IAAIvC,UAAU,OAAtB,SACGJ,GAAO,gBAAiB,yBAE3B,cAAC,IAAD,CAAK2C,GAAG,IAAIvC,UAAU,OAAtB,SACGJ,GAAO,gBAAiB,4BAI7B,eAAC,KAAD,WACE,cAAC,IAAD,CAAK2C,GAAG,IAAIvC,UAAU,OAAtB,SACGJ,GAAO,OAAQ,wBAElB,cAAC,IAAD,CAAK2C,GAAG,IAAIvC,UAAU,OAAtB,SACGQ,GAAa,QAAS,sBAAuB9F,QAIlD,eAAC,KAAD,WACE,cAAC,IAAD,CAAK6H,GAAG,IAAIvC,UAAU,OAAtB,SACGQ,GAAa,UAAW,wBAAyB5F,KAEpD,cAAC,IAAD,CAAK2H,GAAG,IAAIvC,UAAU,OAAtB,SACGJ,GAAO,WAAY,gCAK5B,cAAC,IAAD,UACE,cAAC,IAAD,UACE,sBAAKI,UAAU,wBAAf,UACE,cAAC,IAAD,CAAQ6C,MAAM,UAAUC,SAAO,EAACC,IAAKC,IAAMC,GAAG,eAA9C,oBAGA,cAAC,IAAD,CAAQJ,MAAM,UAAUjE,KAAK,SAA7B,6BCnZGsE,UAZG,WAChB,OACE,qBAAKlD,UAAU,sBAAf,SACE,cAAC,KAAD,CAAKA,UAAU,cAAf,SACE,cAAC,IAAD,CAAKmD,GAAI,GAAIZ,GAAI,GAAItC,GAAI,GAAzB,SACE,cAAC,EAAD,Y","file":"static/js/66.bb31dac6.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport classnames from 'classnames'\nimport { useDispatch, useSelector } from 'react-redux'\n// ** Custom Components\nimport { addClient, addContactInfo } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { X, Plus } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { orgUserId, activeOrganization } from '@src/helper/sassHelper'\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback, CardTitle, CardHeader } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\nconst AddCard = () => {\n\n  // ** States\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const zipcodeExp = /^[0-9\\- ]{6,6}$/\n  const navigate = useNavigate({})\n\n  const dispatch = useDispatch()\n  const [businessEntityOptions, setBusinessEntityOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [gstRegistrationTypeOptions, setGstRegistrationTypeOptions] = useState([])\n  //const [setClientType] = useState(2)\n  const [clientInfo, setClientInfo] = useState([])\n  const [contactId, setConatctId] = useState(null)\n\n\n  const store = useSelector(state => state.client)\n\n  const schema = yup.object().shape({\n    createdBy: yup.number().default(orgUserId),\n    organization: yup.number().default(activeOrg.id),\n    contactPersonName: yup.string().required(\"Please Enter a Contact Person Name\"),\n    name: yup.string().required(\"Please Enter Business Name.\").default(''),\n    contactNumber: yup.string().required(\"Please Enter Conatct Number\").matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n    email: yup.string().email(\"Please Enter valid Email\").required(\"Please Enter valid Email\"),\n    businessEntity: yup.string().required(\"Please Select Business Enity.\"),\n    gstRegistrationType: yup.string().nullable(),\n    gstin: yup.string().nullable(),\n    placeOfSupply: yup.string().nullable(),\n    currency: yup.string().default(activeOrg.currency),\n    billingAddressLine1: yup.string().nullable(),\n    billingAddressLine2: yup.string().nullable(),\n    billingAddressCity: yup.string().nullable(),\n    billingAddressState: yup.number().nullable(),\n    billingAddressCountry: yup.number().nullable(),\n    billingAddressZip: yup.string().matches(zipcodeExp, { message: 'Zip Code is not valid', excludeEmptyString: true }),\n    contact_info: yup.array().of(\n      yup.object().shape({\n        createdBy: yup.string().default(userId),\n        name: yup.string().nullable(),\n        email: yup.string().email().nullable(),\n        designation: yup.string().nullable(),\n        contactNumber: yup.string().nullable().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true })\n      })\n    )\n\n  })\n\n  const { handleSubmit, control, formState: { errors }, setError } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ name: 'contact_info', control })\n\n  const saveContactInfo = (clientId) => {\n    if (clientInfo.length > 0) {\n      clientInfo.forEach((obj, ind) => {\n        clientInfo[ind].contactId = clientId\n        if (obj.name === '' && obj.email === '') {\n          clientInfo.splice(ind, 1)\n        }\n      })\n      const rows = clientInfo\n      if (rows.length > 0) {\n        dispatch(addContactInfo({ rows }))\n      }\n      navigate(`/client/view/${clientId}`)\n    }\n  }\n\n  useEffect(() => {\n    if (store.clientErrors !== null) {\n\n      Object.keys(store.clientErrors).map((obj) => {\n        setError(obj, { type: 'custom', message: store.clientErrors[obj][0] })\n      })\n    }\n  }, [store.clientErrors])\n\n  const onSubmit = async (data) => {\n\n    const temp = data.contact_info\n    setClientInfo(predata => ([...predata, ...temp]))\n    delete data.contact_info\n    const datatemp = await dispatch(addClient(data))\n    if (datatemp.payload.client === undefined) {\n      return false\n    } else {\n      setConatctId(datatemp.payload.client.id)\n    }\n\n  }\n\n  const addItem = (() => {\n    let primarytag = true\n    if (control._formValues.contact_info.length > 0) {\n      primarytag = false\n    }\n    append({ createdBy: userId, organizationId: activeOrg.id, contactId: 0, name: '', email: '', contactNumber: '', designation: '', primaryStatus: primarytag })\n  })\n\n  const removeItem = ind => {\n    remove(ind)\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityOptions(arr.businessentities)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/list').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getCurrency = () => {\n    axios.post('/currencies/list').then(response => {\n      const arr = response.data\n      setCurrencyOptions(arr.currencies)\n    })\n  }\n\n  const getGSTRegType = () => {\n    axios.post('/gstregistrationtypes/list').then(response => {\n      const arr = response.data\n      setGstRegistrationTypeOptions(arr.gstregistrationtypes)\n    })\n  }\n\n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='4' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='8'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='4' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName} >\n          {fieldLabel}\n        </Label>\n        <Col sm='8'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                isDisabled={fieldName === 'currency'}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => { return field.onChange(val.id) }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n  useEffect(() => {\n    if (contactId === null) {\n      getBusineessEntity()\n      getCountries()\n      getCurrency()\n      getGSTRegType()\n      getStates()\n\n      addItem()\n    }\n\n    if (contactId !== null) {\n      saveContactInfo(contactId)\n    }\n\n  }, [clientInfo, contactId])\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardHeader>\n          <CardTitle> Add Client</CardTitle>\n        </CardHeader>\n        <CardBody className='pb-0'>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Contact Person Name', 'contactPersonName', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Business Name', 'name', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Mobile Number', 'contactNumber', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Email ID', 'email', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Business Entity', 'businessEntity', businessEntityOptions, true)}\n            </Col>\n          </Row>\n\n        </CardBody>\n        {/* /Header */}\n\n        <hr className='invoice-spacing' />\n        {errors.contact_info && <p className='text-danger ms-2'>{errors.contact_info?.message}</p>}\n        {/* Product Details */}\n        <CardBody className='invoice-padding invoice-product-details'>\n          {fields.map((item, i) => (\n\n            <div key={item.id} className='repeater-wrapper'>\n              <Row >\n                <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                  <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                    <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-50 mb-0'>First Name</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_firstName'\n                        name={`contact_info[${i}].name`}\n                        render={({ field }) => (\n                          <Input type='text' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.name && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.name && <FormFeedback>{errors.contact_info?.[i]?.name.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-2 mb-0 '>Email</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_email'\n                        name={`contact_info[${i}].email`}\n                        render={({ field }) => (\n                          <Input type='email' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.email && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.email && <FormFeedback>{errors.contact_info?.[i]?.email.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-2 mb-0'>Mobile</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_contactNumber'\n                        name={`contact_info[${i}].contactNumber`}\n                        render={({ field }) => (\n                          <Input type='number' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.contactNumber && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.contactNumber && <FormFeedback>{errors.contact_info?.[i]?.contactNumber.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Designation</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_designation'\n                        name={`contact_info[${i}].designation`}\n                        render={({ field }) => (\n                          <Input type='text onChange={(val) => { field.onChange(val)}}' invalid={errors.contact_info?.[i]?.designation && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.designation && <FormFeedback>{errors.contact_info?.[i]?.designation.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Primary</CardText>\n                      <div className='form-switch form-check-primary'>\n                        <Controller\n                          control={control}\n                          id='contact_info_primaryStatus'\n                          name={`contact_info[${i}].primaryStatus`}\n                          render={({ field }) => (\n                            <Input type='switch' onChange={(val) => { field.onChange(val) }} {...field} defaultChecked={field.value} />\n                          )}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                  <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                    <X size={18} className='cursor-pointer' onClick={() => { removeItem(i) }} />\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          ))}\n\n          <Row className='mt-1'>\n            <Col sm='12' className='px-0'>\n              <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n              </Button>\n            </Col>\n          </Row>\n\n        </CardBody>\n\n        <hr className='invoice-spacing' />\n        {/* Product Details */}\n        <CardBody>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('GST Type', 'gstRegistrationType', gstRegistrationTypeOptions)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Place of Supply', 'placeOfSupply', stateOptions)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('GSTIN', 'gstin')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Currency', 'currency', currencyOptions, false)}\n            </Col>\n          </Row>\n        </CardBody>\n        {/* Invoice Total */}\n        <CardBody className=''>\n          <h4 className='text-primary'>Billing Address</h4>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line1', 'billingAddressLine1')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line2', 'billingAddressLine2')}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('City', 'billingAddressCity')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('State', 'billingAddressState', stateOptions)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Country', 'billingAddressCountry', countryOptions)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Zip Code', 'billingAddressZip')}\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/client/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form >\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ClientAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ClientAdd\n"],"sourceRoot":""}