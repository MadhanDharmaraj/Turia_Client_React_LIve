{"version":3,"sources":["views/apps/client/edit/EditCard.js","views/apps/client/edit/index.js"],"names":["activeOrg","activeOrganization","userId","orgUserId","EditCard","MySwal","withReactContent","Swal","phoneRegExp","navigate","useNavigate","store","useSelector","state","client","dispatch","useDispatch","useState","businessEntityOptions","setBusinessEntityOptions","stateOptions","setStateOptions","countryOptions","setCountryOptions","currencyOptions","setCurrencyOptions","gstRegistrationTypeOptions","setGstRegistrationTypeOptions","clientInfo","setClientInfo","contactId","setConatctId","clientDetails","setClientDetails","schema","yup","shape","updatedBy","default","contactPersonName","required","name","contactnumber","matches","message","excludeEmptyString","email","businessEntity","gstRegistrationType","gstin","placeOfSupply","currency","billingAddressLine1","nullable","billingAddressLine2","billingAddressCity","billingAddressState","billingAddressCountry","billingAddressZip","contact_info","of","createdBy","min","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","reset","control","errors","formState","id","useParams","useFieldArray","keyName","fields","append","remove","onSubmit","data","a","temp","updateClient","predata","deletefun","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","then","result","value","deleteContactInfo","dismiss","DismissReason","cancel","removeItem","ind","undefined","tempid","_formValues","flg","getClientInfo","getConatctInfo","getClientData","getClient","payload","useEffect","Object","keys","length","uniqueIdentity","uniqueidentity","contactpersonname","organization","organizationid","businessentityid","gstregistrationtypeid","placeofsupplyid","currencyid","billingaddressline1","billingaddressline2","billingaddresscountry","billingaddressstate","billingaddresszip","billingaddresscity","clientInformations","forEach","obj","rows","updateContactInfo","saveContactInfo","axios","post","response","arr","businessentities","countries","currencies","gstregistrationtypes","states","getRow","fieldLabel","fieldName","reqflag","className","sm","size","classnames","for","render","field","invalid","getSelectRow","options","ref","inputRef","classNamePrefix","isDisabled","find","c","onChange","val","getOptionLabel","option","getOptionValue","md","map","item","i","type","lg","designation","defaultChecked","onClick","rowid","color","contactid","primarystatus","outline","tag","Link","to","ClientEdit","xl"],"mappings":"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","file":"static/js/67.c467b536.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport classnames from 'classnames'\nimport { useDispatch, useSelector } from 'react-redux'\n// ** Custom Components\nimport { updateClient, updateContactInfo, getClient, getConatctInfo, deleteContactInfo } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\n\nimport { X, Plus } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { activeOrganization, orgUserId } from '@src/helper/sassHelper'\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback, CardTitle, CardHeader } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\nconst EditCard = () => {\n\n  // ** States\n  const MySwal = withReactContent(Swal)\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const zipcodeExp = /^[0-9\\- ]{6,6}$/\n  const navigate = useNavigate({})\n  const store = useSelector(state => state.client)\n  const dispatch = useDispatch()\n  const [businessEntityOptions, setBusinessEntityOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [gstRegistrationTypeOptions, setGstRegistrationTypeOptions] = useState([])\n  const [clientInfo, setClientInfo] = useState([])\n  const [contactId, setConatctId] = useState(null)\n  const [clientDetails, setClientDetails] = useState({})\n\n  const schema = yup.object().shape({\n    updatedBy: yup.string().default(userId),\n    contactPersonName: yup.string().required(\"Please Enter a Contact Person Name\"),\n    name: yup.string().required(\"Please Enter Business Name.\"),\n    contactnumber: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n    email: yup.string().email(\"Please Enter valid Email\").required(\"Please Enter valid Email\"),\n    businessEntity: yup.string().required(\"Please Select Business Enity.\"),\n    gstRegistrationType: yup.string().required(\"Please select a GST Type\"),\n    gstin: yup.string().required(\"Please Enter GSTIN No\"),\n    placeOfSupply: yup.string().required(\"Please select Place Of Supply\"),\n    currency: yup.string(),\n    billingAddressLine1: yup.string().nullable(),\n    billingAddressLine2: yup.string().nullable(),\n    billingAddressCity: yup.string().nullable(),\n    billingAddressState: yup.number().nullable(),\n    billingAddressCountry: yup.number().nullable(),\n    billingAddressZip: yup.string().matches(zipcodeExp, { message: 'Zip Code is not valid', excludeEmptyString: true }),\n    contact_info: yup.array().of(\n      yup.object().shape({\n        updatedBy: yup.string().default(userId),\n        createdBy: yup.string().default(userId),\n        name: yup.string().required(\"Please Enter A Name\"),\n        email: yup.string().email().required(\"Please Enter valid Email\"),\n        contactnumber: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true })\n      })\n    ).min(1, \"Please Enter atleast one contact Info\")\n\n  })\n\n  const { handleSubmit, reset, control, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n  const { id } = useParams()\n  const { fields, append, remove } = useFieldArray({ name: 'contact_info', control, keyName: 'rowid' })\n\n  const saveContactInfo = () => {\n\n    const data = { rows: clientInfo }\n    dispatch(updateContactInfo(data))\n    navigate(`/client/view/${contactId}`)\n\n  }\n\n  const onSubmit = async (data) => {\n\n    const temp = data.contact_info\n    delete data.contact_info\n    const id = clientDetails.id\n    await dispatch(updateClient({ data, id }))\n\n    setClientInfo(predata => ([...predata, ...temp]))\n\n  }\n\n  const deletefun = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteContactInfo(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Conatct has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  const addItem = (() => {\n    append({ id: '', name: '', email: '', contactnumber: '', contactid: id, organizationid: activeOrg.id, designation: '', primarystatus: false })\n  })\n\n  const removeItem = async (ind) => {\n    const tempid = control._formValues.contact_info[ind].id\n    let flg\n    if (tempid !== undefined) {\n      flg = await deletefun(tempid)\n    }\n    if (flg) {\n      remove(ind)\n    }\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityOptions(arr.businessentities)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/list').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getCurrency = () => {\n    axios.post('/currencies/list').then(response => {\n      const arr = response.data\n      setCurrencyOptions(arr.currencies)\n    })\n  }\n\n  const getGSTRegType = () => {\n    axios.post('/gstregistrationtypes/list').then(response => {\n      const arr = response.data\n      setGstRegistrationTypeOptions(arr.gstregistrationtypes)\n    })\n  }\n\n  const getClientInfo = async () => {\n    await dispatch(getConatctInfo(contactId))\n\n  }\n\n  const getClientData = async () => {\n    const client = await dispatch(getClient(id))\n    setClientDetails(client.payload)\n  }\n\n  useEffect(() => {\n\n    if (Object.keys(clientDetails).length > 0) {\n      reset({\n        uniqueIdentity: clientDetails.uniqueidentity,\n        contactPersonName: clientDetails.contactpersonname,\n        organization: clientDetails.organizationid,\n        name: clientDetails.name,\n        contactnumber: clientDetails.contactnumber,\n        businessEntity: clientDetails.businessentityid,\n        email: clientDetails.email,\n        gstRegistrationType: clientDetails.gstregistrationtypeid,\n        gstin: clientDetails.gstin,\n        placeOfSupply: clientDetails.placeofsupplyid,\n        currency: clientDetails.currencyid,\n        billingAddressLine1: clientDetails.billingaddressline1,\n        billingAddressLine2: clientDetails.billingaddressline2,\n        billingAddressCountry: clientDetails.billingaddresscountry,\n        billingAddressState: clientDetails.billingaddressstate,\n        billingAddressZip: clientDetails.billingaddresszip,\n        billingAddressCity: clientDetails.billingaddresscity\n      })\n\n      setConatctId(clientDetails.id)\n\n    }\n\n    if (contactId !== null) {\n      getClientInfo()\n    }\n\n  }, [contactId, clientDetails])\n\n  useEffect(() => {\n    store.clientInformations.forEach((obj) => {\n      append(obj)\n    })\n  }, [store.clientInformations])\n\n  useEffect(() => {\n    if (clientInfo.length) {\n      saveContactInfo()\n    }\n  }, [clientInfo])\n\n  useEffect(() => {\n    getBusineessEntity()\n    getCountries()\n    getCurrency()\n    getGSTRegType()\n    getStates()\n\n    getClientData()\n\n  }, [])\n\n\n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='4' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='8'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='4' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='8'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                isDisabled={fieldName === 'currency'}\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => field.onChange(val.id)}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardHeader>\n          <CardTitle> Edit Client</CardTitle>\n        </CardHeader>\n        <CardBody className='pb-0'>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Contact Person Name', 'contactPersonName', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Business Name', 'name', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Mobile Number', 'contactnumber', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Email ID', 'email', true)}\n            </Col>\n          </Row>\n\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Business Entity', 'businessEntity', businessEntityOptions, true)}\n            </Col>\n          </Row>\n\n        </CardBody>\n        {/* /Header */}\n\n        <hr className='invoice-spacing' />\n        {errors.contact_info && <p className='text-danger ms-2'>{errors.contact_info?.message}</p>}\n        {/* Product Details */}\n        <CardBody className='invoice-padding invoice-product-details'>\n          {fields.map((item, i) => (\n\n            <div key={item.rowid} className='repeater-wrapper'>\n              <Row >\n                <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                  <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                    <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-50 mb-0'>First Name</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_name'\n                        name={`contact_info[${i}].name`}\n                        render={({ field }) => (\n                          <Input type='text' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.name && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.name && <FormFeedback>{errors.contact_info?.[i]?.name.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-2 mb-0 '>Email</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_email'\n                        name={`contact_info[${i}].email`}\n                        render={({ field }) => (\n                          <Input type='email' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.email && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.email && <FormFeedback>{errors.contact_info?.[i]?.email.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-2 mb-0'>Mobile</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_contactnumber'\n                        name={`contact_info[${i}].contactnumber`}\n                        render={({ field }) => (\n                          <Input type='number' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.contactnumber && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.contactnumber && <FormFeedback>{errors.contact_info?.[i]?.contactnumber.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Designation</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_designation'\n                        name={`contact_info[${i}].designation`}\n                        render={({ field }) => (\n                          <Input type='text' invalid={errors.contact_info?.[i]?.designation && true} onChange={(val) => { field.onChange(val) }}  {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.designation && <FormFeedback>{errors.contact_info?.[i]?.designation.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Primary</CardText>\n                      <div className='form-switch form-check-primary'>\n                        <Controller\n                          control={control}\n                          id='contact_info_primarystatus'\n                          name={`contact_info[${i}].primarystatus`}\n                          render={({ field }) => (\n                            <Input type='switch' onChange={(val) => { field.onChange(val) }} {...field} defaultChecked={field.value} />\n                          )}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                  <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                    <X size={18} className='cursor-pointer' onClick={() => removeItem(i)} />\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          ))}\n\n          <Row className='mt-1'>\n            <Col sm='12' className='px-0'>\n              <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n              </Button>\n            </Col>\n          </Row>\n\n        </CardBody>\n\n        <hr className='invoice-spacing' />\n        {/* Product Details */}\n        <CardBody>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('GST Type', 'gstRegistrationType', gstRegistrationTypeOptions)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Place of Supply', 'placeOfSupply', stateOptions)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('GSTIN', 'gstin')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Currency', 'currency', currencyOptions)}\n            </Col>\n          </Row>\n        </CardBody>\n        {/* Invoice Total */}\n        <CardBody className=''>\n          <h4 className='text-primary'>Billing Address</h4>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line1', 'billingAddressLine1')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line2', 'billingAddressLine2')}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('City', 'billingAddressCity')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('State', 'billingAddressState', stateOptions)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Country', 'billingAddressCountry', countryOptions)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Zip Code', 'billingAddressZip')}\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/client/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form >\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ClientEdit = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ClientEdit\n"],"sourceRoot":""}