{"version":3,"sources":["views/apps/service/edit/EditCard.js","views/apps/service/edit/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","EditCard","id","useParams","useState","block","setBlock","Loader","navigate","useNavigate","dispatch","useDispatch","categoryOptions","setCateoryOptions","taxGroupOptions","setTaxGroupOptions","serviceDetails","setServiceDetails","exemptionReasonOptions","setExemptionReasonOptions","isTaxApplicable","setIsTaxApplicable","schema","yup","shape","updatedBy","default","categoryId","nullable","categoryType","name","required","organizationId","taxGroupId","sellingPrice","exemptionReasonId","sacCode","description","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","control","reset","errors","formState","setValue","getServiceData","getService","service","payload","showExemption","val","nontaxableflag","useEffect","Object","keys","length","categoryid","organizationid","sellingprice","saccode","taxgroupid","istaxapplicable","exemptionreasonid","axios","post","then","response","arr","data","taxgroups","categories","exemptionreasons","undefined","onSubmit","isdefault","res","catch","err","console","log","updateService","getRow","fieldLabel","fieldName","reqflag","className","sm","size","classnames","for","render","field","invalid","message","getSelectRow","options","ref","inputRef","classNamePrefix","value","find","c","onChange","getOptionLabel","option","getOptionValue","blocking","loader","ErrorText","Array","isArray","forEach","key","push","renderError","md","type","color","outline","tag","Link","to","ServiceAdd","xl","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"0WAsBMA,EAAcC,cACdC,EAASC,cAsRAC,EApRE,WAEf,IAAQC,EAAOC,cAAPD,GAER,EAA0BE,oBAAS,GAAM,mBAAlCC,EAAK,KAAEC,EAAQ,KAChBC,EAAS,WACb,OACE,cAAC,WAAQ,UACP,cAAC,IAAO,KAGd,EAIMC,EAAWC,YAAY,CAAC,GACxBC,EAAWC,cACjB,EAA6CP,mBAAS,IAAG,mBAAlDQ,EAAe,KAAEC,EAAiB,KACzC,EAA8CT,mBAAS,IAAG,mBAAnDU,EAAe,KAAEC,EAAkB,KAC1C,EAA4CX,mBAAS,IAAG,mBAAjDY,EAAc,KAAEC,EAAiB,KACxC,EAA4Db,mBAAS,IAAG,mBAAjEc,EAAsB,KAAEC,EAAyB,KACxD,EAA8Cf,oBAAS,GAAK,mBAArDgB,EAAe,KAAEC,EAAkB,KAEpCC,EAASC,MAAaC,MAAM,CAChCC,UAAWF,MAAaG,QAAQ3B,GAChCG,GAAIqB,MAAaG,QAAQxB,GACzByB,WAAYJ,MAAaK,WACzBC,aAAcN,MAAaG,QAAQ,GACnCI,KAAMP,MAAaQ,SAAS,6BAC5BC,eAAgBT,MAAaG,QAAQ7B,GACrCoC,WAAYV,MAAaK,WACzBM,aAAcX,MAAaK,WAC3BR,gBAAiBG,MAAcG,SAAQ,GACvCS,kBAAmBZ,MAAaK,WAChCQ,QAASb,MAAaK,WACtBS,YAAad,MAAaK,aAI5B,EAA0EU,YAAQ,CAChFC,SAAUC,YAAYlB,GACtBmB,cAAenB,EAAOoB,SAFhBC,EAAY,EAAZA,aAAcC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAoBC,GAAM,EAAnBC,UAAaD,OAAUE,GAAQ,EAARA,SA0BvDC,GAAc,iDAAG,8GACCvC,EAASwC,YAAWhD,IAAI,OAAxCiD,EAAO,OACblC,EAAkBkC,EAAQC,SAAQ,2CACnC,kBAHmB,mCAKdC,GAAgB,SAACC,GACjBA,EAAIC,gBACNlC,GAAmB,GACnB2B,GAAS,mBAAmB,KAE5B3B,GAAmB,GACnB2B,GAAS,mBAAmB,GAC5BA,GAAS,oBAAqB,MAElC,EAEAQ,qBAAU,WAEJC,OAAOC,KAAK1C,GAAgB2C,OAAS,IACvCd,EAAM,CACJlB,WAAYX,EAAe4C,WAC3B9B,KAAMd,EAAec,KACrBE,eAAgBhB,EAAe6C,eAC/B3B,aAAclB,EAAe8C,aAC7B1B,QAASpB,EAAe+C,QACxB9B,WAAYjB,EAAegD,WAC3B3B,YAAarB,EAAeqB,YAC5BjB,gBAAiBJ,EAAeiD,kBAAmB,EACnD9B,kBAAmBnB,EAAekD,oBAGpC7C,EAAmBL,EAAeiD,iBAGtC,GAAG,CAACjD,IAEJwC,qBAAU,WAjDRW,IAAMC,KAAK,uBAAuBC,MAAK,SAAAC,GACrC,IAAMC,EAAMD,EAASE,KACrBzD,EAAmBwD,EAAIE,UACzB,IAIAN,IAAMC,KAAK,wBAAwBC,MAAK,SAAAC,GACtC,IAAMC,EAAMD,EAASE,KACrB3D,EAAkB0D,EAAIG,WACxB,IAjBAP,IAAMC,KAAK,8BAA8BC,MAAK,SAAAC,GAC5C,IAAMC,EAAMD,EAASE,KACrBrD,EAA0BoD,EAAII,iBAChC,SA0DWC,IAAP1E,GACF+C,IAEJ,GAAG,IAEH,IAAM4B,GAAQ,iDAAG,WAAOL,GAAI,iFACZ,GAAdlE,GAAS,IAELU,EAAe8D,WAA+C,OAAlC9D,EAAe6C,eAAuB,gBACpEM,IAAMC,KAAK,kBAAmBI,GAC3BH,MAAK,SAACU,GACL7E,EAAK6E,EAAIP,KAAKrB,QAAQjD,EACxB,IACC8E,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,IAAE,sCAEEvE,EAAS0E,YAAcZ,IAAM,OAErChE,EAAS,kBAAD,OAAmBN,IAAK,2CAEjC,gBAhBa,sCAmBRmF,GAAS,SAACC,EAAYC,GAAgC,IAArBC,EAAO,wDAC5C,OACE,eAAC,KAAG,CAACC,UAAU,OAAM,UACnB,cAAC,IAAK,CAACC,GAAG,IAAIC,KAAK,KAAKF,UAAWG,IAAW,cAAD,OAAeJ,EAAU,WAAa,KAAOK,IAAKN,EAAU,SACtGD,IAEH,eAAC,IAAG,CAACI,GAAG,IAAG,UACT,cAAC,IAAU,CACTxF,GAAIqF,EACJzD,KAAMyD,EACN3C,QAASA,EACTkD,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OAAO,cAAC,IAAK,aAACC,QAASlD,GAAOyC,KAAc,GAAUQ,GAAS,IAEhFjD,GAAOyC,IAAc,cAAC,IAAY,UAAEzC,GAAOyC,GAAWU,eAI/D,EAEMC,GAAe,SAACZ,EAAYC,EAAWY,GAA8B,IAAD,EAApBX,EAAO,wDAC3D,OAEE,eAAC,KAAG,CAACC,UAAU,OAAM,UACnB,cAAC,IAAK,CAACC,GAAG,IAAIC,KAAK,KAAKF,UAAWG,IAAW,cAAD,OAAeJ,EAAU,WAAa,KAAOK,IAAKN,EAAU,SACtGD,IAEH,eAAC,IAAG,CAACI,GAAG,IAAG,UACT,cAAC,IAAU,CACT9C,QAASA,EACTd,KAAMyD,EACNrF,GAAIqF,EACJO,OAAQ,gBAAGC,EAAK,EAALA,MAAOK,EAAG,EAAHA,IAAG,OACnB,cAAC,IAAM,yBACLC,SAAUD,EACVX,UAAWG,IAAW,eAAgB,CAAE,aAAc9C,GAAOyC,MACzDQ,GAAK,IACTO,gBAAgB,SAChBH,QAASA,EACTI,MAAOJ,EAAQK,MAAK,SAAAC,GAAO,OAAOA,EAAEvG,KAAO6F,EAAMQ,KAAM,IACvDG,SAAU,SAAApD,GAASyC,EAAMW,SAASpD,EAAIpD,IAAuB,eAAdqF,GAA8BlC,GAAcC,EAAO,EAClGqD,eAAgB,SAACC,GAAM,OAAKA,EAAO9E,IAAI,EACvC+E,eAAgB,SAACD,GAAM,OAAKA,EAAO1G,EAAE,IACrC,IAIL4C,GAAOyC,IAAc,cAAC,IAAY,CAACE,UAAU,cAAa,SAAmB,QAAnB,EAAE3C,GAAOyC,UAAU,aAAjB,EAAmBU,eAKxF,EAeA,OACE,cAAC,IAAQ,CAACa,SAAUzG,EAAO0G,OAAQ,cAACxG,EAAM,IAAI,SAC5C,uBAAMsE,SAAUlC,EAAakC,IAAU,UACrC,eAAC,IAAI,CAACY,UAAU,uBAAsB,UAEpC,eAAC,IAAU,WACT,cAAC,IAAS,UAAC,iBAnBD,WAClB,IAAM/B,EAAOD,OAAOC,KAAKZ,IACnBkE,EAAY,GAQlB,OAPIC,MAAMC,QAAQxD,IAChBA,EAAKyD,SAAQ,SAACC,GAAS,IAAD,EAEpBJ,EAAUK,KAAK,eAAC,IAAY,WAAW,IAAa,QAAZ,EAACvE,GAAOsE,UAAI,aAAX,EAAanB,UAApBmB,GAEpC,IAEKJ,CACT,CASWM,MAEH,eAAC,IAAQ,CAAC7B,UAAU,OAAM,UACxB,cAAC,KAAG,UACF,cAAC,IAAG,CAAC8B,GAAG,IAAI9B,UAAU,OAAM,SACzBJ,GAAO,eAAgB,QAAQ,OAGpC,cAAC,KAAG,UACF,cAAC,IAAG,CAACkC,GAAG,IAAI9B,UAAU,OAAM,SACzBS,GAAa,WAAY,aAActF,GAAiB,OAG7D,cAAC,KAAG,UACF,cAAC,IAAG,CAAC2G,GAAG,IAAI9B,UAAU,OAAM,SACzBJ,GAAO,WAAY,WAAW,OAGnC,cAAC,KAAG,UACF,cAAC,IAAG,CAACkC,GAAG,IAAI9B,UAAU,OAAM,SACzBJ,GAAO,mBAAoB,gBAAgB,OAGhD,cAAC,KAAG,UACF,cAAC,IAAG,CAACkC,GAAG,IAAI9B,UAAU,OAAM,SACzBS,GAAa,WAAY,aAAcpF,GAAiB,QAG3DM,GACA,cAAC,KAAG,UACF,cAAC,IAAG,CAACmG,GAAG,IAAI9B,UAAU,OAAM,SACzBS,GAAa,mBAAoB,oBAAqBhF,GAAwB,OAIrF,cAAC,KAAG,UACF,cAAC,IAAG,CAACqG,GAAG,IAAI9B,UAAU,OAAM,SAC1B,eAAC,KAAG,CAACA,UAAU,OAAM,UACnB,cAAC,IAAK,CAACC,GAAG,IAAIC,KAAK,KAAKF,UAAU,aAAaI,IAAI,cAAa,SAAC,gBAGjE,eAAC,IAAG,CAACH,GAAG,IAAG,UACT,cAAC,IAAU,CACTxF,GAAG,cACH4B,KAAK,cACLc,QAASA,EACTkD,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OAAO,cAAC,IAAK,aAACyB,KAAK,WAAWxB,QAASlD,GAAOT,cAAe,GAAU0D,GAAS,IAEjGjD,GAAOT,aAAe,cAAC,IAAY,UAAES,GAAOT,YAAY4D,0BAQrE,cAAC,IAAI,UACH,cAAC,IAAQ,UACP,sBAAKR,UAAU,wBAAuB,UACpC,cAAC,IAAM,CAACgC,MAAM,UAAUC,SAAO,EAACC,IAAKC,IAAMC,GAAE,yBAAoB3H,GAAK,SAAC,WAGvE,cAAC,IAAM,CAACuH,MAAM,UAAUD,KAAK,SAAQ,SAAE,oBASrD,ECrReM,UAZI,WACjB,OACE,qBAAKrC,UAAU,sBAAf,SACE,cAAC,KAAD,CAAKA,UAAU,cAAf,SACE,cAAC,IAAD,CAAKsC,GAAI,GAAIR,GAAI,GAAI7B,GAAI,GAAzB,SACE,cAAC,EAAD,SAKT,C,uGCPKsC,EAAW,SAAAC,GAAU,IAAD,EAChBC,EAA6DD,EAA7DC,SAAUpB,EAAmDmB,EAAnDnB,SAAUC,EAAyCkB,EAAzClB,OAAQtB,EAAiCwC,EAAjCxC,UAAWkC,EAAsBM,EAAtBN,IAAKQ,EAAiBF,EAAjBE,aAE9CC,EAAMT,EAEZ,OACE,eAACS,EAAD,CAAK3C,UAAWG,IAAW,aAAD,mBAAiBH,EAAYA,GAA7B,qBAA8CqB,GAA9C,IAA1B,UACGoB,EACApB,EACC,eAAC,WAAD,WACE,iCACErB,UAAU,WACLqB,GAAYqB,EAAe,CAAEE,MAAO,CAAEC,gBAAiBH,IAAmB,CAAC,IAGlF,qBAAK1C,UAAU,SAAf,SAAyBsB,OAEzB,OAGT,EAEciB,MAEfA,EAASO,aAAe,CACtBZ,IAAK,MACLb,UAAU,EACVC,OAAQ,cAAC,KAAD,CAASU,MAAM,Y,+CC5BVe,IAZU,WACvB,OACE,qBAAK/C,UAAU,mBAAf,SACE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,yBAItB,C","file":"static/js/57.10d9b5f9.chunk.js","sourcesContent":["import Select from \"react-select\"\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { useDispatch } from \"react-redux\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { updateService, getService } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\nimport classnames from 'classnames'\n\n// ** Reactstrap Importsz\nimport { Row, Col, Card, Label, Button, CardBody, Input, FormFeedback, CardHeader, CardTitle } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { useEffect, useState, Fragment } from \"react\"\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n\nconst EditCard = () => {\n\n  const { id } = useParams()\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n\n  // ** States\n  const navigate = useNavigate({})\n  const dispatch = useDispatch()\n  const [categoryOptions, setCateoryOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [serviceDetails, setServiceDetails] = useState([])\n  const [exemptionReasonOptions, setExemptionReasonOptions] = useState([])\n  const [isTaxApplicable, setIsTaxApplicable] = useState(true)\n\n  const schema = yup.object().shape({\n    updatedBy: yup.string().default(userId),\n    id: yup.string().default(id),\n    categoryId: yup.string().nullable(),\n    categoryType: yup.number().default(1),\n    name: yup.string().required(\"Please Enter Service Name\"),\n    organizationId: yup.string().default(activeOrgId),\n    taxGroupId: yup.string().nullable(),\n    sellingPrice: yup.string().nullable(),\n    isTaxApplicable: yup.boolean().default(false),\n    exemptionReasonId: yup.string().nullable(),\n    sacCode: yup.string().nullable(),\n    description: yup.string().nullable()\n  })\n\n\n  const { handleSubmit, control, reset, formState: { errors }, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const getExemptionReason = () => {\n    axios.post('/exemptionreasons/dropdown').then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n  const getCategories = () => {\n    axios.post('/categories/dropdown').then(response => {\n      const arr = response.data\n      setCateoryOptions(arr.categories)\n    })\n  }\n\n  const getServiceData = async () => {\n    const service = await dispatch(getService(id))\n    setServiceDetails(service.payload)\n  }\n\n  const showExemption = (val) => {\n    if (val.nontaxableflag) {\n      setIsTaxApplicable(false)\n      setValue('isTaxApplicable', false)\n    } else {\n      setIsTaxApplicable(true)\n      setValue('isTaxApplicable', true)\n      setValue('exemptionReasonId', null)\n    }\n  }\n\n  useEffect(() => {\n\n    if (Object.keys(serviceDetails).length > 0) {\n      reset({\n        categoryId: serviceDetails.categoryid,\n        name: serviceDetails.name,\n        organizationId: serviceDetails.organizationid,\n        sellingPrice: serviceDetails.sellingprice,\n        sacCode: serviceDetails.saccode,\n        taxGroupId: serviceDetails.taxgroupid,\n        description: serviceDetails.description,\n        isTaxApplicable: serviceDetails.istaxapplicable || false,\n        exemptionReasonId: serviceDetails.exemptionreasonid\n      })\n\n      setIsTaxApplicable(serviceDetails.istaxapplicable)\n    }\n\n  }, [serviceDetails])\n\n  useEffect(() => {\n    getTaxGroups()\n    getCategories()\n    getExemptionReason()\n\n    if (id !== undefined) {\n      getServiceData()\n    }\n  }, [])\n\n  const onSubmit = async (data) => {\n    setBlock(true)\n    let id\n    if (serviceDetails.isdefault && serviceDetails.organizationid === null) {\n      axios.post('/services/clone', data)\n        .then((res) => {\n          id = res.data.service.id\n        })\n        .catch((err) => {\n          console.log(err)\n        })\n    } else {\n      await dispatch(updateService(data))\n    }\n    navigate(`/services/view/${id}`)\n\n  }\n\n\n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => { field.onChange(val.id); if (fieldName === 'taxGroupId') { showExemption(val) } }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n\n        ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n\n      })\n    }\n    return ErrorText\n  }\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Card className='invoice-preview-card'>\n          {/* Header */}\n          <CardHeader>\n            <CardTitle>Edit Service</CardTitle>\n            {renderError()}\n          </CardHeader>\n          <CardBody className='pb-0'>\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getRow('Service Name', 'name', true)}\n              </Col>\n            </Row>\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('Category', 'categoryId', categoryOptions, false)}\n              </Col>\n            </Row>\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getRow('SAC Code', 'sacCode', false)}\n              </Col>\n            </Row>\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getRow('Professional Fee', 'sellingPrice', false)}\n              </Col>\n            </Row>\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('Tax Rate', 'taxGroupId', taxGroupOptions, false)}\n              </Col>\n            </Row>\n            {!isTaxApplicable &&\n              <Row>\n                <Col md='6' className='mb-1'>\n                  {getSelectRow('Exemption Reason', 'exemptionReasonId', exemptionReasonOptions, false)}\n                </Col>\n              </Row>\n            }\n            <Row>\n              <Col md='6' className='mb-1'>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='description'>\n                    Description\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      id='description'\n                      name='description'\n                      control={control}\n                      render={({ field }) => <Input type=\"textarea\" invalid={errors.description && true} {...field} />}\n                    />\n                    {errors.description && <FormFeedback>{errors.description.message}</FormFeedback>}\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </CardBody>\n          {/* /Header */}\n        </Card>\n        <Card>\n          <CardBody>\n            <div className='modal-footer border-0'>\n              <Button color='warning' outline tag={Link} to={`/services/view/${id}`}>\n                Cancel\n              </Button>\n              <Button color='primary' type=\"submit\" >\n                Save\n              </Button>\n            </div>\n          </CardBody>\n        </Card>\n      </form>\n    </UILoader>\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ServiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ServiceAdd\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}