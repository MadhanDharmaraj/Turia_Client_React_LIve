{"version":3,"sources":["views/apps/service/edit/EditCard.js","views/apps/service/edit/index.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","EditCard","id","useParams","navigate","useNavigate","dispatch","useDispatch","useState","categoryOptions","setCateoryOptions","taxGroupOptions","setTaxGroupOptions","serviceDetails","setServiceDetails","exemptionReasonOptions","setExemptionReasonOptions","isTaxApplicable","setIsTaxApplicable","schema","yup","shape","updatedBy","default","categoryId","required","categoryType","organizationId","name","taxGroupId","exemptionReasonId","when","is","then","nullable","sellingPrice","sacCode","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","control","reset","errors","formState","setValue","getServiceData","a","getService","service","payload","showExemption","val","nontaxableflag","useEffect","Object","keys","length","categoryid","organizationid","sellingprice","saccode","taxgroupid","description","istaxapplicable","exemptionreasonid","axios","post","response","arr","data","taxgroups","categories","exemptionreasons","undefined","onSubmit","updateService","getRow","fieldLabel","fieldName","reqflag","className","sm","size","classnames","for","render","field","invalid","message","getSelectRow","options","ref","inputRef","classNamePrefix","value","find","c","onChange","getOptionLabel","option","getOptionValue","md","type","color","outline","tag","Link","to","ServiceAdd","xl"],"mappings":"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","file":"static/js/72.cfeced6a.chunk.js","sourcesContent":["import Select from \"react-select\"\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { useDispatch } from \"react-redux\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { updateService, getService } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\nimport classnames from 'classnames'\n\n// ** Reactstrap Importsz\nimport { Row, Col, Card, Label, Button, CardBody, Input, FormFeedback, CardHeader, CardTitle } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { useEffect, useState } from \"react\"\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\n\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n\nconst EditCard = () => {\n\n  const { id } = useParams()\n\n  // ** States\n  const navigate = useNavigate({})\n  const dispatch = useDispatch()\n  const [categoryOptions, setCateoryOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [serviceDetails, setServiceDetails] = useState([])\n  const [exemptionReasonOptions, setExemptionReasonOptions] = useState([])\n  const [isTaxApplicable, setIsTaxApplicable] = useState(true)\n\n  const schema = yup.object().shape({\n    updatedBy: yup.string().default(userId),\n    id: yup.string().default(id),\n    categoryId: yup.string().required(\"Please select a Category\"),\n    categoryType: yup.number().default(1),\n    organizationId: yup.number().default(activeOrgId),\n    name: yup.string().required(\"Please Enter Service Name\"),\n    taxGroupId: yup.string().required(\"Please Select Tax Rate\"),\n    isTaxApplicable: yup.boolean().default(true),\n    exemptionReasonId: yup.number()\n      .when([\"isTaxApplicable\"], { is: (isTaxApplicable) => !isTaxApplicable, then: yup.number().required('Please Select Exemption Reason') }).nullable(),\n    sellingPrice: yup.string().required(\"Please Enter Professional Fee\"),\n    sacCode: yup.string().required(\"Please Enter SAC Code\")\n  })\n\n\n  const { handleSubmit, control, reset, formState: { errors }, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const getExemptionReason = () => {\n    axios.post('/exemptionreasons/dropdown').then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n  const getCategories = () => {\n    axios.post('/categories/list').then(response => {\n      const arr = response.data\n      setCateoryOptions(arr.categories)\n    })\n  }\n\n  const getServiceData = async () => {\n    const service = await dispatch(getService(id))\n    setServiceDetails(service.payload)\n  }\n\n  const showExemption = (val) => {\n    if (val.nontaxableflag) {\n      setIsTaxApplicable(false)\n      setValue('isTaxApplicable', false)\n    } else {\n      setIsTaxApplicable(true)\n      setValue('isTaxApplicable', true)\n      setValue('exemptionReasonId', null)\n    }\n  }\n\n  useEffect(() => {\n\n    if (Object.keys(serviceDetails).length > 0) {\n      reset({\n        categoryId: serviceDetails.categoryid,\n        name: serviceDetails.name,\n        organizationId: serviceDetails.organizationid,\n        sellingPrice: serviceDetails.sellingprice,\n        sacCode: serviceDetails.saccode,\n        taxGroupId: serviceDetails.taxgroupid,\n        description: serviceDetails.description,\n        isTaxApplicable: serviceDetails.istaxapplicable,\n        exemptionReasonId: serviceDetails.exemptionreasonid\n      })\n\n      setIsTaxApplicable(serviceDetails.istaxapplicable)\n    }\n\n  }, [serviceDetails])\n\n  useEffect(() => {\n    getTaxGroups()\n    getCategories()\n    getExemptionReason()\n\n    if (id !== undefined) {\n      getServiceData()\n    }\n  }, [])\n\n  const onSubmit = async (data) => {\n    await dispatch(updateService(data))\n    navigate(`/service/view/${id}`)\n  }\n\n\n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => { field.onChange(val.id); if (fieldName === 'taxGroupId') { showExemption(val) } }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardHeader>\n          <CardTitle>Edit Service</CardTitle>\n        </CardHeader>\n        <CardBody className='pb-0'>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Category', 'categoryId', categoryOptions, true)}\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Name', 'name', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('SAC Code', 'sacCode', true)}\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Professional Fee', 'sellingPrice', true)}\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Tax Rate', 'taxGroupId', taxGroupOptions, true)}\n            </Col>\n          </Row>\n          {!isTaxApplicable &&\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('Exemption Reason', 'exemptionReasonId', exemptionReasonOptions, true)}\n              </Col>\n            </Row>\n          }\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label required' for='description'>\n                  Description\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='description'\n                    name='description'\n                    control={control}\n                    render={({ field }) => <Input type=\"textarea\" invalid={errors.description && true} {...field} />}\n                  />\n                  {errors.description && <FormFeedback>{errors.description.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </CardBody>\n        {/* /Header */}\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/service/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form>\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ServiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ServiceAdd\n"],"sourceRoot":""}