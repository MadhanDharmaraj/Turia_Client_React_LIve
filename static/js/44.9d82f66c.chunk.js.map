{"version":3,"sources":["views/apps/client/add/AddCard.js","views/apps/client/add/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrg","activeOrganization","userId","orgUserId","AddCard","useState","block","setBlock","Loader","phoneRegExp","navigate","useNavigate","dispatch","useDispatch","businessEntityOptions","setBusinessEntityOptions","stateOptions","setStateOptions","countryOptions","setCountryOptions","currencyOptions","setCurrencyOptions","gstRegistrationTypeOptions","setGstRegistrationTypeOptions","clientInfo","setClientInfo","contactId","setConatctId","store","useSelector","state","client","schema","yup","shape","createdBy","default","organization","id","contactPersonName","required","name","contactNumber","matches","message","excludeEmptyString","email","businessEntity","gstRegistrationType","nullable","gstin","placeOfSupply","stateid","currency","currencyid","billingAddressLine1","billingAddressLine2","billingAddressCity","billingAddressState","billingAddressCountry","countryid","billingAddressZip","contact_info","of","designation","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","control","errors","formState","setError","useFieldArray","fields","append","remove","saveContactInfo","clientId","length","forEach","obj","ind","splice","rows","addContactInfo","useEffect","clientErrors","Object","keys","map","type","onSubmit","data","temp","predata","addClient","undefined","datatemp","payload","addItem","primarytag","_formValues","organizationId","primaryStatus","getRow","fieldLabel","fieldName","reqflag","className","sm","size","classnames","for","render","field","invalid","getSelectRow","options","ref","inputRef","isDisabled","classNamePrefix","value","find","c","onChange","val","getOptionLabel","option","getOptionValue","axios","post","then","response","arr","businessentities","countries","currencies","gstregistrationtypes","states","blocking","loader","md","item","i","lg","defaultChecked","onClick","color","outline","tag","Link","to","ClientAdd","xl","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/44.9d82f66c.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect, Fragment } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport classnames from 'classnames'\nimport { useDispatch, useSelector } from 'react-redux'\n// ** Custom Components\nimport { addClient, addContactInfo } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { X, Plus } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { orgUserId, activeOrganization } from '@src/helper/sassHelper'\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback, CardTitle, CardHeader } from 'reactstrap'\n\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\nconst AddCard = () => {\n\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  // ** States\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const zipcodeExp = /^[0-9\\- ]{6,6}$/\n  const navigate = useNavigate({})\n\n  const dispatch = useDispatch()\n  const [businessEntityOptions, setBusinessEntityOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [gstRegistrationTypeOptions, setGstRegistrationTypeOptions] = useState([])\n  //const [setClientType] = useState(2)\n  const [clientInfo, setClientInfo] = useState([])\n  const [contactId, setConatctId] = useState(null)\n\n\n  const store = useSelector(state => state.client)\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    organization: yup.string().default(activeOrg.id),\n    contactPersonName: yup.string().required(\"Please Enter a Contact Person Name\"),\n    name: yup.string().required(\"Please Enter Business Name.\").default(''),\n    contactNumber: yup.string().required(\"Please Enter Contact Number\").matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n    email: yup.string().email(\"Please Enter valid Email\").required(\"Please Enter valid Email\"),\n    businessEntity: yup.string().required(\"Please Select Business Enity.\"),\n    gstRegistrationType: yup.string().nullable(),\n    gstin: yup.string().nullable(),\n    placeOfSupply: yup.string().default(activeOrg.stateid),\n    currency: yup.string().default(activeOrg.currencyid),\n    billingAddressLine1: yup.string().nullable(),\n    billingAddressLine2: yup.string().nullable(),\n    billingAddressCity: yup.string().nullable(),\n    billingAddressState: yup.string().default(activeOrg.stateid),\n    billingAddressCountry: yup.string().default(activeOrg.countryid),\n    billingAddressZip: yup.string().matches(zipcodeExp, { message: 'Zip Code is not valid', excludeEmptyString: true }).nullable(''),\n    contact_info: yup.array().of(\n      yup.object().shape({\n        createdBy: yup.string().default(userId),\n        name: yup.string().nullable(),\n        email: yup.string().email().nullable(),\n        designation: yup.string().nullable(),\n        contactNumber: yup.string().nullable().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true })\n      })\n    )\n\n  })\n\n  const { handleSubmit, control, formState: { errors }, setError } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ name: 'contact_info', control })\n\n  const saveContactInfo = async (clientId) => {\n    if (clientInfo.length > 0) {\n      await clientInfo.forEach((obj, ind) => {\n        clientInfo[ind].contactId = clientId\n        if (obj.name === '' && obj.email === '') {\n          clientInfo.splice(ind, 1)\n        }\n      })\n      const rows = clientInfo\n      if (rows.length > 0) {\n        await dispatch(addContactInfo({ rows }))\n      }\n    }\n    navigate(`/clients/view/${clientId}`)\n  }\n\n  useEffect(() => {\n    if (store.clientErrors !== null) {\n      setBlock(false)\n      Object.keys(store.clientErrors).map((obj) => {\n        setError(obj, { type: 'custom', message: store.clientErrors[obj][0] })\n      })\n    }\n  }, [store.clientErrors])\n\n  const onSubmit = async (data) => {\n\n    setBlock(true)\n    const temp = data.contact_info || []\n    setClientInfo(predata => ([...predata, ...temp]))\n    delete data.contact_info\n    const datatemp = await dispatch(addClient(data))\n    if (datatemp.payload.client === undefined) {\n      return false\n    } else {\n      setConatctId(datatemp.payload.client.id)\n    }\n\n  }\n\n  const addItem = (() => {\n    let primarytag = true\n    if (control._formValues.contact_info.length > 0) {\n      primarytag = false\n    }\n    append({ createdBy: userId, organizationId: activeOrg.id, contactId: 0, name: '', email: '', contactNumber: '', designation: '', primaryStatus: primarytag })\n  })\n\n  const removeItem = ind => {\n    remove(ind)\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityOptions(arr.businessentities)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/list').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getCurrency = () => {\n    axios.post('/currencies/list').then(response => {\n      const arr = response.data\n      setCurrencyOptions(arr.currencies)\n    })\n  }\n\n  const getGSTRegType = () => {\n    axios.post('/gstregistrationtypes/list').then(response => {\n      const arr = response.data\n      setGstRegistrationTypeOptions(arr.gstregistrationtypes)\n    })\n  }\n\n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='4' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='8'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='4' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName} >\n          {fieldLabel}\n        </Label>\n        <Col sm='8'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                isDisabled={fieldName === 'currency'}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => { return field.onChange(val.id) }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n  useEffect(() => {\n    if (contactId === null) {\n      getBusineessEntity()\n      getCountries()\n      getCurrency()\n      getGSTRegType()\n      getStates()\n\n      addItem()\n    }\n\n    if (contactId !== null) {\n      saveContactInfo(contactId)\n    }\n\n  }, [clientInfo, contactId])\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Card className='invoice-preview-card'>\n          {/* Header */}\n          <CardHeader>\n            <CardTitle> Add Client</CardTitle>\n          </CardHeader>\n          <CardBody className='pb-0'>\n\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getRow('Business Name', 'name', true)}\n              </Col>\n              <Col md='6' className='mb-1'>\n                {getRow('Contact Person Name', 'contactPersonName', true)}\n              </Col>\n            </Row>\n\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getRow('Mobile Number', 'contactNumber', true)}\n              </Col>\n              <Col md='6' className='mb-1'>\n                {getRow('Email ID', 'email', true)}\n              </Col>\n            </Row>\n\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('Business Entity', 'businessEntity', businessEntityOptions, true)}\n              </Col>\n            </Row>\n\n          </CardBody>\n          {/* /Header */}\n\n          <hr className='invoice-spacing' />\n          {errors.contact_info && <p className='text-danger ms-2'>{errors.contact_info?.message}</p>}\n          {/* Product Details */}\n          <CardBody className='invoice-padding invoice-product-details'>\n            {fields.map((item, i) => (\n\n              <div key={item.id} className='repeater-wrapper'>\n                <Row >\n                  <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                    <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                      <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-12'>\n                        <CardText className='col-title mb-md-50 mb-0'>First Name</CardText>\n                        <Controller\n                          control={control}\n                          id='contact_info_firstName'\n                          name={`contact_info[${i}].name`}\n                          render={({ field }) => (\n                            <Input type='text' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.name && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.name && <FormFeedback>{errors.contact_info?.[i]?.name.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 my-2 col-lg-3 col-sm-12'>\n                        <CardText className='col-title mb-md-2 mb-0 '>Email</CardText>\n                        <Controller\n                          control={control}\n                          id='contact_info_email'\n                          name={`contact_info[${i}].email`}\n                          render={({ field }) => (\n                            <Input type='email' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.email && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.email && <FormFeedback>{errors.contact_info?.[i]?.email.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-2 mb-0'>Mobile</CardText>\n                        <Controller\n                          control={control}\n                          id='contact_info_contactNumber'\n                          name={`contact_info[${i}].contactNumber`}\n                          render={({ field }) => (\n                            <Input type='number' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.contactNumber && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.contactNumber && <FormFeedback>{errors.contact_info?.[i]?.contactNumber.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Designation</CardText>\n                        <Controller\n                          control={control}\n                          id='contact_info_designation'\n                          name={`contact_info[${i}].designation`}\n                          render={({ field }) => (\n                            <Input type='text' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.designation && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.designation && <FormFeedback>{errors.contact_info?.[i]?.designation.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Primary</CardText>\n                        <div className='form-switch form-check-primary'>\n                          <Controller\n                            control={control}\n                            id='contact_info_primaryStatus'\n                            name={`contact_info[${i}].primaryStatus`}\n                            render={({ field }) => (\n                              <Input type='switch' onChange={(val) => { field.onChange(val) }} {...field} defaultChecked={field.value} />\n                            )}\n                          />\n                        </div>\n                      </Col>\n                    </Row>\n                    <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                      <X size={18} className='cursor-pointer' onClick={() => { removeItem(i) }} />\n                    </div>\n                  </Col>\n                </Row>\n              </div>\n            ))}\n\n            <Row className='mt-1'>\n              <Col sm='12' className='px-0'>\n                <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                  <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                </Button>\n              </Col>\n            </Row>\n\n          </CardBody>\n\n          <hr className='invoice-spacing' />\n          {/* Product Details */}\n          <CardBody>\n\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('GST Type', 'gstRegistrationType', gstRegistrationTypeOptions)}\n              </Col>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('Place of Supply', 'placeOfSupply', stateOptions)}\n              </Col>\n            </Row>\n\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getRow('GSTIN', 'gstin')}\n              </Col>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('Currency', 'currency', currencyOptions, false)}\n              </Col>\n            </Row>\n          </CardBody>\n          {/* Invoice Total */}\n          <CardBody className=''>\n            <h4 className='text-primary'>Billing Address</h4>\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getRow('Address Line1', 'billingAddressLine1')}\n              </Col>\n              <Col md='6' className='mb-1'>\n                {getRow('Address Line2', 'billingAddressLine2')}\n              </Col>\n            </Row>\n\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getRow('City', 'billingAddressCity')}\n              </Col>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('State', 'billingAddressState', stateOptions)}\n              </Col>\n            </Row>\n\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('Country', 'billingAddressCountry', countryOptions)}\n              </Col>\n              <Col md='6' className='mb-1'>\n                {getRow('Zip Code', 'billingAddressZip')}\n              </Col>\n            </Row>\n          </CardBody>\n        </Card>\n        <Card>\n          <CardBody>\n            <div className='modal-footer border-0'>\n              <Button color='warning' outline tag={Link} to='/clients/list'>\n                Cancel\n              </Button>\n              <Button color='primary' type=\"submit\" >\n                Save\n              </Button>\n            </div>\n          </CardBody>\n        </Card>\n      </form >\n    </UILoader>\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ClientAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ClientAdd\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}