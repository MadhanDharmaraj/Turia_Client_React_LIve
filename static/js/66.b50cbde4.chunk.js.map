{"version":3,"sources":["views/apps/digital-signature/edit/EditCard.js","views/apps/digital-signature/edit/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["userId","orgUserId","activeOrgId","activeOrganizationid","EditCard","useState","block","setBlock","Loader","MySwal","withReactContent","Swal","dispatch","useDispatch","store","useSelector","state","digitalsignature","navigate","useNavigate","schema","yup","shape","clientId","required","rows","of","name","updatedBy","default","organizationId","email","contact","matches","message","excludeEmptyString","issuedDate","expiryDate","password","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","id","useParams","clientOptions","setClientOptions","useFieldArray","keyName","fields","append","remove","onSubmit","data","updateDSC","deletefun","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","then","result","value","deleteDigitalSignature","dismiss","DismissReason","cancel","getClientInfo","undefined","DSCList","removeItem","ind","tempid","_formValues","flg","getClientList","axios","post","response","arr","clients","useEffect","DSCLists","forEach","obj","issueddate","length","String","expirydate","blocking","loader","className","md","sm","size","for","render","field","ref","inputRef","isDisabled","classnames","classNamePrefix","options","find","c","onChange","val","getOptionLabel","option","getOptionValue","map","item","i","type","invalid","lg","date","dateStr","altInput","altFormat","dateFormat","onClick","rowid","color","key","outline","tag","Link","to","ServiceAdd","xl","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/66.b50cbde4.chunk.js","sourcesContent":["// ** React Imports\nimport { useEffect, useState, Fragment } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport classnames from 'classnames'\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus } from 'react-feather'\nimport Select from 'react-select'\nimport { DSCList, updateDSC, deleteDigitalSignature } from '../store/index'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst userId = orgUserId()\nconst activeOrgId = activeOrganizationid()\nconst EditCard = () => {\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const MySwal = withReactContent(Swal)\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.digitalsignature)\n  const navigate = useNavigate()\n  const schema = yup.object().shape({\n    clientId: yup.string().required(\"Please select a Client\"),\n    rows: yup.array().of(\n      yup.object().shape({\n        name: yup.string().required(\"Please Enter Name\"),\n        updatedBy: yup.string().default(userId),\n        organizationId: yup.string().default(activeOrgId),\n        email: yup.string().email().required(\"Please Enter Email\"),\n        contact: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n        issuedDate: yup.number().required(\"Please Enter Issued Date\"),\n        expiryDate: yup.number().required(\"Please Enter Expiry Date\"),\n        password: yup.string()\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { id } = useParams()\n  const [clientOptions, setClientOptions] = useState([])\n  const { fields, append, remove } = useFieldArray({ name: 'rows', keyName: 'rowid', control })\n  const onSubmit = async data => {\n    setBlock(true)\n    await dispatch(updateDSC(data))\n    navigate('/digital-signature/list')\n  }\n\n  const addItem = (() => {\n    append({ clientId: '', name: '', email: '', contact: '', issuedDate: '', expiryDate: '', password: '' })\n\n    control._formValues.rows.forEach((obj, key) => {\n      control._formValues.rows[key].clientId = id\n    })\n  })\n\n  const deletefun = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteDigitalSignature(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'DSC has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  const getClientInfo = async () => {\n    if (id !== undefined) {\n      await dispatch(DSCList(id))\n    }\n  }\n\n  const removeItem = async (ind) => {\n    const tempid = control._formValues.rows[ind].id\n    let flg\n    if (tempid !== undefined) {\n      flg = await deletefun(tempid)\n    }\n\n    if (flg) {\n      remove(ind)\n    }\n\n  }\n\n  // const compareDate = (fie) => {\n\n  //   console.log(fie)\n  //   // if (control._formValues.rows[ind].issuedDate !== '' && control._formValues.rows[ind].expiryDate !== '') {\n  //   //   const issDate = control._formValues.rows[ind].issuedDate[0]\n  //   //   const expDate = control._formValues.rows[ind].expiryDate[0]\n\n  //   //   if (expDate < issDate) {\n  //   //     console.log('Success Date')\n  //   //   }\n  // }\n\n  const getClientList = async () => {\n    await axios.post('/clients/dropdown').then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n      getClientInfo()\n    })\n  }\n\n  useEffect(() => {\n    store.DSCLists.forEach((obj) => {\n      const data = {}\n\n      data['id'] = obj.id\n      data['name'] = obj.name\n      data['email'] = obj.email\n      data['organizationId'] = activeOrgId\n      data['clientId'] = id\n      data['contact'] = obj.contact\n      data['issuedDate'] = obj.issueddate.length === 13 ? String(obj.issueddate / 1000) : obj.issueddate\n      data['expiryDate'] = obj.expirydate.length === 13 ? String(obj.expirydate / 1000) : obj.expirydate\n      data['password'] = obj.password\n\n      append(data)\n    })\n\n  }, [store.DSCLists])\n\n  useEffect(() => {\n    setValue('clientId', id)\n    getClientList()\n  }, [])\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Card className='invoice-preview-card'>\n          {/* Header */}\n          <CardBody className='pb-0'>\n            <Row>\n              <Col md='6' className='mb-1'>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='clientId'>\n                    Client\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"clientId\"\n                      id=\"clientId\"\n                      render={({ field, ref }) => (\n                        <Select\n                          {...field}\n                          inputRef={ref}\n                          isDisabled\n                          className={classnames('react-select', { 'is-invalid': errors.clientId })}\n                          classNamePrefix='select'\n                          options={clientOptions}\n                          value={clientOptions.find(c => { return c.id === field.value })}\n                          onChange={(val) => { field.onChange(val.id) }}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n                    />\n                    {errors.clientId && <FormFeedback className='text-danger'>{errors.clientId?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </CardBody>\n          <CardBody className='invoice-padding invoice-product-details'>\n            {fields.map((item, i) => (\n              <div key={item.rowid} className='repeater-wrapper'>\n                <Row >\n                  <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                    <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                      <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Name</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_name'\n                          name={`rows[${i}].name`}\n                          render={({ field }) => (\n                            <Input type='text' invalid={errors.rows?.[i]?.name && true} {...field} />\n                          )}\n                        />\n                        {errors.rows?.[i]?.name && <FormFeedback>{errors.rows?.[i]?.name.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 my-2 col-lg-2 col-sm-12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Email</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_email'\n                          name={`rows[${i}].email`}\n                          render={({ field }) => (\n                            <Input type='email' invalid={errors.rows?.[i]?.email && true} {...field} />\n                          )}\n                        />\n                        {errors.rows?.[i]?.email && <FormFeedback>{errors.rows?.[i]?.email.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Mobile</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_contactNumber'\n                          name={`rows[${i}].contact`}\n                          render={({ field }) => (\n                            <Input type='number' invalid={errors.rows?.[i]?.contact && true} {...field} />\n                          )}\n                        />\n                        {errors.rows?.[i]?.contact && <FormFeedback>{errors.rows?.[i]?.contact.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Issued Date</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_issuedDate'\n                          name={`rows[${i}].issuedDate`}\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                        {errors.rows?.[i]?.issuedDate && <FormFeedback>{errors.rows?.[i]?.issuedDate.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Expiry Date</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_expiryDate'\n                          name={`rows[${i}].expiryDate`}\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                        {errors.rows?.[i]?.expiryDate && <FormFeedback>{errors.rows?.[i]?.expiryDate.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Password</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_password'\n                          name={`rows[${i}].password`}\n                          render={({ field }) => (\n                            <Input type='text' invalid={errors.rows?.[i]?.password && true} {...field} />\n                          )}\n                        />\n                        {errors.rows?.[i]?.password && <FormFeedback>{errors.rows?.[i]?.password.message}</FormFeedback>}\n                      </Col>\n\n                    </Row>\n                    <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                      <X size={18} className='cursor-pointer' onClick={() => removeItem(i)} />\n                    </div>\n                  </Col>\n                </Row>\n              </div>\n            ))}\n\n            <Row className='mt-1'>\n              <Col sm='12' className='px-0'>\n                <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                  <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                </Button>\n              </Col>\n            </Row>\n\n          </CardBody>\n          {/* /Header */}\n        </Card>\n        <Card>\n          <CardBody>\n            <div className='modal-footer border-0'>\n              <Button color='warning' outline tag={Link} to='/digital-signature/list'>\n                Cancel\n              </Button>\n              <Button color='primary' type=\"submit\" >\n                Save\n              </Button>\n            </div>\n          </CardBody>\n        </Card>\n      </form>\n    </UILoader>\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ServiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ServiceAdd\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}