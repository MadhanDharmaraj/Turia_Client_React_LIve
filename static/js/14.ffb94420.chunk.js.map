{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","@core/components/input-password-toggle/index.js"],"names":["ToastContent","t","name","className","size","color","icon","onClick","toast","dismiss","id","defaultValues","password","email","Login","skin","useSkin","dispatch","useDispatch","navigate","useNavigate","useState","block","setBlock","Loader","useForm","control","setError","handleSubmit","errors","formState","illustration","source","require","default","getOrganization","data","user","userId","users","axios","post","res","organizations","length","activeOrg","find","obj","isdefault","localStorage","setItem","JSON","stringify","getHomeRouteForLoggedInUser","blocking","loader","to","e","preventDefault","src","themeConfig","app","appLogoImage","alt","width","height","lg","sm","md","tag","onSubmit","Object","values","every","field","useJwt","login","then","userData","handleLogin","catch","err","keys","response","forEach","key","type","message","for","render","autoFocus","placeholder","invalid","UILoader","props","children","overlayColor","Tag","classnames","style","backgroundColor","defaultProps","ComponentSpinner","InputPasswordToggle","forwardRef","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","renderIcon"],"mappings":"kXAgCMA,EAAe,SAAH,GAAqB,IAAfC,EAAC,EAADA,EAAGC,EAAI,EAAJA,KACzB,OACE,sBAAKC,UAAU,SAAQ,UACrB,qBAAKA,UAAU,OAAM,SACnB,cAAC,IAAM,CAACC,KAAK,KAAKC,MAAM,UAAUC,KAAM,cAAC,IAAM,CAACF,KAAM,SAExD,sBAAKD,UAAU,qBAAoB,UACjC,sBAAKA,UAAU,iCAAgC,UAC7C,6BAAKD,IACL,cAAC,IAAC,CAACE,KAAM,GAAID,UAAU,iBAAiBI,QAAS,kBAAMC,IAAMC,QAAQR,EAAES,GAAG,OAE5E,+BAAM,mGAId,EAEMC,EAAgB,CACpBC,SAAU,GACVC,MAAO,IA4JMC,UAzJD,WAAO,IAAD,MAEVC,EAASC,cAATD,KACFE,EAAWC,cACXC,EAAWC,cAEjB,EAA0BC,oBAAS,GAAM,mBAAlCC,EAAK,KAAEC,EAAQ,KAChBC,EAAS,WACb,OACE,cAAC,WAAQ,UACP,cAAC,IAAO,KAGd,EAEA,EAKIC,YAAQ,CAAEd,kBAJZe,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACaC,EAAM,EAAnBC,UAAaD,OAETE,EAAwB,SAAThB,EAAkB,oBAAsB,eAC3DiB,EAASC,OAAQ,YAA4BF,IAAgBG,QAEzDC,EAAe,iDAAG,WAAOC,GAAI,qFACK,OAAhCC,EAAO,CAAEC,OAAQF,EAAKG,MAAM7B,IAAI,SACpB8B,IAAMC,KAAK,sCAAuCJ,GAAK,OAEnC,KAFhCK,EAAG,QAEDN,KAAKO,cAAcC,OACzBzB,EAAS,wBACAuB,EAAIN,KAAKO,cAAcC,OAAS,IACnCC,EAAYH,EAAIN,KAAKO,cAAcG,MAAK,SAACC,GAAG,OAAuB,IAAlBA,EAAIC,SAAkB,IAC7EC,aAAaC,QAAQ,qBAAsBC,KAAKC,UAAUP,GAAaH,EAAIN,KAAKO,cAAc,KAC9FxB,EAASkC,YAA4B,WACtC,2CACF,gBAXoB,sCA4CrB,OACE,qBAAKlD,UAAU,0BAAyB,SACtC,cAAC,IAAQ,CAACmD,SAAUhC,EAAOiC,OAAQ,cAAC/B,EAAM,IAAI,SAC5C,eAAC,KAAG,CAACrB,UAAU,iBAAgB,UAC7B,eAAC,IAAI,CAACA,UAAU,aAAaqD,GAAG,IAAIjD,QAAS,SAAAkD,GAAC,OAAIA,EAAEC,gBAAgB,EAAC,UACnE,qBAAKC,IAAKC,IAAYC,IAAIC,aAAcC,IAAK,aAAcC,MAAO,GAAIC,OAAQ,KAC9E,oBAAI9D,UAAU,0BAAyB,SAAC,aAE1C,cAAC,IAAG,CAACA,UAAU,0CAA0C+D,GAAG,IAAIC,GAAG,KAAI,SACrE,qBAAKhE,UAAU,iEAAgE,SAC7E,qBAAKA,UAAU,YAAYwD,IAAK3B,EAAQ+B,IAAI,oBAGhD,cAAC,IAAG,CAAC5D,UAAU,gDAAgD+D,GAAG,IAAIC,GAAG,KAAI,SAC3E,eAAC,IAAG,CAAChE,UAAU,kBAAkBgE,GAAG,IAAIC,GAAG,IAAIF,GAAG,KAAI,UACpD,cAAC,IAAS,CAACG,IAAI,KAAKlE,UAAU,eAAc,SAAC,mCAG7C,cAAC,IAAQ,CAACA,UAAU,OAAM,SAAC,2DAC3B,eAAC,IAAI,CAACA,UAAU,uBAAuBmE,SAAU1C,GAnD5C,SAAAQ,GACf,GAAImC,OAAOC,OAAOpC,GAAMqC,OAAM,SAAAC,GAAK,OAAIA,EAAM9B,OAAS,CAAC,IACrDrB,GAAS,GACToD,IACGC,MAAM,CAAE/D,MAAOuB,EAAKvB,MAAOD,SAAUwB,EAAKxB,WAC1CiE,KAAI,iDAAC,WAAOnC,GAAG,iFAEW,OADzBnB,GAAS,GACHuD,EAAWpC,EAAIN,KAAI,SACnBnB,EAAS8D,YAAYD,IAAU,uBAC/B3C,EAAgB2C,GAAS,OAC/BtE,aAAM,SAAAP,GAAC,OACL,cAACD,EAAY,CAACC,EAAGA,EAAGC,KAAM4E,EAASvC,MAAMrC,MAAQ,IACjD,2CACH,mDARI,IASJ8E,OAAM,SAAAC,GACL1D,GAAS,GACTgD,OAAOW,KAAKD,EAAIE,SAAS/C,KAAKP,QAAQuD,SAAQ,SAAAC,GAC5C1D,EAAS0D,EAAK,CAAEC,KAAM,SAAUC,QAASN,EAAIE,SAAS/C,KAAKP,OAAOwD,GAAK,IACzE,GACF,SAEF,IAAK,IAAMA,KAAOjD,EACS,IAArBA,EAAKiD,GAAKzC,QACZjB,EAAS0D,EAAK,CACZC,KAAM,SACNC,QAAQ,kBAAD,OAAoBF,IAKrC,IAqBoF,UAErExD,EAAe,QAAK,mBAAG1B,UAAU,cAAa,SAAkB,QAAlB,EAAE0B,EAAe,cAAC,aAAhB,EAAkB0D,UACnE,sBAAKpF,UAAU,OAAM,UACnB,cAAC,IAAK,CAACA,UAAU,aAAaqF,IAAI,QAAO,SAAC,UAG1C,cAAC,IAAU,CACT9E,GAAG,QACHR,KAAK,QACLwB,QAASA,EACT+D,OAAQ,gBAAGf,EAAK,EAALA,MAAK,OACd,cAAC,IAAK,aACJgB,WAAS,EACTJ,KAAK,QACLK,YAAY,mBACZC,QAAS/D,EAAOhB,QAAS,GACrB6D,GACJ,IAGL7C,EAAc,OAAK,cAAC,IAAY,UAAiB,QAAjB,EAAEA,EAAc,aAAC,aAAf,EAAiB0D,aAEtD,sBAAKpF,UAAU,OAAM,UACnB,sBAAKA,UAAU,iCAAgC,UAC7C,cAAC,IAAK,CAACA,UAAU,aAAaqF,IAAI,iBAAgB,SAAC,aAGnD,cAAC,IAAI,CAAChC,GAAG,mBAAkB,SACzB,gCAAO,0BAGX,cAAC,IAAU,CACT9C,GAAG,WACHR,KAAK,WACLwB,QAASA,EACT+D,OAAQ,gBAAGf,EAAK,EAALA,MAAK,OACd,cAAC,IAAmB,aAACvE,UAAU,oBAAoByF,QAAS/D,EAAOjB,WAAY,GAAU8D,GAAS,IAGrG7C,EAAiB,UAAK,cAAC,IAAY,UAAoB,QAApB,EAAEA,EAAiB,gBAAC,aAAlB,EAAoB0D,aAE5D,sBAAKpF,UAAU,kBAAiB,UAC9B,cAAC,IAAK,CAACmF,KAAK,WAAW5E,GAAG,gBAC1B,cAAC,IAAK,CAACP,UAAU,mBAAmBqF,IAAI,cAAa,SAAC,mBAIxD,cAAC,IAAM,CAACF,KAAK,SAASjF,MAAM,UAAUiB,OAAK,WAAC,eAI9C,oBAAGnB,UAAU,mBAAkB,UAC7B,sBAAMA,UAAU,QAAO,SAAC,yBACxB,cAAC,IAAI,CAACqD,GAAG,YAAW,SAClB,+BAAM,sCASxB,C,uGChMMqC,EAAW,SAAAC,GAAU,IAAD,EAChBC,EAA6DD,EAA7DC,SAAUzC,EAAmDwC,EAAnDxC,SAAUC,EAAyCuC,EAAzCvC,OAAQpD,EAAiC2F,EAAjC3F,UAAWkE,EAAsByB,EAAtBzB,IAAK2B,EAAiBF,EAAjBE,aAE9CC,EAAM5B,EAEZ,OACE,eAAC4B,EAAD,CAAK9F,UAAW+F,IAAW,aAAD,mBAAiB/F,EAAYA,GAA7B,qBAA8CmD,GAA9C,IAA1B,UACGyC,EACAzC,EACC,eAAC,WAAD,WACE,iCACEnD,UAAU,WACLmD,GAAY0C,EAAe,CAAEG,MAAO,CAAEC,gBAAiBJ,IAAmB,CAAC,IAGlF,qBAAK7F,UAAU,SAAf,SAAyBoD,OAEzB,OAGT,EAEcsC,MAEfA,EAASQ,aAAe,CACtBhC,IAAK,MACLf,UAAU,EACVC,OAAQ,cAAC,KAAD,CAASlD,MAAM,Y,+CC5BViG,IAZU,WACvB,OACE,qBAAKnG,UAAU,mBAAf,SACE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,yBAItB,C,mSCCKoG,EAAsBC,sBAAW,SAACV,EAAOW,GAAS,IAAD,EAGnDC,EAWEZ,EAXFY,MACAC,EAUEb,EAVFa,SACAC,EASEd,EATFc,SACAC,EAQEf,EARFe,QACA1G,EAOE2F,EAPF3F,UACA2G,EAMEhB,EANFgB,QACAnB,EAKEG,EALFH,YACAoB,EAIEjB,EAJFiB,SACAC,EAGElB,EAHFkB,eACApB,EAEEE,EAFFF,QACGqB,EAXL,YAYInB,EAZJ,GAeA,EAA8CzE,mBAASwF,GAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KAaA,OACE,eAAC,WAAD,WACGT,EACC,cAAC,IAAD,CAAOvG,UAAU,aAAaqF,IAAKsB,EAAnC,SACGJ,IAED,KACJ,eAAC,IAAD,CACEvG,UAAW+F,KAAU,mBAClB/F,EAAYA,GADM,cAEnB,aAAcyF,GAFK,IADvB,UAME,cAAC,IAAD,yBACEa,IAAKA,EACLb,QAASA,EACTN,MAA0B,IAApB4B,EAA4B,WAAa,OAC/CvB,YAAaA,GAA4B,mDACzCxF,UAAW+F,IAAW,eACnBc,EAAiBA,KAGfN,GAASI,EACV,CACEpG,GAAIoG,GAEN,CAAC,GACDG,IAGN,cAAC,IAAD,CAAgB9G,UAAU,iBAAiBI,QAAS,kBAAM4G,GAAoBD,EAA1B,EAApD,SAxCa,WACjB,IAAM9G,EAAO2G,GAAsB,GAEnC,OAAwB,IAApBG,EACKP,GAAsB,cAAC,IAAD,CAAKvG,KAAMA,IAEjCwG,GAAsB,cAAC,IAAD,CAAQxG,KAAMA,GAE9C,CAiCQgH,UAKV,IAEcb,MA2BfA,EAAoBF,aAAe,CACjCQ,SAAS,E","file":"static/js/14.ffb94420.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport themeConfig from '@src/configs/themeConfig'\n// ** Custom Hooks\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\n\n// ** Third Party Components\nimport toast from 'react-hot-toast'\nimport { useDispatch } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport { Coffee, X } from 'react-feather'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Actions\nimport { handleLogin } from '@store/authentication'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\nimport InputPasswordToggle from '@components/input-password-toggle'\n\n// ** Utils\nimport { getHomeRouteForLoggedInUser } from '@utils'\n\n// ** Reactstrap Imports\nimport { Row, Col, Form, Input, Label, Button, CardText, CardTitle, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/pages/page-authentication.scss'\nimport axios from '@src/configs/axios/axiosConfig'\n\nconst ToastContent = ({ t, name }) => {\n  return (\n    <div className='d-flex'>\n      <div className='me-1'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n      </div>\n      <div className='d-flex flex-column'>\n        <div className='d-flex justify-content-between'>\n          <h6>{name}</h6>\n          <X size={12} className='cursor-pointer' onClick={() => toast.dismiss(t.id)} />\n        </div>\n        <span>You have successfully logged in as an user to Turia. Now you can start to explore. Enjoy!</span>\n      </div>\n    </div>\n  )\n}\n\nconst defaultValues = {\n  password: '',\n  email: ''\n}\n\nconst Login = () => {\n  // ** Hooks\n  const { skin } = useSkin()\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({ defaultValues })\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const getOrganization = async (data) => {\n    const user = { userId: data.users.id }\n    const res = await axios.post('organizationusers/usersorganization', user)\n\n    if (res.data.organizations.length === 0) {\n      navigate('/organization/create')\n    } else if (res.data.organizations.length > 0) {\n      const activeOrg = res.data.organizations.find((obj) => obj.isdefault === true)\n      localStorage.setItem('activeOrganization', JSON.stringify(activeOrg || res.data.organizations[0]))\n      navigate(getHomeRouteForLoggedInUser('admin'))\n    }\n  }\n  const onSubmit = data => {\n    if (Object.values(data).every(field => field.length > 0)) {\n      setBlock(true)\n      useJwt\n        .login({ email: data.email, password: data.password })\n        .then(async (res) => {\n          setBlock(false)\n          const userData = res.data\n          await dispatch(handleLogin(userData))\n          await getOrganization(userData)\n          toast(t => (\n            <ToastContent t={t} name={userData.users.name} />\n          ))\n        })\n        .catch(err => {\n          setBlock(false)\n          Object.keys(err.response.data.errors).forEach(key => {\n            setError(key, { type: 'custom', message: err.response.data.errors[key][0] })\n          })\n        })\n    } else {\n      for (const key in data) {\n        if (data[key].length === 0) {\n          setError(key, {\n            type: 'manual',\n            message: `Please Enter a ${key}`\n          })\n        }\n      }\n    }\n  }\n\n  return (\n    <div className='auth-wrapper auth-cover'>\n      <UILoader blocking={block} loader={<Loader />}>\n        <Row className='auth-inner m-0'>\n          <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n            <img src={themeConfig.app.appLogoImage} alt={'Turia Logo'} width={45} height={35} />\n            <h1 className='brand-text text-primary'>Turia</h1>\n          </Link>\n          <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n            <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n              <img className='img-fluid' src={source} alt='Login Cover' />\n            </div>\n          </Col>\n          <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n            <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n              <CardTitle tag='h2' className='fw-bold mb-1'>\n                Welcome to Turia! 👋\n              </CardTitle>\n              <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n              <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n\n                {errors['action'] && <p className='text-danger'>{errors['action']?.message}</p>}\n                <div className='mb-1'>\n                  <Label className='form-label' for='email'>\n                    Email\n                  </Label>\n                  <Controller\n                    id='email'\n                    name='email'\n                    control={control}\n                    render={({ field }) => (\n                      <Input\n                        autoFocus\n                        type='email'\n                        placeholder='john@example.com'\n                        invalid={errors.email && true}\n                        {...field}\n                      />\n                    )}\n                  />\n                  {errors['email'] && <FormFeedback>{errors['email']?.message}</FormFeedback>}\n                </div>\n                <div className='mb-1'>\n                  <div className='d-flex justify-content-between'>\n                    <Label className='form-label' for='login-password'>\n                      Password\n                    </Label>\n                    <Link to='/forgot-password'>\n                      <small>Forgot Password?</small>\n                    </Link>\n                  </div>\n                  <Controller\n                    id='password'\n                    name='password'\n                    control={control}\n                    render={({ field }) => (\n                      <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\n                    )}\n                  />\n                  {errors['password'] && <FormFeedback>{errors['password']?.message}</FormFeedback>}\n                </div>\n                <div className='form-check mb-1'>\n                  <Input type='checkbox' id='remember-me' />\n                  <Label className='form-check-label' for='remember-me'>\n                    Remember Me\n                  </Label>\n                </div>\n                <Button type='submit' color='primary' block>\n                  Sign in\n                </Button>\n              </Form>\n              <p className='text-center mt-2'>\n                <span className='me-25'>New on our platform?</span>\n                <Link to='/register'>\n                  <span>Create an account</span>\n                </Link>\n              </p>\n            </Col>\n          </Col>\n        </Row>\n      </UILoader>\n    </div>\n  )\n}\n\nexport default Login\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}