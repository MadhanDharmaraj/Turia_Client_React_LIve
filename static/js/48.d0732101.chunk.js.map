{"version":3,"sources":["views/apps/invoice/add/AddCard.js","views/apps/invoice/add/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/apps/invoice/helper/hepler.js"],"names":["activeOrgId","activeOrganizationid","activeOrg","activeOrganization","userId","orgUserId","AddCard","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","clientOptions","setClientOptions","serviceOptions","setServiceOptions","taxGroupOptions","setTaxGroupOptions","stateOptions","setStateOptions","accountOptions","setAccountOptions","finalTotal","setFinalTotal","finalSubTotal","setFinalSubTotal","invoiceItems","setInvoiceItems","selectedClient","setSelectedClient","taxValues","setTaxValues","accDetails","setAccDetails","invoiceTaxes","setInvoiceTaxes","exemptionReasonOptions","setExemptionReasonOptions","userOptions","setuserOptions","selEmployees","setSelEmployees","isRCMapplicable","setisRCMapplicable","navigate","useNavigate","dispatch","useDispatch","store","useSelector","state","invoice","getOrganizationUsers","axios","post","then","response","arr","data","organizationusers","catch","err","console","log","getClientData","id","getClient","res","payload","schema","yup","shape","createdBy","default","contactId","required","uniqueIdentity","contactEmail","contactName","invoiceDate","paymentDue","placeOfSupplyId","subTotalAmount","totalAmount","totalTaxAmount","organizationId","isRcmApplicable","dueAmount","billingAddressLine1","billingAddressLine2","billingAddressState","billingAddressCity","billingAddressZipCode","billingCurrencyId","currencyid","bankAccountBankName","bankAccountBranchName","bankAccountHolderName","bankAccountId","bankAccountIfscCode","bankAccountNumber","organizationAddressLine1","addressline1","organizationAddressLine2","addressline2","organizationCity","organizationcity","organizationState","statename","organizationZipCode","pinzipcode","organizationName","name","organizationImageUrl","organizationimageid","organizationStateCode","stateshortname","organizationGstin","gstin","note","status","calculateTaxes","paymentStatus","rows","of","serviceId","invoiceId","sacCode","price","exemptionReasonId","isTaxApplicable","actualPrice","taxGroupId","taxes","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","useFieldArray","fields","append","remove","useEffect","clients","services","taxgroups","exemptionreasons","transactionaccounts","states","organizationprefernces","invoicenote","replace","onSubmit","temp","addInvoice","InvoiceItems","forEach","obj","key","addInvoiceItems","length","users","addInvoiceParticipant","addItem","taxPrice","description","ItemFinalTotalAmount","items","_formValues","finalsubTotalAmount","finalTaxAmount","parseFloat","output","map","a","parser","flat","reduce","acc","item","undefined","existItem","find","taxName","taxAmount","push","Object","assign","JSON","stringify","calculateInvoiceTax","loadItemData","ind","service_price","tax_group_id","desFlg","priceFlg","sacFlg","taxFlg","itemFlg","eachObj","selectedService","saccode","sellingprice","taxgroupid","String","exemptionreasonid","calculateTaxAmount","invoice_item_taxes","taxGroups","taxApplicable","nontaxableflag","istaxapplicable","taxid","calculateTax","percentage","dataTemp","parseInt","toFixed","taxvaluefn","taxtype","stateid","taxType","type","taxvalues","getTaxValue","keys","billingaddresscity","billingaddressline1","billingaddressstatesname","billingaddresszip","currenciessymbol","currenciescode","currenciesname","email","placeofsupplyid","handleUserChange","e","tempArr","Array","isArray","x","blocking","loader","className","xl","md","sm","ErrorText","message","renderError","color","Math","floor","random","content","charAt","renderOrg","size","value","placeholder","disabled","render","field","onChange","date","dateStr","options","altInput","altFormat","dateFormat","ref","inputRef","classnames","classNamePrefix","c","val","getOptionLabel","option","getOptionValue","billingaddressline2","bankName","accountHolderName","branchAddress","ifscCode","target","checked","index","rules","invalid","onInput","lg","onClick","order","xs","for","outline","tag","Link","to","accountNumber","bankAccountfn","reviewer","isMulti","InvoiceAdd","UILoader","props","children","overlayColor","Tag","style","defaultProps","ComponentSpinner","amount","taxRateInPercentage","TaxType","calculatedTax","str","parse"],"mappings":"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","file":"static/js/48.d0732101.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Reactstrap Imports\nimport { Row, Col, Card, Input, Label, Button, CardBody, CardText, InputGroup, InputGroupText, FormFeedback } from 'reactstrap'\nimport classnames from 'classnames'\n\nimport { addInvoice, addInvoiceItems, getClient, addInvoiceParticipant } from '../store/index'\nimport Avatar from '@components/avatar'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { calculateTax, parser } from '../helper/hepler'\nimport { Link, useNavigate } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\n\nconst AddCard = () => {\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [accountOptions, setAccountOptions] = useState([])\n  const [finalTotal, setFinalTotal] = useState(0.00)\n  const [finalSubTotal, setFinalSubTotal] = useState(0.00)\n\n  const [invoiceItems, setInvoiceItems] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [taxValues, setTaxValues] = useState([])\n  const [accDetails, setAccDetails] = useState([])\n  const [invoiceTaxes, setInvoiceTaxes] = useState([])\n  const [exemptionReasonOptions, setExemptionReasonOptions] = useState([])\n  const [userOptions, setuserOptions] = useState([])\n  const [selEmployees, setSelEmployees] = useState([])\n  const [isRCMapplicable, setisRCMapplicable] = useState(false)\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const store = useSelector(state => state.invoice)\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const getTaxValue = (taxType) => {\n    const data = {\n      type: taxType\n    }\n    axios.post('/taxvalues/list', data).then(response => {\n      const arr = response.data\n      setTaxValues(arr.taxvalues)\n    })\n  }\n\n  const getExemptionReason = () => {\n    axios.post('/exemptionreasons/dropdown').then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n  const getBankAccounts = () => {\n    axios.post('/transactionaccounts/dropdown').then(response => {\n      const arr = response.data\n      setAccountOptions(arr.transactionaccounts)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data.organizationusers\n      setuserOptions(arr)\n    }).catch((err) => {\n      console.log(err)\n    })\n  }\n\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n  }\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    contactId: yup.string().required(\"Please select a Client\"),\n    uniqueIdentity: yup.string(),\n    contactEmail: yup.string(),\n    contactName: yup.string(),\n    invoiceDate: yup.number(),\n    paymentDue: yup.number(),\n    placeOfSupplyId: yup.string().required(\"Please select a Place Of Supply\"),\n    subTotalAmount: yup.string(),\n    totalAmount: yup.string(),\n    totalTaxAmount: yup.string(),\n    organizationId: yup.string().default(activeOrgId),\n    isRcmApplicable: yup.boolean().default(false),\n    dueAmount: yup.string(),\n    billingAddressLine1: yup.string(),\n    billingAddressLine2: yup.string(),\n    billingAddressState: yup.string(),\n    billingAddressCity: yup.string(),\n    billingAddressZipCode: yup.string(),\n    billingCurrencyId: yup.string().default(activeOrg.currencyid),\n    bankAccountBankName: yup.string(),\n    bankAccountBranchName: yup.string(),\n    bankAccountHolderName: yup.string(),\n    bankAccountId: yup.string().required('Please Select Account'),\n    bankAccountIfscCode: yup.string(),\n    bankAccountNumber: yup.string(),\n    organizationAddressLine1: yup.string().default(activeOrg.addressline1),\n    organizationAddressLine2: yup.string().default(activeOrg.addressline2),\n    organizationCity: yup.string().default(activeOrg.organizationcity),\n    organizationState: yup.string().default(activeOrg.statename),\n    organizationZipCode: yup.string().default(activeOrg.pinzipcode),\n    organizationName: yup.string().default(activeOrg.name),\n    organizationImageUrl: yup.string().default(activeOrg.organizationimageid || ''),\n    organizationStateCode: yup.string().default(activeOrg.stateshortname),\n    organizationGstin: yup.string().default(activeOrg.gstin),\n    gstin: yup.string(),\n    note: yup.string().default(''),\n    status: yup.number().default(11),\n    calculateTaxes: yup.string(),\n    paymentStatus: yup.number().default(5),\n    rows: yup.array().of(\n      yup.object().shape({\n        serviceId: yup.string().required(\"Please Select Service Item\"),\n        invoiceId: yup.string(),\n        sacCode: yup.string(),\n        price: yup.string(),\n        organizationId: yup.string().default(activeOrgId),\n        exemptionReasonId: yup.string().default(''),\n        isTaxApplicable: yup.boolean().default(true),\n        actualPrice: yup.string().required(),\n        taxGroupId: yup.string().required(\"Pleace Select Tax\"),\n        subTotalAmount: yup.string().required(1),\n        taxes: yup.string()\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'rows' })\n\n  const getDefaultNote = () => {\n    axios.post('/organizationprefernces/getinvoiceprops').then(response => {\n      setValue('note', response.data.organizationprefernces.invoicenote.replace(/(\\\\n)/g, \"\\n\"))\n    })\n  }\n\n  useEffect(() => {\n    // ** Get Clients\n    getClients()\n    getServices()\n    getTaxGroups()\n    getExemptionReason()\n    getBankAccounts()\n    getStates()\n    getDefaultNote()\n    getOrganizationUsers()\n\n  }, [])\n\n  const onSubmit = async data => {\n    setBlock(true)\n    const temp = data.rows\n    setInvoiceItems(temp)\n    delete data.rows\n    await dispatch(addInvoice(data))\n  }\n\n  const InvoiceItems = async (id) => {\n    invoiceItems.forEach((obj, key) => {\n      invoiceItems[key].invoiceId = id\n    })\n    await dispatch(addInvoiceItems(invoiceItems))\n\n\n    if (selEmployees.length > 0) {\n      const obj = { users: selEmployees, organizationId: activeOrgId, invoiceId: id }\n      await dispatch(addInvoiceParticipant(obj))\n    }\n\n    navigate(`/invoice/view/${store.invoiceId}`)\n  }\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', exemptionReasonId: '', isTaxApplicable: true, sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '' })\n  })\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n  useEffect(async () => {\n    if (store.invoiceId !== null && invoiceItems.length > 0) {\n      await InvoiceItems(store.invoiceId)\n    }\n  }, [store.invoiceId])\n\n  const calculateInvoiceTax = () => {\n\n    const inputArray = control._formValues.rows.map(a => {\n      if (a.taxes) {\n        return parser(a.taxes)\n      } else {\n        return []\n      }\n    })\n\n    let temp = []\n    temp = inputArray.flat()\n    let output = []\n    output = temp.reduce((acc, item) => {\n      if (item !== undefined) {\n        const existItem = acc.find((obj) => {\n          return item.taxName === obj.taxName\n        })\n        if (existItem) {\n          existItem.taxAmount = parseFloat(existItem.taxAmount) + parseFloat(item.taxAmount)\n        } else {\n          acc.push(Object.assign({}, item))\n        }\n      }\n      return acc\n    }, [])\n\n    setInvoiceTaxes(output)\n    setValue('calculateTaxes', JSON.stringify(output))\n\n  }\n\n  const ItemFinalTotalAmount = () => {\n\n    const items = control._formValues.rows\n    let finalTotal = 0\n    let finalsubTotalAmount = 0\n    let finalTaxAmount = 0\n    items.forEach(obj => {\n      finalTotal = parseFloat(obj.subTotalAmount) + parseFloat(finalTotal)\n      finalsubTotalAmount = parseFloat(obj.price) + parseFloat(finalsubTotalAmount)\n      finalTaxAmount = parseFloat(finalTaxAmount) + parseFloat(obj.taxPrice)\n    })\n\n    control._formValues.subTotalAmount = finalsubTotalAmount\n    control._formValues.totalAmount = finalTotal\n    control._formValues.dueAmount = finalTotal\n    control._formValues.totalTaxAmount = finalTaxAmount\n\n    setFinalTotal(finalTotal)\n    setFinalSubTotal(finalsubTotalAmount)\n\n    calculateInvoiceTax()\n  }\n\n  const removeItem = ((ind) => {\n    remove(ind)\n    ItemFinalTotalAmount()\n  })\n\n  const loadItemData = (ind, desFlg = false, priceFlg = false, sacFlg = false, taxFlg = false, itemFlg = false) => {\n    const eachObj = control._formValues.rows[ind]\n    if (eachObj.serviceId === undefined || eachObj.serviceId === '') {\n      return false\n    }\n    let service_price, tax_group_id\n    const selectedService = serviceOptions.find((a) => a.id === eachObj.serviceId)\n    setValue(`rows[${ind}].serviceId`, eachObj.serviceId)\n    if (itemFlg) {\n      setValue(`rows[${ind}].sacCode`, selectedService.saccode)\n      service_price = selectedService.sellingprice || 0\n      tax_group_id = selectedService.taxgroupid\n      setValue(`rows[${ind}].actualPrice`, service_price)\n      setValue(`rows[${ind}].price`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    } else {\n      setValue(`rows[${ind}].sacCode`, sacFlg ? eachObj.sacCode : selectedService.saccode)\n      service_price = priceFlg ? eachObj.price : selectedService.sellingprice || 0\n      tax_group_id = taxFlg ? eachObj.taxGroupId : selectedService.taxgroupid\n      setValue(`rows[${ind}].price`, service_price)\n      setValue(`rows[${ind}].actualPrice`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, desFlg ? eachObj.description : selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    }\n\n    let calculateTaxAmount = 0\n    const invoice_item_taxes = []\n\n    const taxGroups = taxGroupOptions.find((a) => a.id === tax_group_id)\n\n    const taxApplicable = taxGroups !== undefined ? !taxGroups.nontaxableflag : selectedService.istaxapplicable\n    setValue(`rows[${ind}].isTaxApplicable`, taxApplicable)\n\n    if (taxApplicable) {\n      if (taxGroups !== undefined) {\n        taxValues.forEach(obj => {\n          if (obj.taxid === tax_group_id) {\n            let temp = 0\n            temp = calculateTax(service_price, obj.percentage, 2)\n            calculateTaxAmount = parseFloat(calculateTaxAmount) + parseFloat(temp)\n            const dataTemp = {}\n            dataTemp[\"taxName\"] = `${obj.name} (${obj.percentage}%)`\n            dataTemp[\"taxId\"] = parseInt(obj.id)\n            dataTemp[\"taxNameValue\"] = obj.name\n            dataTemp[\"taxPercentage\"] = String(obj.percentage)\n            dataTemp[\"taxAmount\"] = String(temp)\n\n            invoice_item_taxes.push(dataTemp)\n          }\n        })\n      }\n    }\n\n    setValue(`rows[${ind}].subTotalAmount`, parseFloat(parseFloat(calculateTaxAmount || 0.00) + parseFloat(service_price || 0.00)).toFixed(2))\n    setValue(`rows[${ind}].taxPrice`, parseFloat(calculateTaxAmount).toFixed(2))\n    setValue(`rows[${ind}].taxes`, JSON.stringify(invoice_item_taxes))\n    setValue(`rows[${ind}].createdBy`, userId)\n\n    ItemFinalTotalAmount()\n\n  }\n\n  const taxvaluefn = () => {\n    let taxtype = 1\n    if (activeOrg.stateid === control._formValues.placeOfSupplyId) {\n      taxtype = 2\n    }\n\n    getTaxValue(taxtype)\n\n  }\n\n  useEffect(() => {\n    if (taxValues.length > 0) {\n      control._formValues.rows.forEach((obj, ind) => {\n        loadItemData(ind, false, false, false, false, false)\n      })\n    }\n  }, [taxValues])\n\n  const bankAccountfn = (id) => {\n    const acc = accountOptions.find((obj) => obj.id === id)\n    setAccDetails(acc)\n    setValue('bankAccountBankName', acc.bankName)\n    setValue('bankAccountBranchName', acc.branchAddress)\n    setValue('bankAccountHolderName', acc.accountHolderName)\n    setValue('bankAccountId', acc.id)\n    setValue('bankAccountIfscCode', acc.ifscCode)\n    setValue('bankAccountNumber', acc.accountNumber)\n  }\n\n  useEffect(() => {\n    if (Object.keys(selectedClient).length > 0) {\n      setValue('billingAddressCity', selectedClient.billingaddresscity || '')\n      setValue('billingAddressLine1', selectedClient.billingaddressline1 || '')\n      setValue('billingAddressLine2', selectedClient.billingaddressline1 || '')\n      setValue('billingAddressState', selectedClient.billingaddressstatesname || '')\n      setValue('billingAddressZipCode', selectedClient.billingaddresszip || '')\n      setValue('billingCurrencyId', selectedClient.currencyid || activeOrg.currencyid)\n      setValue('billingCurrencySymbol', selectedClient.currenciessymbol || '')\n      setValue('billingCurrencyShortName', selectedClient.currenciescode || '')\n      setValue('billingCurrencyName', selectedClient.currenciesname || '')\n      setValue('contactEmail', selectedClient.email)\n      setValue('gstin', selectedClient.gstin)\n      setValue('contactName', selectedClient.name)\n      setValue('placeOfSupplyId', selectedClient.placeofsupplyid)\n      taxvaluefn()\n    }\n\n  }, [selectedClient])\n\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        if (key !== 'rows') {\n          ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n        }\n      })\n    }\n    return ErrorText\n  }\n\n  const renderOrg = name => {\n    const stateNum = Math.floor(Math.random() * 6),\n      states = ['light-success', 'light-danger', 'light-warning', 'light-info', 'light-primary', 'light-secondary'],\n      color = states[stateNum]\n    return <Avatar color={color} className='me-50' content={name !== null ? name.charAt(0) : ''} />\n\n  }\n\n\n  const handleUserChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    setSelEmployees(tempArr)\n\n  }\n\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Row className='invoice-add'>\n          <Fragment>\n            <Col xl={10} md={8} sm={12}>\n\n              <Card className='invoice-preview-card'>\n\n                {/* Header */}\n                <CardBody className='invoice-padding pb-0'>\n                  {\n                    renderError()\n                  }\n                  <div className='d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0'>\n                    <div>\n                      <div className='logo-wrapper'>\n                        {renderOrg(activeOrg.name)}\n                      </div>\n                      <h3 className='text-primary invoice-logo'>{activeOrg.name}</h3>\n                      <p className='card-text mb-25'>{activeOrg.addressline1}</p>\n                      <p className='card-text mb-25'>{activeOrg.addressline2}</p>\n                      <p className='card-text mb-0'>{activeOrg.organizationcity} - {activeOrg.pinzipcode}</p>\n                      <p className='card-text mb-0'>{activeOrg.statename}</p>\n                    </div>\n                    <div className='invoice-number-date mt-md-0 mt-2'>\n                      <div className='d-flex align-items-center justify-content-md-end mb-1'>\n                        <h4 className='invoice-title'>Invoice</h4>\n                        <InputGroup className='input-group-merge invoice-edit-input-group disabled'>\n                          <InputGroupText>\n                            <Hash size={15} />\n                          </InputGroupText>\n                          <Input\n                            type='number'\n                            className='invoice-edit-input'\n                            value={3171}\n                            placeholder='53634'\n                            disabled\n                          />\n                        </InputGroup>\n                      </div>\n                      <div className='d-flex align-items-center mb-1'>\n                        <span className='title required'>Invoice Date</span>\n                        <Controller\n                          control={control}\n                          name={`invoiceDate`}\n                          id='invoiceDate'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"M j, Y\", dateFormat: \"U\" }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                      <div className='d-flex align-items-center'>\n                        <span className='title required'>Due Date</span>\n                        <Controller\n                          control={control}\n                          name={`paymentDue`}\n                          id='paymentDue'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"M j, Y\", dateFormat: \"U\" }}\n                              className='form-control invoice-edit-input due-date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardBody>\n                {/* /Header */}\n\n                <hr className='invoice-spacing' />\n\n                {/* Address and Contact */}\n                <CardBody className='invoice-padding pt-0'>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title required'>Invoice To</h6>\n                      <div className='invoice-customer'>\n                        <Controller\n                          control={control}\n                          name={`contactId`}\n                          id={`contactId`}\n                          render={({ field, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors['contactId'] })}\n                              {...field}\n                              classNamePrefix='select'\n                              options={clientOptions}\n                              value={clientOptions.find(c => { return c.id === field.value })}\n                              onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                      </div>\n                      <Col className='pe-0 mt-xl-2' xl='4'>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td>{selectedClient.billingaddressline1}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressline2}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddresscity} {selectedClient.billingaddresszip && `-`}  {selectedClient.billingaddresszip}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressstatesname}</td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </Col>\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                    <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                      <h6 className='mb-2'>Payment Details:</h6>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td className='pe-1'>Bank Name:</td>\n                            <td>\n                              {accDetails.bankName && <span className='fw-bolder'>{accDetails.bankName}</span>}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account name:</td>\n                            <td>{accDetails.accountHolderName && <span className='fw-bolder'>{accDetails.accountHolderName}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Branch Name:</td>\n                            <td> {accDetails.branchAddress && <span className='fw-bolder'>{accDetails.branchAddress}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>IFSC Code:</td>\n                            <td>{accDetails.ifscCode && <span className='fw-bolder'>{accDetails.ifscCode} </span>}</td>\n                          </tr>\n                          {selectedClient.currenciescode &&\n                            <tr>\n                              <td className='pe-1'>Currency code:</td>\n                              <td>{selectedClient.currenciescode}</td>\n                            </tr>\n                          }\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title mt-2 required'>Place Of Supply</h6>\n                      <div className='invoice-customer'>\n                        <Controller\n                          control={control}\n                          name={`placeOfSupplyId`}\n                          id={`placeOfSupplyId`}\n                          render={({ field, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors['placeOfSupplyId'] })}\n                              {...field}\n                              classNamePrefix='select'\n                              options={stateOptions}\n                              value={stateOptions.find(c => { return c.id === field.value })}\n                              onChange={val => { field.onChange(val.id); taxvaluefn() }}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                      </div>\n                      {(selectedClient.gstin !== '' && selectedClient.gstin !== undefined) && <div className='mt-1'> GSTIN : {selectedClient.gstin}</div>}\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                    <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td className='pe-1'>RCM Applicable:</td>\n                            <td>\n                              <div className='form-switch form-check-success'>\n                                <Controller\n                                  control={control}\n                                  name={`isRcmApplicable`}\n                                  id='isRcmApplicable'\n                                  render={({ }) => (\n                                    <Input type='switch' id='switch-success' onChange={(e) => { setisRCMapplicable(!isRCMapplicable); setValue('isRcmApplicable', e.target.checked) }} />\n                                  )}\n                                />\n                              </div></td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Address and Contact */}\n\n                {/* Product Details */}\n                <CardBody className='invoice-padding invoice-product-details'>\n                  {fields.map((item, index) => {\n                    return (\n                      <div key={item.id} className='repeater-wrapper'>\n                        <Row>\n                          <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                            <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                              <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                                <Controller\n                                  control={control}\n                                  name={`rows[${index}].serviceId`}\n                                  rules={{ required: true }}\n                                  render={({ field, ref }) => (\n                                    <Select\n                                      {...field}\n                                      inputRef={ref}\n                                      className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.serviceId })}\n                                      classNamePrefix='select'\n                                      options={serviceOptions}\n                                      value={serviceOptions.find(c => c.id === field.value)}\n                                      onChange={val => { field.onChange(val.id); loadItemData(index, false, false, false, false, true) }}\n                                      getOptionLabel={(option) => option.name}\n                                      getOptionValue={(option) => option.id}\n                                    />\n                                  )}\n                                />\n                                {errors.rows?.[index]?.serviceId && <FormFeedback>{errors.rows?.[index]?.serviceId.message}</FormFeedback>}\n                                <Controller\n                                  id={`rows_${index}_description`}\n                                  name={`rows[${index}].description`}\n                                  control={control}\n                                  render={({ field }) => <Input className='mt-1' invalid={errors.rows?.[index]?.description && true} onInput={(val) => { field.onChange(val); loadItemData(index, true, false, false, false, false) }} {...field} />}\n                                />\n                              </Col>\n                              <Col className='my-lg-0 my-2 col-lg-2 col-sm-12'>\n                                <CardText className='col-title mb-md-2 mb-0'>SAC Code</CardText>\n                                <Controller\n                                  id={`rows_${index}_sacCode`}\n                                  name={`rows[${index}].sacCode`}\n                                  control={control}\n                                  render={({ field }) => <Input type='text' invalid={errors.rows?.[index]?.sacCode && true} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, true, false, false) }} {...field} />}\n                                />\n                                {errors.rows?.[index]?.sacCode && <FormFeedback>{errors.rows?.[index]?.sacCode.message}</FormFeedback>}\n                              </Col>\n                              <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                                <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                                <Controller\n                                  id={`rows_${index}_price`}\n                                  name={`rows[${index}].price`}\n                                  control={control}\n                                  render={({ field }) => <Input type='number' id={`input_rows_${index}_price`} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, false, false, false) }} {...field} invalid={errors.rows?.[index]?.price && true} />}\n                                />\n                                {errors.rows?.[index]?.price && <FormFeedback>{errors.rows?.[index]?.price.message}</FormFeedback>}\n                              </Col>\n                              <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Tax Rate</CardText>\n                                <Controller\n                                  control={control}\n                                  name={`rows[${index}].taxGroupId`}\n                                  rules={{ required: true }}\n                                  render={({ field, ref }) => (\n                                    <Select\n                                      {...field}\n                                      inputRef={ref}\n                                      className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                      classNamePrefix='select'\n                                      options={taxGroupOptions}\n                                      value={taxGroupOptions.find(c => c.id === field.value)}\n                                      onChange={(val) => { field.onChange(val.id); loadItemData(index, false, true, false, true, false) }}\n                                      getOptionLabel={(option) => option.name}\n                                      getOptionValue={(option) => option.id}\n                                    />\n                                  )}\n                                />\n                                {errors.rows?.[index]?.taxGroupId && <FormFeedback>{errors.rows?.[index]?.taxGroupId.message}</FormFeedback>}\n\n                                {\n                                  !item.isTaxApplicable && <Controller\n                                    control={control}\n                                    name={`rows[${index}].exemptionReasonId`}\n                                    rules={{ required: true }}\n                                    render={({ field, ref }) => (\n                                      <Select\n                                        {...field}\n                                        inputRef={ref}\n                                        className={classnames('react-select mt-1', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                        classNamePrefix='select'\n                                        options={exemptionReasonOptions}\n                                        value={exemptionReasonOptions.find(c => c.id === field.value)}\n                                        onChange={(val) => { field.onChange(val.id) }}\n                                        getOptionLabel={(option) => option.name}\n                                        getOptionValue={(option) => option.id}\n                                      />\n                                    )}\n                                  />\n                                }\n\n                              </Col>\n                              <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                                {control._formValues.rows[index].subTotalAmount}\n                              </Col>\n                            </Row>\n                            <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                              <X size={18} className='cursor-pointer' onClick={() => { removeItem(index) }} />\n                            </div>\n                          </Col>\n                        </Row>\n                      </div>\n                    )\n                  })}\n                  <Row className='mt-1'>\n                    <Col sm='12' className='px-0'>\n                      <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                        <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                      </Button>\n                    </Col>\n                  </Row>\n                </CardBody>\n\n                {/* /Product Details */}\n\n                {/* Invoice Total */}\n                <CardBody className='invoice-padding'>\n                  <Row className='invoice-sales-total-wrapper'>\n                    <Col className='mt-md-0 mt-3' md={{ size: '6', order: 1 }} xs={{ size: 12, order: 2 }}>\n\n                    </Col>\n                    <Col className='d-flex justify-content-end' md={{ size: '6', order: 2 }} xs={{ size: 12, order: 1 }}>\n                      <div className='invoice-total-wrapper'>\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Pre Tax Amount:</p>\n                          <p className='invoice-total-amount'>{finalSubTotal}</p>\n                        </div>\n                        {!isRCMapplicable && <div>\n                          {\n                            invoiceTaxes.map((obj, ind) => {\n                              return (<div key={ind} className='invoice-total-item'>\n                                <p className='invoice-total-title'>{obj?.taxName}</p>\n                                <p className='invoice-total-amount'>{obj?.taxAmount}</p>\n                              </div>)\n                            })\n                          }\n                        </div>\n                        }\n                        <hr className='my-50' />\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Total Payable:</p>\n                          <p className='invoice-total-amount'>{finalTotal}</p>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Total */}\n\n                <hr className='invoice-spacing mt-0' />\n\n                {/* Invoice Note */}\n                <CardBody className='invoice-padding py-0'>\n                  <Row>\n                    <Col>\n                      <div className='mb-2'>\n                        <Label for='note' className='form-label fw-bold'>\n                          Note:\n                        </Label>\n                        <Controller\n                          id='note'\n                          name='note'\n                          control={control}\n                          render={({ field }) => <Input type=\"textarea\" value={field.value} invalid={errors.note && true} {...field} />}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Note */}\n              </Card>\n\n            </Col>\n            <Col xl={2} md={4} sm={12}>\n              <Card className='invoice-action-wrapper'>\n                <CardBody>\n                  <Button color='primary' type='submit' block outline className='mb-75'>\n                    Save\n                  </Button>\n                  <Button color='warning' block outline tag={Link} to='/invoice/list'>\n                    Cancel\n                  </Button>\n                </CardBody>\n              </Card>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50 required'>Accept payments via</p>\n                  <Controller\n                    control={control}\n                    name={`bankAccountId`}\n                    rules={{ required: true }}\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select mt-1', { 'is-invalid': errors.bankAccountId })}\n                        classNamePrefix='select'\n                        options={accountOptions}\n                        value={accountOptions.find(c => c.id === field.value)}\n                        onChange={(val) => { field.onChange(val.id); bankAccountfn(val.id) }}\n                        getOptionLabel={(option) => option.accountHolderName}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50'>Select Employee</p>\n\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleUserChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        styles={colourStyles}\n                      />\n                    )}\n\n                  />\n                </div>\n              </div>\n            </Col>\n          </Fragment >\n        </Row>\n      </form >\n    </UILoader>\n\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst InvoiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <AddCard />\n    </div>\n  )\n}\n\nexport default InvoiceAdd\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","export const calculateTax = (amount, taxRateInPercentage, TaxType) => {\n    let calculatedTax = 0\n    if (TaxType === 1) { //Inclusive\n        calculatedTax = parseFloat(amount) - (parseFloat(amount) * (100 / (100 + parseFloat(taxRateInPercentage))))\n        // calculatedTax = parseFloat(amount) - parseFloat(calculatedTax);\n\n    } else if (TaxType === 2) { //Exclusive\n        calculatedTax = (parseFloat(amount) * parseFloat(taxRateInPercentage)) / 100\n    }\n    return parseFloat(calculatedTax)\n}\n\nexport const parser = (str) => {\n\n    return JSON.parse(str.replace(/\\\\/g, ''))\n\n}"],"sourceRoot":""}