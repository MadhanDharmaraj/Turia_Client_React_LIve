{"version":3,"sources":["views/apps/recurring-task/edit/EditCard.js","views/apps/recurring-task/edit/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/apps/recurring-task/store/index.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","EditCard","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","id","useParams","inputRef","useRef","navigate","useNavigate","date","setDate","schema","yup","shape","updatedBy","default","clientId","required","serviceId","assignee","min","reviewer","recurringFlag","duration","clientAccessFlag","organizationId","taskStatus","invoiceId","startDate","endDate","priority","invoiceFlag","store","useSelector","state","task","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","reset","setValue","priorityOptions","name","durationOptions","assigneeUserOptions","setAssigneeUserOptions","reviewerUserOptions","setReviewerUserOptions","assigneeDefaultValue","setAssigneeDefaultValue","reviewerDefaultValue","setReviewerDefaultValue","taskDescription","setTaskDescription","taskDescriptionObj","setTaskDescriptionObj","descriptionFlag","setDescriptionFlag","dispatch","useDispatch","clientOptions","setClientOptions","serviceOptions","setServiceOptions","userOptions","setUserOptions","setinvoiceFlag","taskParticipants","seTaskParticipants","useEffect","taskId","arr","map","obj","addTaskParticipants","rows","comment","createdBy","attachmentIds","undefined","isDefault","addDescription","updateDescription","formatparticipants","user","type","onSubmit","data","tempParticipants","forEach","push","updateTask","getOrganizationUsers","axios","post","status","then","response","organizationusers","catch","err","console","log","clients","services","handleAssigneeChange","e","reviewerOptions","tempArr","Array","isArray","x","length","filter","id1","some","id2","handleReviwerChange","assigneeOptions","selectedTask","clientid","serviceid","taskstatus","invoiceid","parseInt","recurringid","recurringstartdate","String","recurringenddate","invoiceflag","getTask","res","taskconversation","blocking","loader","className","Object","keys","k","message","sm","size","for","render","field","ref","classnames","classNamePrefix","options","value","find","c","onChange","val","getClientData","getOptionLabel","option","getOptionValue","invalid","description","onInput","target","defaultValue","replace","multiple","event","files","outline","color","onClick","current","click","isMulti","rules","dateFormat","minDate","dateStr","altInput","altFormat","checked","tag","Link","to","TaskEdit","xl","md","UILoader","props","children","overlayColor","Tag","style","defaultProps","ComponentSpinner","getData","createAsyncThunk","params","tasks","totalPages","total","getClient","addTask","taskparticpants","updateInvocieId","taskworkflows","deleteTask","getState","taskconversations","cloneWorkFlows","exportTask","ws","XLSX","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","bookType","Blob","FileSaver","createSlice","initialState","allData","editflag","reducers","extraReducers","builder","addCase","fulfilled","action","payload"],"mappings":"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","file":"static/js/55.77714479.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect, useRef, Fragment } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\n// ** Custom Components\nimport classnames from 'classnames'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus } from 'react-feather'\nimport Select, { components } from 'react-select'\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\nimport { getTask, updateTask, addTaskParticipants, addDescription, updateDescription } from '../store'\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, FormFeedback, Input, CardHeader } from 'reactstrap'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n\nconst EditCard = () => {\n  // ** States\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n  const { id } = useParams()\n  const inputRef = useRef(null)\n  const navigate = useNavigate()\n  const [setOpen] = useState(false)\n  const [date, setDate] = useState(\"\")\n\n  const schema = yup.object().shape({\n    updatedBy: yup.string().default(userId),\n    id: yup.string().default(id),\n    clientId: yup.string().required(\"Please select a Client\"),\n    serviceId: yup.string().required(\"Please select a Service\"),\n    assignee: yup.array().min(1, \"Please select Assignee\"),\n    reviewer: yup.array(),\n    recurringFlag : yup.boolean().default(true),\n    duration: yup.number().required(),\n    clientAccessFlag: yup.boolean().default(false),\n    organizationId: yup.string().default(activeOrgId),\n    taskStatus: yup.number().default(1),\n    invoiceId: yup.string().default(''),\n    startDate: yup.string().required('Please Select Start Date'),\n    endDate: yup.string().required('Please Select End Date'),\n    priority: yup.string().required(\"Please select a Priority\"),\n    invoiceFlag: yup.boolean().default(false)\n  })\n  const store = useSelector(state => state.task)\n\n  const { handleSubmit, formState: { errors }, control, reset, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const priorityOptions = [\n    { id: 1, name: \"Low\" },\n    { id: 2, name: \"Medium\" },\n    { id: 3, name: \"High\" }\n  ]\n\n  const durationOptions = [\n    { id: 1, name: \"Monthly\" },\n    { id: 2, name: \"Yearly\" }\n  ]\n  const [assigneeUserOptions, setAssigneeUserOptions] = useState([])\n  const [reviewerUserOptions, setReviewerUserOptions] = useState([])\n  const [assigneeDefaultValue, setAssigneeDefaultValue] = useState()\n  const [reviewerDefaultValue, setReviewerDefaultValue] = useState()\n\n  const [taskDescription, setTaskDescription] = useState('')\n  const [taskDescriptionObj, setTaskDescriptionObj] = useState({})\n  const [descriptionFlag, setDescriptionFlag] = useState(false)\n\n  const dispatch = useDispatch()\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [userOptions, setUserOptions] = useState([])\n\n  const [invoiceFlag, setinvoiceFlag] = useState(false)\n  const [taskParticipants, seTaskParticipants] = useState([])\n\n  useEffect(async () => {\n    if (store.taskId !== null) {\n      const arr = taskParticipants.map((obj) => {\n        return { ...obj, taskId: store.taskId }\n      })\n      await dispatch(addTaskParticipants({ rows: arr }))\n\n      if (taskDescription !== '') {\n        const comment = {\n          comment: taskDescription,\n          taskId: store.taskId,\n          createdBy: userId,\n          updatedBy: userId,\n          organizationId: activeOrgId,\n          attachmentIds: [],\n          id: taskDescriptionObj === undefined ? '' : taskDescriptionObj.id,\n          isDefault: true\n        }\n        if (!descriptionFlag) {\n          await dispatch(addDescription(comment))\n        } else {\n          await dispatch(updateDescription(comment))\n        }\n\n      }\n\n      const id = store.taskId\n      navigate(`/recurring-task/view/${id}`)\n\n    }\n  }, [store.taskId])\n\n  const formatparticipants = (user, type) => {\n    const obj = {\n      organizationId: activeOrgId,\n      userId: user,\n      type,\n      createdBy: userId\n    }\n    return obj\n  }\n\n  const onSubmit = async data => {\n    setBlock(true)\n    const tempParticipants = []\n    data.assignee.forEach((user) => {\n      tempParticipants.push(formatparticipants(user, 1))\n    })\n\n    if (data.reviewer !== undefined) {\n      data.reviewer.forEach((user) => {\n        tempParticipants.push(formatparticipants(user, 2))\n      })\n    }\n\n    seTaskParticipants(tempParticipants)\n    delete data.assignee\n    delete data.reviewer\n\n    await dispatch(updateTask(data))\n  }\n\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setReviewerUserOptions(arr.organizationusers)\n      setAssigneeUserOptions(arr.organizationusers)\n      setUserOptions(arr.organizationusers)\n    }).catch((err) => {\n      console.log(err)\n    })\n\n  }\n\n  const enableInvoice = () => {\n    setinvoiceFlag(!invoiceFlag)\n  }\n\n  useEffect(() => {\n    getClients()\n    getServices()\n    getOrganizationUsers()\n  }, [])\n\n  // handle onChange event of the dropdown\n  const handleAssigneeChange = (e) => {\n    setAssigneeDefaultValue(e)\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let reviewerOptions\n    if (tempArr.length > 0) {\n      reviewerOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { reviewerOptions = userOptions }\n\n    setReviewerUserOptions(reviewerOptions)\n    setValue(\"assignee\", tempArr)\n  }\n\n  const handleReviwerChange = (e) => {\n    setReviewerDefaultValue(e)\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let assigneeOptions\n    if (tempArr.length > 0) {\n      assigneeOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { assigneeOptions = userOptions }\n\n    setAssigneeUserOptions(assigneeOptions)\n    setValue(\"reviewer\", tempArr)\n  }\n\n  const changeHandler = (event) => {\n    console.log(event.target.files)\n  }\n\n  const getDescription = () => {\n    axios.post('/taskconversations/description', { taskId: id })\n      .then((res) => {\n        setTaskDescriptionObj(res.data.taskconversation)\n        setTaskDescription(res.data.taskconversation === undefined ? '' : res.data.taskconversation.comment)\n        if (res.data.taskconversation !== undefined) {\n          setDescriptionFlag(true)\n        }\n      }).catch((err) => {\n        console.log(err)\n      })\n  }\n\n  // const handleSubmission = () => {\n  //   const formData = new FormData()\n\n  //     // Update the formData object\n  //     formData.append(\n  //       \"myFile\",\n  //       selectedFile,\n  //       selectedFile.name\n  //     )\n\n  //     // Details of the uploaded file\n  //     console.log(selectedFile)\n  // }\n\n  useEffect(async () => {\n    if (store.selectedTask !== null) {\n      reset({\n        updatedBy: userId,\n        clientId: store.selectedTask.clientid,\n        serviceId: store.selectedTask.serviceid,\n        clientAccessFlag: false,\n        organizationId: activeOrgId,\n        taskStatus: store.selectedTask.taskstatus,\n        invoiceId: store.selectedTask.invoiceid || '',\n        duration: parseInt(store.selectedTask.recurringid),\n        startDate: store.selectedTask.recurringstartdate.length === 13 ? String(store.selectedTask.recurringstartdate / 1000) : store.selectedTask.recurringstartdate,\n        endDate: store.selectedTask.recurringenddate.length === 13 ? String(store.selectedTask.recurringenddate / 1000) : store.selectedTask.recurringenddate,\n        priority: parseInt(store.selectedTask.priority),\n        invoiceFlag: store.selectedTask.invoiceflag\n      })\n\n      setinvoiceFlag(store.selectedTask.invoiceflag)\n\n      handleAssigneeChange(store.selectedTask.assignee)\n      handleReviwerChange(store.selectedTask.reviewer)\n    }\n  }, [store.selectedTask])\n\n  useEffect(async () => {\n    if (id !== undefined) {\n      await dispatch(getTask(id))\n      getDescription()\n    }\n  }, [id])\n\n  // ** Custom Options Component\n  const OptionComponent = ({ data, ...props }) => {\n    if (data.type === 'button') {\n      return (\n        <Button className='text-start rounded-0 px-50' color={data.color} block onClick={() => setOpen(true)}>\n          <Plus className='font-medium-1 me-50' />\n          <span className='align-middle'>{data.label}</span>\n        </Button>\n      )\n    } else {\n      return <components.Option {...props}> {data.label} </components.Option>\n    }\n  }\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Card className='invoice-preview-card'>\n          {Object.keys(errors).map((obj, k) => {\n            return <FormFeedback key={k}> {errors[obj]?.message}</FormFeedback>\n          })}\n          <CardHeader>Edit Task</CardHeader>\n          {/* Header */}\n          <CardBody className='pb-2 px-2'>\n            <Row>\n              <div className='col-lg-6 col-sm-12'>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='clientId'>\n                    Client\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"clientId\"\n                      id=\"clientId\"\n                      render={({ field, ref }) => (\n                        <Select\n                          {...field}\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.clientId })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={clientOptions}\n                          value={clientOptions.find(c => { return c.id === field.value })}\n                          onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n\n                    />\n                    {errors.clientId && <FormFeedback className='text-danger'>{errors.clientId?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='serviceId'>\n                    Service\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"serviceId\"\n                      id=\"serviceId\"\n                      render={({ field, ref }) => (\n                        <Select\n                          {...field}\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.serviceId })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={serviceOptions}\n                          value={serviceOptions.find(c => { return c.id === field.value })}\n                          onChange={val => field.onChange(val.id)}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n\n                    />\n                    {errors.serviceId && <FormFeedback className='text-danger'>{errors.serviceId?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='description'>\n                    Description\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      id='description'\n                      name='description'\n                      control={control}\n                      render={({ field }) => <Input type=\"textarea\" invalid={errors.description && true} onInput={(e) => { setTaskDescription(e.target.value) }} {...field} defaultValue={taskDescription.replace(/(\\\\n)/g, \"\\n\")} />}\n                    />\n                    {errors.description && <FormFeedback>{errors.description.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='my-2'>\n                  <Col>\n                    <div className='d-lg-flex'>\n                      <input type='file' className='hidden' multiple onChange={changeHandler} ref={inputRef} />\n                      <Button type='button' outline color='primary' onClick={() => inputRef.current.click()}>\n                        <Plus size={14} className='me-25'></Plus> Add Attachment</Button>\n                    </div>\n                  </Col>\n                </Row>\n              </div>\n              <div className='col-lg-6 col-sm-12'>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='assignee'>\n                    Assignee\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"assignee\"\n                      id=\"assignee\"\n                      render={({ field, ref }) => (\n                        <Select\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.assignee })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={assigneeUserOptions}\n                          isMulti={true}\n                          value={assigneeDefaultValue} // set selected values\n                          onChange={handleAssigneeChange}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                          styles={colourStyles}\n                        />\n                      )}\n\n                    />\n                    {errors.assignee && <FormFeedback className='text-danger'>{errors.assignee?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='reviewer'>\n                    Reviewer\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"reviewer\"\n                      id=\"reviewer\"\n                      render={({ field, ref }) => (\n                        <Select\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={reviewerUserOptions}\n                          isMulti={true}\n                          value={reviewerDefaultValue} // set selected values\n                          onChange={handleReviwerChange}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                          styles={colourStyles}\n                        />\n                      )}\n\n                    />\n                    {errors.reviewer && <FormFeedback className='text-danger'>{errors.reviewer?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='priority'>\n                    Priority\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"priority\"\n                      id=\"priority\"\n                      render={({ field, ref }) => (\n                        <Select\n                          {...field}\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.priority })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={priorityOptions}\n                          value={priorityOptions.find(c => { return c.id === field.value })}\n                          onChange={val => field.onChange(val.id)}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n\n                    />\n                    {errors.priority && <FormFeedback className='text-danger'>{errors.priority?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='duration'>\n                    Duration\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"duration\"\n                      id=\"duration\"\n                      render={({ field, ref }) => (\n                        <Select\n                          {...field}\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.duration })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={durationOptions}\n                          value={durationOptions.find(c => { return c.id === field.value })}\n                          onChange={val => field.onChange(val.id)}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n\n                    />\n                    {errors.duration && <FormFeedback className='text-danger'>{errors.duration?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='startDate'>\n                    Start Date\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      value={date}\n                      name=\"startDate\"\n                      control={control}\n                      rules={{ required: true }}\n                      options={{ dateFormat: \"d-m-Y\" }}\n                      render={({ field }) => (\n                        <Flatpickr\n                          value={field.value}\n                          minDate='today'\n                          onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                          options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                          className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.startDate })} />\n                      )}\n                    />\n                    {errors.startDate && <FormFeedback className='text-danger'>{errors.startDate?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='endDate'>\n                    End Date\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      value={date}\n                      onChange={date => setDate(date)}\n                      name=\"endDate\"\n                      control={control}\n                      rules={{ required: true }}\n                      options={{ dateFormat: \"d-m-Y\" }}\n                      render={({ field }) => (\n                        <Flatpickr\n                          min='today'\n                          value={field.value}\n                          onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                          options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                          className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.endDate })} />\n                      )}\n                    />\n\n                    {errors.endDate && <FormFeedback className='text-danger'>{errors.endDate?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n              </div>\n            </Row>\n          </CardBody>\n          <hr className='invoice-spacing' />\n          <Row className='px-1 pb-2'>\n            <div className='form-check form-check-primary mx-2'>\n              <Controller\n                control={control}\n                name={`invoiceFlag`}\n                rules={{ required: true }}\n                render={({ field }) => (\n                  <Input className='form-check-input' type='checkbox' id='invoice_flag' value={field.value} {...field} onChange={(val) => { field.onChange(val); enableInvoice() }} checked={invoiceFlag} />\n                )}\n              />\n              <Label className='form-check-label' for='invoice_flag'>\n                Create Proposal for this Task\n              </Label>\n            </div>\n          </Row>\n        </Card>\n        <Card>\n          <CardBody>\n            <div className='modal-footer border-0'>\n              <Button className='add-new-user' outline color='warning' tag={Link} to={`/recurring-task/view/${id}`}>\n                Cancel\n              </Button>\n              <Button color='primary' type=\"submit\" >\n                Save\n              </Button>\n            </div>\n          </CardBody>\n        </Card>\n      </form >\n    </UILoader>\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst TaskEdit = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default TaskEdit\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport * as FileSaver from \"file-saver\"\nimport * as XLSX from \"xlsx\"\n// ** Axios Imports\nimport axios from '@src/configs/axios/axiosConfig'\nimport { orgUserId } from '@src/helper/sassHelper'\nconst userId = orgUserId()\n\nexport const getData = createAsyncThunk('appTasks/getData', async params => {\n  const response = await axios.post('/tasks/list', params)\n  return {\n    params,\n    data: response.data.tasks.tasks,\n    totalPages: response.data.tasks.total\n  }\n})\n\nexport const getClient = createAsyncThunk('appTasks/getClient', async id => {\n  const response = await axios.post('/clients/get', { id })\n  return response.data.clients\n})\n\nexport const getTask = createAsyncThunk('appTasks/getTask', async id => {\n  const response = await axios.post('/tasks/recurringtaskget', { id })\n  return response.data.task\n})\n\nexport const addTask = createAsyncThunk('appTasks/addTask', async (task, { }) => {\n  const response = await axios.post('/tasks/create', task)\n  return response.data.task\n})\n\nexport const addTaskParticipants = createAsyncThunk('appTasks/addTaskParticipants', async (taskparticpants, { }) => {\n  await axios.post('/taskparticpants/create', taskparticpants)\n  return []\n})\n\nexport const addTaskWorkflow = createAsyncThunk('appTasks/addTaskWorkflow', async (taskworkflows, { }) => {\n  await axios.post('/recurring-taskworkflows/create', taskworkflows)\n  return []\n})\n\nexport const updateInvocieId = createAsyncThunk('appTasks/updateInvocieId', async (data, { }) => {\n  await axios.post('/tasks/updateinvocieid', data)\n  return response.data.task\n})\n\nexport const updateTask = createAsyncThunk('appTasks/updateTask', async (task, { }) => {\n  const response = await axios.post('/tasks/update', task)\n  return response.data.task\n})\n\nexport const deleteTask = createAsyncThunk('appTasks/deleteTask', async (id, { dispatch, getState }) => {\n  await axios.post('/tasks/delete', { id, updatedBy :userId })\n  await dispatch(getData(getState().tasks.params))\n  return id\n})\n\nexport const addDescription = createAsyncThunk('appTasks/addDescription', async (data, { }) => {\n  const res = await axios.post('/taskconversations/create', data)\n  return res.data.taskconversations\n})\n\nexport const updateDescription = createAsyncThunk('appTasks/addDescription', async (data, { }) => {\n  const res = await axios.post('/taskconversations/update', data)\n  return res.data.taskconversations\n})\n\nexport const cloneWorkFlows = createAsyncThunk('appTasks/cloneWorkFlows', async (data, { }) => {\n  const res = await axios.post('/taskworkflows/clone', data)\n  return res.data.taskworkflows\n})\n\nexport const exportTask = createAsyncThunk('appTasks/exportTask', async params => {\n  const response = await axios.post(`/tasks/exportToExcel`, params)\n\n  const ws = XLSX.utils.json_to_sheet(response.data.tasks)\n  const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] }\n  const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" })\n  const data = new Blob([excelBuffer], { type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\" })\n  FileSaver.saveAs(data, 'recurring_task.xlsx')\n\n})\n\nexport const appTasksSlice = createSlice({\n  name: 'appTasks',\n  initialState: {\n    data: [],\n    total: 1,\n    params: {},\n    allData: [],\n    selectedTask: null,\n    taskId: null,\n    editflag : true\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getData.fulfilled, (state, action) => {\n        state.data = action.payload.data\n        state.params = action.payload.params\n        state.total = action.payload.totalPages\n        state.selectedTask = null\n      })\n      .addCase(getTask.fulfilled, (state, action) => {\n        state.selectedTask = action.payload\n        state.taskId = null\n      })\n      .addCase(addTask.fulfilled, (state, action) => {\n        state.taskId = action.payload\n      })\n      .addCase(updateTask.fulfilled, (state, action) => {\n        state.taskId = action.payload\n      })\n  }\n})\n\nexport default appTasksSlice.reducer\n"],"sourceRoot":""}