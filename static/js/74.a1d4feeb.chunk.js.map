{"version":3,"sources":["views/apps/task/view/Conversation.js","views/apps/task/view/CheckList.js","views/apps/task/view/TimeSheet.js","views/apps/task/view/Templates.js","views/apps/task/view/UserInfoCard.js","views/apps/task/view/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","MySwal","withReactContent","Swal","Templates","props","tabId","useState","block","setBlock","Loader","dispatch","useDispatch","id","useParams","filesArr","setFilesArr","files","setFiles","data","setData","attachmentIds","setAttachmentsId","comment","setComment","editcomment","setEditComment","fileUploadProgress","setProgress","store","useSelector","state","taskconversation","editNote","k","temp","map","obj","i","editFlag","configUpload","headers","onUploadProgress","Math","round","loaded","total","useDropzone","multiple","onDrop","acceptedFiles","rejectedFiles","length","toast","error","getRootProps","getInputProps","useEffect","formData","FormData","forEach","file","key","append","axios","post","then","res","attachment_ids","catch","position","uploadFiles","saveNote","updateTaskConversation","success","getTaskConversation","postComment","organizationId","createdBy","updatedBy","taskId","addTaskConversation","fileList","index","className","name","size","toFixed","color","outline","onClick","filtered","filter","handleRemoveFile","blocking","loader","for","type","rows","placeholder","value","onInput","e","target","item","row","initials","content","username","charAt","replace","md","width","height","src","driveid","alt","href","originalfilename","split","substr","extension","val","createdon","moment","format","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","deleteTaskConversation","deletefn","roes","CheckList","getChecklists","checklists","payload","dropdownStyle","left","top","updateStatus","sts","status","err","console","log","handlchecklist","CommentBox","workflowId","domInputRef","useRef","description","setDescription","contentEditable","ref","currentTarget","textContent","current","innerText","submitComment","tag","ind","undefined","progressstatus","style","comments","unix","dangerouslySetInnerHTML","__html","taskcomments","renderComments","paymentstatusObj","code","renderStatus","find","o","parseInt","dateFormat","dateFormatOnly","columns","cell","starttime","endtime","decimalTime","hours","minutes","totalhours","totalhoursmin","parseFloat","floor","isNaN","hoursFormat","selector","amount","UserProjectsList","selectedTask","dataArr","formModal1","setFormModal1","invoices","setInvoices","invoice","setInvoice","invoiceId","setInvoiceId","getTimeSheetList","timeSheetList","getLinkedInvoice","taskinvoices","invoiceid","noHeader","responsive","sortIcon","clientid","serviceid","to","uniqueno","invoicedate","paymentstatus","totalamount","colSpan","profit","fullscreen","isOpen","toggle","Link","onChange","contactname","contactemail","taskinvoiceitemsservicename","dueamount","templates","getServiceTemplates","activeOrg","activeOrganization","priorityColors","priorityArr","UserInfoCard","active","setActive","popoverOpen","setPopoverOpen","timerFlag","setTimerFlag","hourlyRate","setHourlyRate","taskDescription","setTaskDescription","activeStatus","setActiveStatus","assigneeStatus","setAssigneeSts","reviewerStatus","setReviewerSts","task","toggleTab","tab","startTaskTimer","startTime","existStatus","taskstatus","startTimer","localStorage","setItem","JSON","stringify","stopTaskTimer","parse","getItem","end","start","toDate","end_timestamp","duration","diff","asHours","endTime","endTimer","removeItem","updateTaskStatus","updateStatusRefresh","organizationusers","hourlyrate","reviewerIndex","reviewer","findIndex","organizationusersusertypeid","reviewerSts","assigneeIndex","assignee","assigneeSts","selectedTaskTimer","taskComplete","taskReview","bordered","clientname","servicename","timesheetFlag","disabled","Ripple","document","getElementById","placement","cols","defaultChecked","Can","I","a","uniqueidentity","priority","userlists","user","pill","rowSpan","startdate","enddate","invoiceflag","pills","activeTab","Conversation","TimeSheet","TaskView","getTask","xl","lg","UILoader","children","overlayColor","Tag","classnames","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/74.a1d4feeb.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\nimport toast from 'react-hot-toast'\nimport { useDropzone } from 'react-dropzone'\nimport axios from '@src/configs/axios/axiosConfig'\n// ** Reactstrap Imports\nimport {\n  Card,\n  Input,\n  Button,\n  CardBody,\n  Label,\n  ListGroup,\n  ListGroupItem,\n  Col,\n  Row,\n  Progress\n} from 'reactstrap'\n\n// ** Third Party Components\nimport 'cleave.js/dist/addons/cleave-phone.us'\nimport { X, Paperclip, File } from 'react-feather'\nimport Avatar from '@src/@core/components/avatar'\nimport { getTaskConversation, addTaskConversation, deleteTaskConversation, updateTaskConversation } from '../store/taskconversation'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport moment from 'moment'\nimport { useParams } from 'react-router-dom'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\nconst MySwal = withReactContent(Swal)\n// ** Images\nconst Templates = props => {\n  // ** Hook\n  const { tabId } = props\n\n  const renderClient = row => {\n\n    return (\n      <Avatar\n        initials\n        className='me-1'\n        color={'light-primary'}\n        content={row.username.charAt(0) || 'T'}\n      />\n    )\n\n  }\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const dispatch = useDispatch()\n  //** State */\n  const { id } = useParams()\n  const [filesArr, setFilesArr] = useState([])\n  const [files, setFiles] = useState([])\n  const [data, setData] = useState([])\n  const [attachmentIds, setAttachmentsId] = useState([])\n  const [comment, setComment] = useState('')\n  const [editcomment, setEditComment] = useState('')\n  const [fileUploadProgress, setProgress] = useState(0)\n\n  const store = useSelector(state => state.taskconversation)\n\n  const deletefn = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteTaskConversation(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Comments has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n      }\n    })\n  }\n\n  const editNote = (k) => {\n    const temp = data.map((obj, i) => {\n      if (i === k) {\n        setEditComment(obj.comment)\n        return { ...obj, editFlag: true }\n      } else {\n        return { ...obj, editFlag: false }\n      }\n    })\n    setData(temp)\n  }\n\n  const dateformat = (val) => {\n\n    return moment(val, 'x').format('YYYY, MMM-D h:m A')\n\n  }\n\n  const configUpload =\n  {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    },\n    onUploadProgress: data => {\n      //Set the progress value to show the progress bar\n      setProgress(Math.round((100 * data.loaded) / data.total))\n    }\n  }\n\n  const uploadFiles = () => {\n\n    setBlock(true)\n    const formData = new FormData()\n    files.forEach((file, key) => {\n      formData.append(`files[${key}]`, file)\n    })\n    formData.append('id', id)\n    formData.append('organizationId', activeOrgId)\n    formData.append('createdBy', userId)\n\n    axios.post('/google/taskfolders', formData, configUpload).then((res) => {\n      setAttachmentsId([...attachmentIds, ...res.data.attachment_ids])\n      setFiles([])\n      setBlock(false)\n    }).catch(() => {\n      toast.error('Upload Failed', { position: 'bottom-right' })\n      setBlock(false)\n    })\n  }\n\n  const { getRootProps, getInputProps } = useDropzone({\n    multiple: true,\n    onDrop: (acceptedFiles, rejectedFiles) => {\n      if (rejectedFiles.length) {\n        toast.error('You can only upload image Files!.')\n      } else {\n        setFiles(acceptedFiles)\n        setFilesArr([...filesArr, ...acceptedFiles])\n      }\n    }\n  })\n\n  useEffect(() => {\n    if (files.length > 0) {\n      uploadFiles()\n    }\n  }, [files])\n\n  const renderFileSize = size => {\n    if (Math.round(size / 100) / 10 > 1000) {\n      return `${(Math.round(size / 100) / 10000).toFixed(1)} mb`\n    } else {\n      return `${(Math.round(size / 100) / 10).toFixed(1)} kb`\n    }\n  }\n\n  const handleRemoveFile = file => {\n    const uploadedFiles = files\n    const filtered = uploadedFiles.filter(i => i.name !== file.name)\n    setFiles([...filtered])\n  }\n\n  const saveNote = async (obj) => {\n    obj.comment = editcomment\n    if (obj.comment !== '') {\n      obj['updatedBy'] = userId\n      await dispatch(updateTaskConversation(obj))\n      toast.success('Comment Updated Successfully', { position: 'bottom-right' })\n    }\n  }\n\n  useEffect(async () => {\n    if (tabId === 'tasknotes') {\n      await dispatch(getTaskConversation(id))\n    }\n  }, [tabId])\n\n  useEffect(() => {\n    setData(store.data || [])\n  }, [store.data])\n\n  const postComment = async () => {\n    if (comment !== '' || attachmentIds.length > 0) {\n      const data = {\n        organizationId: activeOrgId,\n        createdBy: userId,\n        updatedBy: userId,\n        comment,\n        attachmentIds,\n        taskId: id\n      }\n      setBlock(true)\n      await dispatch(addTaskConversation(data))\n      toast.success('Comment Added Successfully', { position: 'bottom-right' })\n      setComment('')\n      setFiles([])\n      setFilesArr([])\n      setProgress(0)\n      setBlock(false)\n    }\n\n  }\n\n  const fileList = files.map((file, index) => (\n    <ListGroupItem key={`${file.name}-${index}`} className='d-flex align-items-center justify-content-between'>\n      <div className='file-details d-flex align-items-center'>\n        <div className='file-preview me-1'>\n          <Avatar />\n        </div>\n        <div>\n          <p className='file-name mb-0'>{file.name}</p>\n          <p className='file-size mb-0'>{renderFileSize(file.size)}</p>\n        </div>\n      </div>\n      <Button color='danger' outline size='sm' className='btn-icon' onClick={() => handleRemoveFile(file)}>\n        <X size={14} />\n      </Button>\n    </ListGroupItem>\n  ))\n\n  return (\n    <Fragment>\n      <UILoader blocking={block} loader={<Loader />}>\n        <Card>\n          <CardBody>\n\n            <fieldset className='form-label-group mb-50'>\n              <Label className='form-check-label' for={`add-comment-`}>\n                Add Comment\n              </Label>\n              <Input id={`add-comment-`} type='textarea' rows='3' placeholder='Add Comment' value={comment} onInput={(e) => setComment(e.target.value)} />\n            </fieldset>\n\n            <input {...getInputProps()} />\n\n            <Button type='button' color='primary' size='sm' {...getRootProps({ className: 'dropzone' })} >\n              <Paperclip size={14} className=''></Paperclip>\n            </Button>\n\n            <Button color='primary' className='ms-1' size='sm' onClick={() => postComment()}>\n              Post Comment\n            </Button>\n\n            {fileUploadProgress > 0 && <Progress className='mt-md-50' color={fileUploadProgress < 100 ? 'primary' : 'success'} value={fileUploadProgress} />}\n\n            <ListGroup>{fileList}</ListGroup>\n\n            {data.map((item, k) => {\n              return (\n                <div className='d-flex align-items-start my-1' key={k}>\n                  {renderClient(item)}\n                  <div className='profile-user-info w-100'>\n                    <div className='d-flex align-items-center justify-content-between'>\n                      <h6 className='mb-0'>{item.username}</h6>\n                    </div>\n                    {!item.editFlag &&\n                      <Row className='mt-1'>\n\n                        <div className='white-space-wrap'>{item.comment.replace(/(\\\\n)/g, \"\\n\")}\n                          <Row>\n                            {\n                              item.files[0] !== null &&\n                              item.files.map((file, k) => {\n                                return (\n                                  <Col md={'3'} key={k} className='file-details d-flex align-items-center cursor-pointer'>\n                                    <ListGroupItem className='col-12 d-flex mb-1 align-items-center'>\n                                      <div className='file-preview me-1'>\n                                        <img width={25} height={25} src={`https://drive.google.com/thumbnail?id=${file.driveid}`} alt=\"image\" />\n                                      </div>\n                                      <a target='_blank' className='file-name mb- text-overflow-ellipsis' href={`http://docs.google.com/fileview?id=${file.driveid}&hl=en&pid=explorer&efh=false&a=v&chrome=false&embedded=true`}>{file.originalfilename.split('.')[0].length > 15 ? `${file.originalfilename.split('.')[0].substr(0, 15)}.${file.extension}` : file.originalfilename}</a>\n                                    </ListGroupItem>\n                                  </Col>\n                                )\n                              })\n                            }\n                          </Row>\n                        </div>\n                        <div className='d-flex mt-1'>\n                          <span className='text-sm'>{dateformat(item.createdon)}</span>\n                          &nbsp;&nbsp;\n                          {!item.editFlag &&\n                            <Col className='d-flex' md={1}>\n                              <span className='text-primary cursor-pointer' onClick={() => editNote(k)} >.Edit</span> &nbsp;&nbsp;\n                              <span className='text-danger cursor-pointer' onClick={() => deletefn(item.id)} >.Delete</span>\n                            </Col>\n                          }\n                        </div>\n                      </Row>\n                    }\n                    {item.editFlag &&\n                      <Row className='mt-2'>\n                        <Input type='textarea' roes='3' value={editcomment.replace(/(\\\\n)/g, \"\\n\")} onInput={(e) => { setEditComment(e.target.value) }} />\n\n                        <Col className='d-flex justify-content-end mt-1' >\n                          <Button size='sm' color='warning' outline onClick={() => editNote(-1)}>Cancel</Button>\n                          <Button size='sm' color='primary' className='ms-1' onClick={() => saveNote(item)} >Save</Button>\n                        </Col>\n                      </Row>\n                    }\n                  </div>\n                </div>\n              )\n            })\n            }\n          </CardBody>\n        </Card>\n      </UILoader>\n    </Fragment>\n  )\n}\n\nexport default Templates\n","import { useEffect, useState, Fragment, useRef } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport { checklists } from '../store/index'\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, CardBody, UncontrolledDropdown, DropdownToggle, DropdownItem, DropdownMenu, Row, Input, Button, Col } from 'reactstrap'\nimport { CheckCircle, MoreVertical, RefreshCcw } from 'react-feather'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { orgUserId, activeOrganizationid } from '@src/helper/sassHelper'\nimport moment from 'moment'\nconst userId = orgUserId()\nconst activeOrgId = activeOrganizationid()\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n\n// ** Timeline \nconst CheckList = ({ tabId }) => {\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const [data, setData] = useState([])\n\n  const getChecklists = async () => {\n    setBlock(true)\n    const res = await dispatch(checklists({ taskId: id }))\n    await setData(res.payload)\n    setBlock(false)\n  }\n  const dropdownStyle = {\n    position: 'absolute',\n    left: '-49px',\n    top: '-8px'\n  }\n  useEffect(() => {\n    if (tabId === 'checklist') {\n      getChecklists()\n    }\n  }, [tabId])\n\n  const updateStatus = (sts, id) => {\n    setBlock(true)\n    axios.post('/taskworkflows/updatestatus', { status: sts, id, updatedBy: userId })\n      .then(() => { getChecklists() })\n      .catch((err) => { console.log(err); setBlock(false) })\n  }\n\n  const dateFormat = (value) => {\n    if (value.length === 13) {\n      return moment(value, 'x').format(\"MMM DD, YYYY\")\n    } else {\n      return moment.unix(value).format(\"MMM DD, YYYY\")\n    }\n  }\n\n  const dateFormat1 = (value) => {\n\n    return moment(value, 'x').format(\"MMM DD, YYYY\")\n\n  }\n\n  const handlchecklist = (val) => {\n    if (val) {\n      getChecklists()\n    }\n  }\n\n  const CommentBox = ({ taskId, workflowId, handlchecklist }) => {\n\n    const domInputRef = useRef(null)\n    const [description, setDescription] = useState('')\n\n    const submitComment = () => {\n      if (description === '') {\n        return false\n      }\n\n      const obj = {\n        workflowId,\n        taskId,\n        description,\n        createdBy: userId,\n        organizationId: activeOrgId\n      }\n\n      setBlock(true)\n      axios.post('/taskcomments/add', obj)\n        .then(() => {\n          handlchecklist(true)\n          if (domInputRef.current === null) {\n            domInputRef.current.innerText = ''\n          }\n        })\n        .catch((err) => { console.log(err); setBlock(false) })\n\n    }\n\n    const handleContentEditable = (val) => {\n      setDescription(val)\n    }\n\n    return (\n      <Row className='px-1'>\n        <div contentEditable\n          className='border border-1 p-50 rounded-2'\n          ref={domInputRef}\n          onInput={(e) => { handleContentEditable(e.currentTarget.textContent) }} >\n\n        </div>\n        <Col className='mt-md-50 px-0'>\n          <Button size='sm' color='primary' onClick={() => { submitComment() }}>Submit</Button>\n        </Col>\n      </Row>\n    )\n  }\n\n  const renderComments = (obj) => {\n    if (obj !== null) {\n      return (\n        <div className={`p-md-50 rounded-2 bg-light-primary mt-md-50`} key={obj.id}>\n          {\n            <div className='d-flex justify-content-between'>\n              <h6>{obj.name}</h6>\n              <h6>{dateFormat1(obj.createdon)}</h6>\n            </div>\n          }\n          <p className='white-space-wrap' dangerouslySetInnerHTML={{ __html: obj.comments.replace(/(\\\\n)/g, \"\") }} ></p>\n        </div>\n      )\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle tag='h4'>CheckList Trail</CardTitle>\n      </CardHeader>\n      <UILoader blocking={block} loader={<Loader />}>\n        <CardBody className='pt-1'>\n          <ul className=\"timeline\">\n            { data && data.map((item, ind) => {\n              return (<li className=\"timeline-item\" key={ind}>\n                {item.progressstatus !== undefined &&\n                  <UncontrolledDropdown style={dropdownStyle}>\n                    <DropdownToggle tag='div' className='btn btn-sm'>\n                      <MoreVertical size={14} className='cursor-pointer' />\n                    </DropdownToggle>\n                    <DropdownMenu>\n                      {item.progressstatus === '1' &&\n                        <DropdownItem onClick={() => updateStatus(3, item.id)}>\n                          <CheckCircle size={14} /> Mark as Complete\n                        </DropdownItem>\n                      }\n                      {item.progressstatus === '3' &&\n                        <DropdownItem onClick={() => updateStatus(1, item.id)}>\n                          <RefreshCcw size={14} /> Reopen\n                        </DropdownItem>\n                      }\n                    </DropdownMenu>\n                  </UncontrolledDropdown>\n                }\n                <span className={`timeline-point timeline-point-indicator ${(item.progressstatus === '3' || item.progressstatus === undefined) ? 'timeline-point-success' : ''}`}></span>\n                <div className=\"timeline-event\">\n                  <div className=\"d-flex justify-content-between flex-sm-row flex-column\">\n                    <h6>{item.title}</h6>\n                  </div>\n                  {item.comments !== '' &&\n                    <div className={`p-md-50 rounded-2 bg-light-${(item.progressstatus === '3' || item.progressstatus === undefined) ? 'success' : 'primary'}`}>\n                      {\n                        item.progressstatus === undefined &&\n                        (\n                          <div className='d-flex justify-content-between'>\n                            <h6>{item.name}</h6>\n                            <h6>{dateFormat(item.createdon)}</h6>\n                          </div>\n                        )\n                      }\n\n                      <p className='white-space-wrap' dangerouslySetInnerHTML={{ __html: item.comments.replace(/(\\\\n)/g, \"\") }} ></p>\n\n                    </div>\n                  }\n                  {\n                    item.progressstatus === '1' &&\n                    (\n                      <CommentBox taskId={id} workflowId={item.id} handlchecklist={handlchecklist} />\n                    )\n                  }\n                  {\n                    (item.progressstatus !== undefined && item.taskcomments !== undefined) &&\n                    (\n                      item.taskcomments.map((obj) => {\n                        return renderComments(obj)\n                      })\n                    )\n                  }\n                </div>\n              </li>\n              )\n            })\n            }\n          </ul>\n        </CardBody>\n      </UILoader>\n    </Card>\n  )\n}\n\nexport default CheckList\n","// ** Reactstrap Imports\nimport { Badge, Button, Card, CardHeader, Col, Input, Modal, ModalBody, Row, Table } from 'reactstrap'\n\n// ** Third Party Components\nimport { ChevronDown, Plus } from 'react-feather'\nimport DataTable from 'react-data-table-component'\n\nimport { timeSheetList } from '../store/index'\n// ** Styles\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Link, useParams } from 'react-router-dom'\nimport axios from '@src/configs/axios/axiosConfig'\nimport toast from 'react-hot-toast'\n\nimport { orgUserId } from '@src/helper/sassHelper'\nimport moment from 'moment'\nconst userId = orgUserId()\n\nconst paymentstatusObj = [\n\n  { code: '5', name: \"Pending\", color: 'light-danger' },\n  { code: '6', name: \"Partially Paid\", color: 'light-warning' },\n  { code: '7', name: 'Paid', color: 'light-success' },\n  { code: '11', name: 'Sent', color: 'light-secondary' }\n]\n\nconst renderStatus = (val) => {\n  const obj = paymentstatusObj.find((o) => parseInt(o.code) === parseInt(val))\n  return obj\n}\n\nconst dateFormat = (value) => {\n  if (value.length === 13) {\n    return moment(value, 'x').format(\"MMM DD, YYYY h:m a\")\n  } else {\n    return moment.unix(value).format(\"MMM DD, YYYY h:m a\")\n  }\n}\n\nconst dateFormatOnly = (value) => {\n  if (value.length === 13) {\n    return moment(value, 'x').format(\"MMM DD, YYYY\")\n  } else {\n    return moment.unix(value).format(\"MMM DD, YYYY\")\n  }\n}\n\nconst hoursFormat = (row) => {\n\n  const val = row.totalhours\n  let decimalTime, hours, minutes\n\n  if (row.totalhoursmin === null) {\n    decimalTime = (parseFloat(val) * 60 * 60 * 1000)\n    hours = Math.floor((decimalTime / (60 * 60)))\n    decimalTime = decimalTime - (hours * 60 * 60)\n    minutes = Math.floor((decimalTime / 60))\n    decimalTime = decimalTime - (minutes * 60)\n  } else {\n    decimalTime = row.totalhours\n    hours = decimalTime.split('.')[0]\n    minutes = decimalTime.split('.')[1]\n  }\n  if (hours < 10) {\n    hours = `0${hours}`\n  }\n  if (minutes < 10) {\n    minutes = `0${minutes}`\n  }\n\n  return `${isNaN(hours) ? hours : 0} Hrs: ${isNaN(minutes) ? minutes : 0} Mins`\n\n}\n\nexport const columns = [\n  {\n    name: 'Start Time',\n    cell: row => dateFormat(row.starttime)\n  },\n  {\n    name: 'End Time',\n    cell: row => (row.endtime !== null ? dateFormat(row.endtime) : '-')\n  },\n  {\n    name: 'Total Hours',\n    cell: row => hoursFormat(row || '0')\n  },\n  {\n    name: 'Amount',\n    selector: row => row.amount || '0'\n  }\n]\n\nconst UserProjectsList = ({ tabId, selectedTask }) => {\n\n  const dispatch = useDispatch()\n  const { id } = useParams()\n  const [dataArr, setData] = useState([])\n  const [formModal1, setFormModal1] = useState(false)\n  const [invoices, setInvoices] = useState([])\n  const [invoice, setInvoice] = useState(null)\n  const [invoiceId, setInvoiceId] = useState(null)\n\n  const getTimeSheetList = async () => {\n    const res = await dispatch(timeSheetList({ taskId: id }))\n    setData(res.payload)\n  }\n\n  const closeModal1 = () => {\n    setFormModal1(false)\n  }\n\n  const getLinkedInvoice = (id) => {\n\n    axios.post('/taskinvoices/get', { id })\n      .then((res) => {\n        if (res.data.taskinvoices !== undefined) {\n          setInvoice(res.data.taskinvoices)\n        }\n      })\n      .catch((err) => { console.log(err) })\n  }\n\n  const linkInvoice = () => {\n    axios.post('/tasks/linkinvoice', { id, invoiceId, updatedBy: userId })\n      .then(() => {\n        setFormModal1(false)\n        toast.success('Invoice Linked Successfully', {\n          position: 'bottom-right'\n        })\n        getLinkedInvoice(invoiceId)\n      })\n      .catch((err) => { console.log(err) })\n  }\n\n  const loadInvoice = () => {\n\n    axios.post('/taskinvoices/invoicelist', { clientid: selectedTask.clientid, serviceid: selectedTask.serviceid })\n      .then((res) => {\n        setFormModal1(true)\n        setInvoices(res.data.taskinvoices)\n      })\n      .catch((err) => { console.log(err) })\n  }\n\n  useEffect(async () => {\n    if (tabId === 'timesheets') {\n      getTimeSheetList()\n      if (selectedTask.invoiceid !== null) {\n\n        getLinkedInvoice(selectedTask.invoiceid)\n\n      }\n    }\n  }, [tabId])\n\n  return (\n    <Card>\n      <CardHeader tag='h4'>Time Sheet List</CardHeader>\n      <div className='react-dataTable user-view-account-projects'>\n        <DataTable\n          noHeader\n          responsive\n          columns={columns}\n          data={dataArr}\n          className='react-dataTable'\n          sortIcon={<ChevronDown size={10} />}\n        />\n      </div>\n      <Row className='d-flex justify-content-between mt-1'>\n        <h5>Invoice Details</h5>\n        {invoice === null &&\n          <Col className='d-flex justify-content-between'>\n            <div></div>\n            <Button color='primary' size='sm' onClick={() => loadInvoice()} > <Plus size={12} /> Link Invoice</Button>\n          </Col>\n        }\n      </Row>\n      <Row>\n        {(invoice !== null) &&\n          <Table>\n            <thead>\n              <tr>\n                <td>Invoice No</td>\n                <td>Invoice Date</td>\n                <td>Status</td>\n                <td>Amount</td>\n              </tr>\n            </thead>\n            <tbody>\n              <tr >\n                <td>\n                  <Link to={`/invoices/view/${invoice.id}`} >\n                    <span>{invoice.uniqueno}</span>\n                  </Link>\n                </td>\n                <td>{dateFormatOnly(invoice.invoicedate)}</td>\n                <td><Badge color={renderStatus(invoice.paymentstatus).color}> {renderStatus(invoice.paymentstatus).name}</Badge></td>\n                <td>{invoice.totalamount}</td>\n              </tr>\n              <tr>\n                <td colSpan={2}></td>\n                <td>Profit</td>\n                <td>{selectedTask.profit}</td>\n              </tr>\n              <tr>\n                <td colSpan={2}></td>\n                <td>Percentage</td>\n                <td></td>\n              </tr>\n            </tbody>\n          </Table>\n        }\n      </Row>\n      <Modal fullscreen isOpen={formModal1} toggle={() => setFormModal1(!formModal1)} className='modal-dialog-centered'>\n        <ModalBody>\n          <Row className='d-flex justify-content-between'>\n            <h6>Leave Details</h6>\n            <Col className='d-flex justify-content-between'>\n              <div></div>\n              <div>\n                <Button color='warning' size='sm' onClick={() => closeModal1()} > Cancel</Button>\n                <Button color='primary' size='sm' className='ms-1' tag={Link} to={'/invoice/add'} > Add Invoice</Button>\n                <Button color='success' size='sm' className='ms-1' onClick={() => linkInvoice()} > Link Invoice</Button>\n              </div>\n            </Col>\n          </Row>\n          <Table>\n            <thead>\n              <tr>\n                <td>Select</td>\n                <td>Invoice No</td>\n                <td>Invoice Date</td>\n                <td>Customer</td>\n                <td>Invoice Items</td>\n                <td>Amount</td>\n                <td>Balance</td>\n                <td>Status</td>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                invoices.map((obj, k) => {\n                  return (\n                    <tr key={k} >\n                      <td>\n                        <Input type='radio' value={obj.id} onChange={(e) => setInvoiceId(e.target.value)} />\n                      </td>\n                      <td>\n                        {obj.uniqueno}\n                      </td>\n                      <td>{dateFormatOnly(obj.invoicedate)}</td>\n                      <td>\n                        <span>{obj.contactname}</span>\n                        <p>{obj.contactemail}</p>\n                      </td>\n                      <td>{obj.taskinvoiceitemsservicename}</td>\n                      <td>{obj.totalamount}</td>\n                      <td>{obj.dueamount}</td>\n                      <td><Badge color={renderStatus(obj.paymentstatus).color}> {renderStatus(obj.paymentstatus).name}</Badge></td>\n\n                    </tr>\n                  )\n                })\n              }\n            </tbody>\n          </Table>\n        </ModalBody>\n      </Modal>\n    </Card>\n  )\n}\n\nexport default UserProjectsList\n","// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\n// ** Reactstrap Imports\nimport {\n  Card,\n  CardBody,\n  Col,\n  Row,\n  ListGroupItem\n} from 'reactstrap'\n\n// ** Third Party Components\nimport 'cleave.js/dist/addons/cleave-phone.us'\nimport Avatar from '@src/@core/components/avatar'\nimport { getServiceTemplates } from '@src/views/apps/service/store/templates'\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment'\n\nconst Templates = props => {\n  // ** Hook\n  const { tabId, selectedTask } = props\n\n  const renderClient = row => {\n\n    return (\n      <Avatar\n        initials\n        className='me-1'\n        color={'light-primary'}\n        content={row.username.charAt(0) || 'T'}\n      />\n    )\n  }\n\n  const dispatch = useDispatch()\n  //** State */\n  const [data, setData] = useState([])\n  const store = useSelector(state => state.templates)\n\n  const dateformat = (val) => {\n\n    return moment(val, 'x').format('YYYY, MMM-D h:m A')\n\n  }\n\n  useEffect(async () => {\n    if (tabId === 'taskservicetemplate') {\n      await dispatch(getServiceTemplates(selectedTask.serviceid))\n    }\n  }, [tabId])\n\n  useEffect(() => {\n    setData(store.data || [])\n  }, [store.data])\n\n  return (\n    <Fragment>\n      <Card>\n        <CardBody>\n\n          {data.map((item, k) => {\n            return (\n              <div className='d-flex align-items-start my-1' key={k}>\n                {renderClient(item)}\n                <div className='profile-user-info w-100'>\n                  <div className='d-flex align-items-center justify-content-between'>\n                    <h6 className='mb-0'>{item.username}</h6>\n                  </div>\n                  <Row className='mt-1'>\n                    <div className='white-space-wrap'>{item.description.replace(/(\\\\n)/g, \"\\n\")}</div>\n                    <div className='d-flex mt-1'>\n                      <span className='text-sm'>{dateformat(item.createdon)}</span>\n                    </div>\n                    <Row>\n                      {\n                        item.files[0] !== null &&\n                        item.files.map((file, k) => {\n                          return (\n                            <Col md={'3'} key={k} className='file-details d-flex align-items-center cursor-pointer'>\n                              <ListGroupItem className='col-12 d-flex mb-1 align-items-center'>\n                                <div className='file-preview me-1'>\n                                  <img width={25} height={25} src={`https://drive.google.com/thumbnail?id=${file.driveid}`} alt=\"image\" />\n                                </div>\n                                <a target='_blank' className='file-name mb- text-overflow-ellipsis' href={`http://docs.google.com/fileview?id=${file.driveid}&hl=en&pid=explorer&efh=false&a=v&chrome=false&embedded=true`}>{file.originalfilename.split('.')[0].length > 15 ? `${file.originalfilename.split('.')[0].substr(0, 15)}.${file.extension}` : file.originalfilename}</a>\n                              </ListGroupItem>\n                            </Col>\n                          )\n                        })\n                      }\n                    </Row>\n                  </Row>\n                </div>\n              </div>\n            )\n          })\n          }\n        </CardBody>\n      </Card>\n    </Fragment>\n  )\n}\n\nexport default Templates\n","// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\nimport { Link, useParams } from 'react-router-dom'\n// ** Reactstrap Imports\nimport { useDropzone } from 'react-dropzone'\nimport { Can } from '@src/utility/context/Can.js'\nimport { Row, Col, Card, CardBody, Badge, Table, Nav, NavItem, ListGroup, ListGroupItem, NavLink, Input, TabContent, TabPane, Button, Popover, PopoverHeader, PopoverBody, UncontrolledTooltip, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, Label, Progress } from 'reactstrap'\n// ** Third Party Components\nimport Conversation from './Conversation'\nimport CheckList from './CheckList'\nimport TimeSheet from './TimeSheet'\nimport Templates from './Templates'\nimport { Bell, Calendar, Clock, Edit, FileText, MessageCircle, User, X, Paperclip, RefreshCcw, MoreVertical } from 'react-feather'\n\n// ** Custom Components\nimport toast from 'react-hot-toast'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { startTimer, endTimer, updateStatusRefresh } from '../store/index'\nimport { addTaskConversation } from '../store/taskconversation'\n// ** Styles\nimport Avatar from '@components/avatar'\nimport { useDispatch, useSelector } from 'react-redux'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport moment from 'moment'\nimport { orgUserId, activeOrganizationid, activeOrganization } from '@src/helper/sassHelper'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nconst userId = orgUserId()\nconst activeOrg = activeOrganization()\nconst activeOrgId = activeOrganizationid()\n\nconst priorityColors = [\n  '',\n  'light-success',\n  'light-warning',\n  'light-danger'\n]\n\nconst priorityArr = [\n  '',\n  'Low',\n  'Medium',\n  'High'\n]\n\nconst UserInfoCard = ({ selectedTask }) => {\n\n  const statusOptions = ['', 'To Do', 'In progress', 'Completed', 'On Hold', 'Cancelled', 'Sent to Review', 'Request Changes']\n  const statusObj = [\n    'light-warning',\n    'light-success',\n    'light-secondary'\n  ]\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const { id } = useParams()\n  // ** State\n  const dispatch = useDispatch()\n  const [active, setActive] = useState('tasknotes')\n  const [popoverOpen, setPopoverOpen] = useState(false)\n  const [timerFlag, setTimerFlag] = useState(false)\n  const [hourlyRate, setHourlyRate] = useState(0)\n  const [taskDescription, setTaskDescription] = useState('')\n  const [activeStatus, setActiveStatus] = useState('')\n  const [comment, setComment] = useState('')\n\n  const [assigneeStatus, setAssigneeSts] = useState(false)\n  const [reviewerStatus, setReviewerSts] = useState(false)\n  const [attachmentIds, setAttachmentsId] = useState([])\n  const [fileUploadProgress, setProgress] = useState(0)\n\n  const [filesArr, setFilesArr] = useState([])\n  const [files, setFiles] = useState([])\n\n  const store = useSelector(state => state.task)\n  const toggleTab = tab => {\n    if (active !== tab) {\n      setActive(tab)\n    }\n  }\n\n  const dateFormat = (value) => {\n    if (value.length === 13) {\n      return moment(value, 'x').format(\"MMM DD, YYYY\")\n    } else {\n      return moment.unix(value).format(\"MMM DD, YYYY\")\n    }\n  }\n\n  const getDescription = () => {\n    axios.post('/taskconversations/description', { taskId: id })\n      .then((res) => {\n        setTaskDescription(res.data.taskconversation === undefined ? '' : res.data.taskconversation.comment)\n      }).catch((err) => {\n        console.log(err)\n      })\n  }\n\n  const getEmployeeDet = () => {\n    axios.post('/organizationusers/getjobinfo', { id: userId })\n      .then((res) => {\n        setHourlyRate(res.data.organizationusers.hourlyrate || 0)\n      }).catch((err) => {\n        console.log(err)\n      })\n  }\n\n  const postComment = async () => {\n\n    setBlock(true)\n    const data = {\n      organizationId: activeOrgId,\n      createdBy: userId,\n      updatedBy: userId,\n      comment,\n      attachmentIds,\n      taskId: id\n    }\n    await dispatch(addTaskConversation(data))\n    toast.success('Task Status Changed Successfully', { position: 'bottom-right' })\n    setBlock(false)\n\n  }\n\n  const startTaskTimer = async () => {\n    const data = {\n      createdBy: userId,\n      taskId: id,\n      userId,\n      hourlyRate,\n      organizationId: activeOrgId,\n      startTime: moment().unix(),\n      existStatus: selectedTask.taskstatus\n    }\n    const res = await dispatch(startTimer(data))\n    localStorage.setItem('currentTask', JSON.stringify(res.payload))\n    setTimerFlag(true)\n  }\n\n  const stopTaskTimer = async () => {\n    const temp = JSON.parse(localStorage.getItem('currentTask') || null)\n    if (temp !== null) {\n      const end = moment()\n      const start = moment.unix(temp.starttime).toDate()\n      const end_timestamp = moment().unix()\n      const duration = moment.duration(end.diff(start))\n      const hours = duration.asHours()\n      const amount = hourlyRate * hours\n      const data = {\n        updatedBy: userId,\n        id: temp.id,\n        taskId: id,\n        totalhours: hours,\n        amount,\n        hourlyRate,\n        userId,\n        endTime: end_timestamp\n      }\n      await dispatch(endTimer(data))\n      await localStorage.removeItem('currentTask')\n      await setTimerFlag(false)\n    }\n  }\n\n  const assigneeSts = () => {\n    const assigneeIndex = selectedTask.assignee.findIndex(obj => obj.id === userId)\n    setAssigneeSts(assigneeIndex > -1 || (activeOrg.organizationusersusertypeid === '1' || selectedTask.reviewer.length === 0))\n  }\n\n  const reviewerSts = () => {\n    const reviewerIndex = selectedTask.reviewer.findIndex(obj => obj.id === userId)\n    setReviewerSts(reviewerIndex > -1 || (activeOrg.organizationusersusertypeid === '1' || selectedTask.reviewer.length === 0))\n  }\n\n\n  const updateTaskStatus = async (status) => {\n    const data = {\n      updatedBy: userId,\n      taskId: id,\n      status,\n      existStatus: selectedTask.taskstatus\n    }\n    setBlock(true)\n\n    axios.post('/tasks/updatestatus', data)\n      .then(async () => {\n        toast.success('Task Status Updated SuccesFully', { position: 'bottom-right' })\n        await dispatch(updateStatusRefresh(data))\n        setBlock(false)\n        if (comment !== '' || attachmentIds.length > 0) {\n          await postComment()\n        }\n      })\n      .catch(() => {\n        toast.error('Please Finish All Checklist before Sent to Review or Complete', { position: 'bottom-right' })\n        setBlock(false)\n      })\n  }\n\n  useEffect(() => {\n    if (selectedTask !== null) {\n      getEmployeeDet()\n      getDescription()\n\n      reviewerSts()\n      assigneeSts()\n\n      if (parseInt(selectedTask.taskstatus) === 6) {\n        setActiveStatus('3')\n      }\n    }\n\n  }, [selectedTask])\n\n  useEffect(() => {\n    const temp = JSON.parse(localStorage.getItem('currentTask'))\n    if (store.selectedTaskTimer !== null) {\n      setTimerFlag(true)\n    } else if (temp !== null) {\n      setTimerFlag(true)\n    } else {\n      setTimerFlag(false)\n    }\n  }, [store.selectedTaskTimer])\n\n  const configUpload =\n  {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    },\n    onUploadProgress: data => {\n      //Set the progress value to show the progress bar\n      setProgress(Math.round((100 * data.loaded) / data.total))\n    }\n  }\n\n  const uploadFiles = () => {\n\n    setBlock(true)\n    const formData = new FormData()\n    files.forEach((file, key) => {\n      formData.append(`files[${key}]`, file)\n    })\n    formData.append('id', id)\n    formData.append('organizationId', activeOrgId)\n    formData.append('createdBy', userId)\n\n    axios.post('/google/taskfolders', formData, configUpload).then((res) => {\n      setAttachmentsId([...attachmentIds, ...res.data.attachment_ids])\n      setFiles([])\n      setBlock(false)\n    }).catch((err) => {\n      console.log(err)\n      setBlock(false)\n    })\n  }\n\n  const { getRootProps, getInputProps } = useDropzone({\n    multiple: true,\n    onDrop: (acceptedFiles, rejectedFiles) => {\n      if (rejectedFiles.length) {\n        toast.error('You can only upload image Files!.')\n      } else {\n        setFiles(acceptedFiles)\n        setFilesArr([...filesArr, ...acceptedFiles])\n      }\n    }\n  })\n\n  useEffect(() => {\n    if (files.length > 0) {\n      uploadFiles()\n    }\n  }, [files])\n\n  const renderFileSize = size => {\n    if (Math.round(size / 100) / 10 > 1000) {\n      return `${(Math.round(size / 100) / 10000).toFixed(1)} mb`\n    } else {\n      return `${(Math.round(size / 100) / 10).toFixed(1)} kb`\n    }\n  }\n\n  const handleRemoveFile = file => {\n    const uploadedFiles = files\n    const filtered = uploadedFiles.filter(i => i.name !== file.name)\n    setFiles([...filtered])\n  }\n\n  const fileList = files.map((file, index) => (\n    <ListGroupItem key={`${file.name}-${index}`} className='d-flex align-items-center justify-content-between'>\n      <div className='file-details d-flex align-items-center'>\n        <div className='file-preview me-1'>\n          <Avatar />\n        </div>\n        <div>\n          <p className='file-name mb-0'>{file.name}</p>\n          <p className='file-size mb-0'>{renderFileSize(file.size)}</p>\n        </div>\n      </div>\n      <Button color='danger' outline size='sm' className='btn-icon' onClick={() => handleRemoveFile(file)}>\n        <X size={14} />\n      </Button>\n    </ListGroupItem>\n  ))\n\n  const taskComplete = () => {\n    return (reviewerStatus && (selectedTask.taskstatus === '6'))\n  }\n\n  const taskReview = () => {\n    return (assigneeStatus && (selectedTask.taskstatus === '1' || selectedTask.taskstatus === '2' || selectedTask.taskstatus === '7'))\n  }\n\n\n  return (\n    <Fragment>\n      <UILoader blocking={block} loader={<Loader />}>\n        <Card>\n          <CardBody>\n            <Table responsive bordered>\n              <thead>\n                <tr >\n                  <th colSpan='3'>\n                    <Col tag={Link} to={`/clients/view/${selectedTask.clientid}`}>{selectedTask.clientname} - </Col>\n                    <Col tag={Link} to={`/services/view/${selectedTask.serviceid}`}>{selectedTask.servicename}</Col></th>\n                  <th>\n                    <Row className='justify-content-end'>\n                      <Col md={4}>\n                        {(!selectedTask.timesheetFlag) &&\n                          <Button size='sm' disabled={timerFlag} outline color='success' onClick={() => { startTaskTimer() }}>\n                            <Clock size={14} /> Start Timer</Button>\n                        }\n                        {(selectedTask.timesheetFlag) &&\n                          <Button size='sm' outline color='danger' onClick={() => { stopTaskTimer() }}>\n                            <Clock size={14} /> Stop Timer</Button>\n                        }\n                      </Col>\n                      <Col className='p-0' md={5}>\n                        {(!selectedTask.timesheetFlag) &&\n                          <Col>\n                            <Fragment>\n\n                              <Col>\n                                {taskReview() && (\n                                  <Button.Ripple size='sm' outline color='primary' id='taskcompetedpopover'> Send for Review</Button.Ripple>\n                                )}\n                                {(taskReview() && document.getElementById(\"taskcompetedpopover\")) &&\n                                  <Popover\n                                    placement='bottom'\n                                    target='taskcompetedpopover'\n                                    isOpen={popoverOpen}\n                                    toggle={() => setPopoverOpen(!popoverOpen)}\n                                  >\n                                    <PopoverHeader>\n                                      <Row className='d-flex justify-content-between'>\n                                        <Col>Task Send for Review</Col>\n                                        <Col className='d-flex justify-content-between'>\n                                          <div></div>\n                                          <X className='cursor-pointer' size={14} onClick={() => setPopoverOpen(!popoverOpen)} />\n                                        </Col>\n                                      </Row>\n                                    </PopoverHeader>\n                                    <PopoverBody>\n                                      <Input type='textarea' className='mb-1' cols='100' rows='4' onInput={(e) => setComment(e.target.value)} />\n\n                                      <p className=\"text-danger\">Please Write your comment about changes.</p>\n\n                                      <input {...getInputProps()} />\n\n                                      <Button type='button' color='primary' size='sm' {...getRootProps({ className: 'dropzone me-1' })} >\n                                        <Paperclip size={12} className=''></Paperclip>\n                                      </Button>\n                                      <Button size='sm' color='primary' onClick={() => updateTaskStatus('6')}>Send for Review</Button>\n\n                                      {fileUploadProgress > 0 && <Progress className='mt-md-50' color={fileUploadProgress < 100 ? 'primary' : 'success'} value={fileUploadProgress} />}\n\n                                      <ListGroup>{fileList}</ListGroup>\n                                    </PopoverBody>\n                                  </Popover>\n                                }\n                              </Col>\n                              <Col>\n                                {taskComplete() && (\n                                  <Button.Ripple size='sm' outline color='success' id='taskcompletedpopover2'> Mark as Complete</Button.Ripple>\n                                )}\n                                {(taskComplete() && document.getElementById(\"taskcompletedpopover2\")) && (\n                                  <Popover\n                                    placement='bottom'\n                                    target='taskcompletedpopover2'\n                                    isOpen={popoverOpen}\n                                    toggle={() => setPopoverOpen(!popoverOpen)}\n                                  >\n                                    <PopoverHeader>\n                                      <Row className='d-flex justify-content-between'>\n                                        <Col>Task Submit</Col>\n                                        <Col className='d-flex justify-content-between'>\n                                          <div></div>\n                                          <X className='cursor-pointer' size={14} onClick={() => setPopoverOpen(!popoverOpen)} />\n                                        </Col>\n                                      </Row>\n                                    </PopoverHeader>\n                                    <PopoverBody>\n                                      <Input type='textarea' className='mb-1' cols='100' rows='4' onInput={(e) => setComment(e.target.value)} />\n\n                                      <p className=\"text-danger\">Please Select Any one option.</p>\n                                      <div>\n                                        <Col><Input type='radio' name='sts' value={3} defaultChecked={taskComplete()} onChange={() => setActiveStatus(3)} /> Approved</Col>\n                                        <p className=\"text-sm mt-md-50\">Submit feedback and Mark as Complete.</p>\n                                      </div>\n                                      <div>\n                                        <Col><Input type='radio' name='sts' value={7} onChange={() => setActiveStatus(7)} /> Request changes</Col>\n                                        <p className=\"text-sm mt-md-50\">Submit feedback that must be addressed before Approval.</p>\n                                      </div>\n                                      <input {...getInputProps()} />\n\n                                      <Button type='button' color='primary' size='sm' {...getRootProps({ className: 'dropzone me-1' })} >\n                                        <Paperclip size={12} className=''></Paperclip>\n                                      </Button>\n                                      <Button size='sm' color='success' onClick={() => updateTaskStatus(activeStatus)}>Submit</Button>\n\n                                      {fileUploadProgress > 0 && <Progress className='mt-md-50' color={fileUploadProgress < 100 ? 'primary' : 'success'} value={fileUploadProgress} />}\n\n                                      <ListGroup>{fileList}</ListGroup>\n                                    </PopoverBody>\n                                  </Popover>\n\n                                )}\n                              </Col>\n                            </Fragment>\n                          </Col>\n                        }\n                      </Col>\n                      <Col md={3} className='d-flex'>\n                        <Can I={'write'} a={'task'}>\n                          <Col tag={Link} to={`/task/edit/${id}`}>\n                            <UncontrolledTooltip placement='top' target='edittooltip'>\n                              Edit\n                            </UncontrolledTooltip>\n                            <Edit size={16} className='ms-1 cursor-pointer' id='edittooltip' />\n                          </Col>\n                        </Can>\n                        {(selectedTask.taskstatus === '3' || selectedTask.taskstatus === '4' || selectedTask.taskstatus === '5') &&\n                          <Col>\n                            <UncontrolledTooltip placement='top' target='reopen'>\n                              Reopen\n                            </UncontrolledTooltip>\n\n                            <RefreshCcw size={16} id='reopen' className='text-primary ms-1 cursor-pointer' onClick={() => updateTaskStatus(2)} />\n\n                          </Col>\n                        }\n                        <Col  >\n                          <UncontrolledDropdown >\n                            <DropdownToggle tag='div' className='btn btn-sm p-0 ps-75'>\n                              <MoreVertical size={16} className='cursor-pointer text-primary' />\n                            </DropdownToggle>\n\n                            <DropdownMenu>\n                              {selectedTask.taskstatus !== '4' &&\n                                <DropdownItem onClick={() => updateTaskStatus(4)}>\n                                  <Label>OnHold</Label>\n                                </DropdownItem>\n                              }\n                              {selectedTask.taskstatus !== '5' &&\n                                <DropdownItem onClick={() => updateTaskStatus(5)}>\n                                  <Label>Cancel</Label>\n                                </DropdownItem>\n                              }\n\n                            </DropdownMenu>\n                          </UncontrolledDropdown>\n                        </Col>\n                        <Col tag={Link} to={`/task/list`} >\n                          <X size={16} className='ms-1 cursor-pointer' id='deletetooltip' />\n                        </Col>\n                      </Col>\n                    </Row>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>Task ID</td>\n                  <td>{selectedTask.uniqueidentity}</td>\n                  <td >\n                    Priority\n                  </td>\n                  <td> <Badge className='text-capitalize' color={priorityColors[selectedTask.priority]}>\n                    {priorityArr[selectedTask.priority]}\n                  </Badge></td>\n                </tr>\n                <tr>\n                  <td >\n                    Assignee\n                  </td>\n                  <td>\n                    {selectedTask.userlists.map((user, key) => {\n\n                      return (user.type === \"1\" && <Badge color='light-primary' pill href='#' key={key}>\n                        <User size={14} />\n                        <span className='align-middle ms-50'>{user.name}</span>\n                      </Badge>\n                      )\n                    })\n                    }\n                  </td>\n                  <td >\n                    Status\n                  </td>\n                  <td> <Badge className='text-capitalize' color={statusObj[selectedTask.taskstatus]}>\n                    {statusOptions[selectedTask.taskstatus]}\n                  </Badge></td>\n                </tr>\n                <tr>\n                  <td>Reviewer</td>\n                  <td >\n                    {selectedTask.userlists.map((user, key) => {\n\n                      return (user.type === \"2\" && <Badge color='light-primary' pill href='#' key={key}>\n                        <User size={14} />\n                        <span className='align-middle ms-50'>{user.name}</span>\n                      </Badge>\n                      )\n                    })\n                    }\n                  </td>\n                  <td colSpan='1' rowSpan='4'>Description</td>\n                  <td rowSpan='4' width={500}>\n                    <div className='white-space-wrap'>\n                      {taskDescription !== undefined ? taskDescription.replace(/(\\\\n)/g, \"\\n\") : ''}\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Start Date</td>\n                  <td >\n                    <div className='d-flex justify-content-between' >\n                      {dateFormat(selectedTask.startdate)}\n                      <Calendar size={16} />\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td >\n                    End Date\n                  </td>\n                  <td>\n                    <div className='d-flex justify-content-between' >\n                      {dateFormat(selectedTask.enddate)}\n                      <Calendar size={16} />\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td >\n                    Invoice Details\n                  </td>\n                  <td>\n                    {!selectedTask.invoiceflag &&\n                      <Button size='sm' color='primary'>Link Invoice</Button>\n                    }\n                  </td>\n                </tr>\n              </tbody>\n            </Table>\n\n            <Row className='mt-1 ps-1'>\n              <Fragment>\n                <Nav pills className='mb-2'>\n                  <NavItem>\n                    <NavLink active={active === 'tasknotes'} onClick={() => toggleTab('tasknotes')}>\n                      <MessageCircle className='font-medium-3 me-50' />\n                      <span className='fw-bold'>Comments</span>\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink active={active === 'taskservicetemplate'} onClick={() => toggleTab('taskservicetemplate')}>\n                      <FileText className='font-medium-3 me-50' />\n                      <span className='fw-bold'>Templates</span>\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink active={active === 'checklist'} onClick={() => toggleTab('checklist')}>\n                      <Bell className='font-medium-3 me-50' />\n                      <span className='fw-bold'>Checklist Trail</span>\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink active={active === 'timesheets'} onClick={() => toggleTab('timesheets')}>\n                      <Clock className='font-medium-3 me-50' />\n                      <span className='fw-bold'>Timesheet</span>\n                    </NavLink>\n                  </NavItem>\n                </Nav>\n                <TabContent activeTab={active}>\n\n                  <TabPane tabId='tasknotes'>\n                    <Conversation tabId={active} />\n                  </TabPane>\n                  <TabPane tabId='taskservicetemplate'>\n                    <Templates tabId={active} selectedTask={selectedTask} />\n                  </TabPane>\n                  <TabPane tabId='checklist'>\n                    <CheckList tabId={active} />\n                  </TabPane>\n                  <TabPane tabId='timesheets'>\n                    <TimeSheet tabId={active} selectedTask={selectedTask} />\n                  </TabPane>\n                </TabContent>\n              </Fragment>\n            </Row>\n          </CardBody>\n        </Card>\n      </UILoader>\n    </Fragment >\n  )\n}\n\nexport default UserInfoCard\n","// ** React Imports\nimport { useEffect, useState, Fragment } from 'react'\nimport { useParams, Link } from 'react-router-dom'\n\n// ** Store & Actions\nimport { getTask } from '../store'\nimport { useSelector, useDispatch } from 'react-redux'\n\n// ** Reactstrap Imports\nimport { Row, Col, Alert } from 'reactstrap'\n\n// ** User View Components\nimport UserInfoCard from './UserInfoCard'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n\nconst TaskView = () => {\n  // ** Store Vars\n  const store = useSelector(state => state.task)\n  const dispatch = useDispatch()\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  // ** Hooks\n  const { id } = useParams()\n\n  // ** Get suer on mount\n  useEffect(async () => {\n    if (id !== null) {\n      setBlock(true)\n      await dispatch(getTask(id))\n    }\n    setBlock(false)\n\n  }, [dispatch, id])\n\n\n  return store.selectedTask !== null && store.selectedTask !== undefined ? (\n    <UILoader blocking={block} loader={<Loader />}>\n      <div className='app-user-view'>\n        <Row>\n          <Col xl='12' lg='12' >\n            <UserInfoCard selectedTask={store.selectedTask} />\n          </Col>\n        </Row>\n      </div>\n    </UILoader>\n  ) : (\n    <UILoader blocking={block} loader={<Loader />}>\n      <Alert color='danger'>\n        <h4 className='alert-heading'>Task not found</h4>\n        <div className='alert-body'>\n          Task with id: {id} doesn't exist. Check list of all Tasks: <Link to='/task/list'>Tasks List</Link>\n        </div>\n      </Alert>\n    </UILoader>\n  )\n}\nexport default TaskView\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}