{"version":3,"sources":["views/pages/authentication/InvitationRegister.js","@core/components/input-password-toggle/index.js"],"names":["passwordRegx","invitationRegister","uniquekey","useParams","useState","invitaion","setInvitation","dispatch","useDispatch","navigate","useNavigate","store","useSelector","state","register","SignupSchema","yup","shape","default","name","email","required","password","matches","confirmPassword","oneOf","useForm","defaultValues","cast","resolver","yupResolver","control","handleSubmit","errors","formState","setValue","createOrgUser","data","createOrganizationUser","onSubmit","inviteregister","useJwt","login","roleid","then","res","handleLogin","OrgUser","fullname","firstname","lastname","contactno","users","id","designationid","departmentid","usertypeid","organizationid","toast","t","ToastContent","catch","err","console","log","useEffect","registerSuccess","user","loginUser","activeOrg","activeOrganization","find","obj","isdefault","localStorage","setItem","JSON","stringify","getHomeRouteForLoggedInUser","role","loginError","axios","post","invitation","className","to","onClick","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","tag","for","render","field","autoFocus","type","disabled","placeholder","invalid","loginEmail","message","htmlFor","color","block","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","classnames","size","renderIcon","defaultProps"],"mappings":"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","file":"static/js/123.a70817b3.chunk.js","sourcesContent":["// ** React Imports\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport axios from '@src/configs/axios/axiosConfig'\n// ** Custom Components\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport * as yup from 'yup'\nimport { yupResolver } from '@hookform/resolvers/yup'\n// ** Reactstrap Imports\nimport { Card, CardBody, CardTitle, CardText, Form, Label, Input, Button, FormFeedback } from 'reactstrap'\nimport useJwt from '@src/auth/jwt/useJwt'\n// ** Styles\nimport { inviteregister, createOrganizationUser } from './register-multi-steps/store/index'\nimport { handleLogin } from '@store/authentication'\nimport '@styles/react/pages/page-authentication.scss'\nimport { useEffect, useState } from 'react'\nimport { Controller, useForm } from 'react-hook-form'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getHomeRouteForLoggedInUser } from '@utils'\nimport toast from 'react-hot-toast'\n\nconst passwordRegx = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/\n\nconst invitationRegister = () => {\n\n  const { uniquekey } = useParams()\n  const [invitaion, setInvitation] = useState({})\n  const dispatch = useDispatch()\n  const navigate = useNavigate({})\n  const store = useSelector(state => state.register)\n\n  const SignupSchema = yup.object().shape({\n    uniquekey: yup.string().default(uniquekey),\n    name: yup.string(),\n    email: yup.string().email().required(),\n    password: yup.string().required('Password').matches(\n      passwordRegx,\n      \"Password must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"),\n    confirmPassword: yup\n      .string()\n      .required('Confirm Password is Required')\n      .oneOf([yup.ref(`password`), null], 'Passwords must match')\n  })\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors }, setValue\n  } = useForm({\n    defaultValues: SignupSchema.cast(),\n    resolver: yupResolver(SignupSchema)\n  })\n\n  const getInvitation = () => {\n    axios.post('/invitations/getinvitation', { uniquekey })\n      .then((res) => {\n        setInvitation(res.data.invitation)\n        setValue('email', res.data.invitation.email)\n        setValue('name', `${res.data.invitation.firstname} ${res.data.invitation.lastname}`)\n      })\n      .catch((err) => { console.log(err) })\n  }\n\n  const createOrgUser = async (data) => {\n    await dispatch(createOrganizationUser(data))\n  }\n\n  const onSubmit = async (data) => {\n    await dispatch(inviteregister(data))\n\n    useJwt\n      .login({ email: data.email, password: data.password, roleid: invitaion.roleid })\n      .then(async res => {\n        const data = res.data\n        await dispatch(handleLogin(data))\n        const OrgUser = {}\n        const fullname = `${invitaion.firstname} ${invitaion.lastname}`\n        OrgUser['name'] = fullname\n        OrgUser['email'] = invitaion.email\n        OrgUser['contact'] = invitaion.contactno\n        OrgUser['createBy'] = data.users.id\n        OrgUser['userId'] = data.users.id\n        OrgUser['email'] = invitaion.email\n        OrgUser['departmentId'] = invitaion.designationid\n        OrgUser['designationId'] = invitaion.departmentid\n        OrgUser['userTypeId'] = invitaion.usertypeid\n        OrgUser['organizationId'] = invitaion.organizationid\n        OrgUser['roleId'] = invitaion.roleid\n\n        await createOrgUser(OrgUser)\n\n        toast(t => (\n          <ToastContent t={t} name={data.name} />\n        ))\n      })\n      .catch(err => console.log(err))\n\n  }\n\n  useEffect(async () => {\n    if (store.registerSuccess) {\n      const user = store.loginUser\n      const activeOrg = store.activeOrganization.find((obj) => obj.isdefault === true)\n      localStorage.setItem('activeOrganization', JSON.stringify(activeOrg || store.activeOrganization[0]))\n      navigate(getHomeRouteForLoggedInUser(user.role))\n    }\n  }, [store.registerSuccess, store.activeOrganization])\n\n  useEffect(async () => {\n    if (store.loginError !== null) {\n      errors.email = store.loginError.email\n    }\n  }, [dispatch, store.loginUser, store.loginError])\n\n  useEffect(() => {\n    if (uniquekey) {\n      getInvitation()\n    }\n  }, [uniquekey])\n\n  return (\n    <div className='auth-wrapper auth-basic px-2'>\n      <div className='auth-inner my-2'>\n        <Card className='mb-0'>\n          <CardBody>\n            <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n              <svg viewBox='0 0 139 95' version='1.1' height='28'>\n                <defs>\n                  <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\n                    <stop stopColor='#000000' offset='0%'></stop>\n                    <stop stopColor='#FFFFFF' offset='100%'></stop>\n                  </linearGradient>\n                  <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\n                    <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\n                    <stop stopColor='#FFFFFF' offset='100%'></stop>\n                  </linearGradient>\n                </defs>\n                <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\n                  <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\n                    <g id='Group' transform='translate(400.000000, 178.000000)'>\n                      <path\n                        d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\n                        id='Path'\n                        className='text-primary'\n                        style={{ fill: 'currentColor' }}\n                      ></path>\n                      <path\n                        d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\n                        id='Path'\n                        fill='url(#linearGradient-1)'\n                        opacity='0.2'\n                      ></path>\n                      <polygon\n                        id='Path-2'\n                        fill='#000000'\n                        opacity='0.049999997'\n                        points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\n                      ></polygon>\n                      <polygon\n                        id='Path-2'\n                        fill='#000000'\n                        opacity='0.099999994'\n                        points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\n                      ></polygon>\n                      <polygon\n                        id='Path-3'\n                        fill='url(#linearGradient-2)'\n                        opacity='0.099999994'\n                        points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\n                      ></polygon>\n                    </g>\n                  </g>\n                </g>\n              </svg>\n              <h2 className='brand-text text-primary ms-1'>Turia</h2>\n            </Link>\n            <CardTitle tag='h4' className='mb-1'>\n              Welcome to Turia! 👋\n            </CardTitle>\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <div className='mb-1'>\n                <Label className='form-label required' for='login-email'>\n                  Email\n                </Label>\n                <Controller\n                  id='loginEmail'\n                  name='email'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      autoFocus\n                      type='email'\n                      disabled\n                      placeholder='john@example.com'\n                      invalid={errors.loginEmail && true}\n                      {...field}\n                    />\n                  )}\n                />\n              </div>\n              <div className='mb-1'>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label required' for='login-password'>\n                    Password\n                  </Label>\n                </div>\n                <Controller\n                  id='password'\n                  name='password'\n                  control={control}\n                  render={({ field }) => (\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\n                  )}\n                />\n                {errors.password && <FormFeedback>{errors.password?.message}</FormFeedback>}\n              </div>\n\n              <div className='mb-1'>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label required' for='login-password'>\n                    Confirm Password\n                  </Label>\n                </div>\n                <Controller\n                  control={control}\n                  id='confirmPassword'\n                  name='confirmPassword'\n                  render={({ field }) => (\n                    <InputPasswordToggle\n                      htmlFor='confirmPassword'\n                      className='input-group-merge'\n                      invalid={errors.confirmPassword && true}\n                      {...field}\n                    />\n                  )}\n                />\n                {errors.confirmPassword && <FormFeedback>{errors.confirmPassword.message}</FormFeedback>}\n              </div>\n\n              <div className='form-check mb-1'>\n                <Input type='checkbox' id='remember-me' />\n                <Label className='form-check-label' for='remember-me'>\n                  Remember Me\n                </Label>\n              </div>\n              <Button color='primary' block>\n                Sign in\n              </Button>\n            </Form>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nexport default invitationRegister\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}