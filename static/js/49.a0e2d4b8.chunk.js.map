{"version":3,"sources":["views/apps/invoice/clone/EditCard.js","views/apps/invoice/clone/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/apps/invoice/helper/hepler.js"],"names":["activeOrgId","activeOrganizationid","activeOrg","activeOrganization","userId","orgUserId","AddCard","data","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","id","useParams","MySwal","withReactContent","Swal","clientOptions","setClientOptions","serviceOptions","setServiceOptions","taxGroupOptions","setTaxGroupOptions","stateOptions","setStateOptions","accountOptions","setAccountOptions","finalTotal","setFinalTotal","finalSubTotal","setFinalSubTotal","invoiceItems","setInvoiceItems","invoiceTaxes","setInvoiceTaxes","userOptions","setuserOptions","selectedClient","setSelectedClient","taxValues","setTaxValues","accDetails","setAccDetails","exemptionReasonOptions","setExemptionReasonOptions","selEmployees","setSelEmployees","participants","setParticipants","isRCMapplicable","setisRCMapplicable","navigate","useNavigate","dispatch","useDispatch","store","useSelector","state","invoice","getOrganizationUsers","axios","post","then","response","arr","organizationusers","catch","err","console","log","deletefun","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","value","deleteInvoiceItem","dismiss","DismissReason","cancel","useEffect","status","clients","services","taxgroups","states","transactionaccounts","exemptionreasons","invoiceId","res","temp","taskinvoiceparticipants","map","obj","getClientData","getClient","payload","schema","yup","shape","updatedBy","default","contactId","required","uniqueIdentity","contactEmail","contactName","invoiceDate","paymentDue","placeOfSupplyId","subTotalAmount","totalAmount","totalTaxAmount","organizationId","isRcmApplicable","dueAmount","billingAddressLine1","billingAddressLine2","billingAddressState","billingAddressCity","billingAddressZipCode","billingCurrencyId","currencyid","bankAccountBankName","bankAccountBranchName","bankAccountHolderName","bankAccountId","bankAccountIfscCode","bankAccountNumber","organizationAddressLine1","addressline1","organizationAddressLine2","addressline2","organizationCity","organizationcity","organizationState","statename","organizationZipCode","pinzipcode","organizationName","name","organizationImageUrl","organizationimageid","organizationStateCode","stateshortname","organizationGstin","gstin","note","calculateTaxes","paymentStatus","rows","of","serviceId","sacCode","price","exemptionReasonId","nullable","isTaxApplicable","actualPrice","taxGroupId","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","reset","useFieldArray","keyName","fields","append","remove","onSubmit","updateInvoice","InvoiceItems","forEach","key","updateInvoiceItems","length","ind","findIndex","push","users","deletedUser","addInvoiceParticipant","addItem","taxPrice","description","ItemFinalTotalAmount","items","_formValues","finalsubTotalAmount","finalTaxAmount","parseFloat","output","a","taxes","parser","flat","reduce","acc","item","undefined","existItem","find","taxName","taxAmount","String","Object","assign","JSON","stringify","calculateInvoiceTax","removeItem","tempid","flg","loadItemData","service_price","tax_group_id","desFlg","priceFlg","sacFlg","taxFlg","itemFlg","eachObj","selectedService","saccode","sellingprice","taxgroupid","exemptionreasonid","calculateTaxAmount","invoice_item_taxes","taxGroups","taxApplicable","nontaxableflag","istaxapplicable","taxid","calculateTax","percentage","dataTemp","parseInt","toFixed","taxvaluefn","taxtype","stateid","taxType","taxdata","type","taxvalues","getTaxValue","bankAccountfn","bankName","branchAddress","accountHolderName","ifscCode","accountNumber","keys","billingaddresscity","billingaddressline1","billingaddressline2","billingaddressstatesname","billingaddresszip","currenciessymbol","currenciescode","currenciesname","email","placeofsupplyid","getInvoiceItemList","getInvoiceItems","contactid","uniqueno","contactemail","contactname","invoicedate","paymentdue","subtotalamount","totalamount","totaltaxamount","isrcmapplicable","dueamount","billingaddressstate","billingaddresszipcode","billingcurrencyid","bankaccountbankname","bankaccountbranchname","bankaccountholdername","bankaccountid","bankaccountifsccode","bankaccountnumber","organizationaddressline1","organizationaddressline2","organizationstate","organizationzipcode","organizationname","organizationimageurl","organizationstatecode","organizationgstin","paymentstatus","handleUserChange","e","tempArr","Array","isArray","x","blocking","loader","className","xl","md","sm","ErrorText","message","renderError","height","width","src","imageid","alt","size","placeholder","disabled","render","field","onChange","date","dateStr","options","altInput","altFormat","dateFormat","ref","inputRef","classnames","classNamePrefix","c","val","getOptionLabel","option","getOptionValue","target","checked","index","defaultValue","rules","invalid","onInput","lg","onClick","rowid","color","order","xs","for","outline","tag","Link","to","reviewer","isMulti","InvoiceEdit","setData","getInvoice","taskinvoices","EditCard","UILoader","props","children","overlayColor","Tag","style","defaultProps","ComponentSpinner","amount","taxRateInPercentage","TaxType","calculatedTax","str","parse","replace"],"mappings":"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","file":"static/js/49.a0e2d4b8.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Reactstrap Imports\nimport { Row, Col, Card, Input, Label, Button, CardBody, CardText, InputGroup, InputGroupText, FormFeedback } from 'reactstrap'\nimport classnames from 'classnames'\n\nimport { updateInvoice, updateInvoiceItems, getClient, getInvoiceItems, deleteInvoiceItem, addInvoiceParticipant } from '../store/index'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { calculateTax, parser } from '../helper/hepler'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\n\nconst AddCard = ({ data }) => {\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n  const { id } = useParams()\n  const MySwal = withReactContent(Swal)\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [accountOptions, setAccountOptions] = useState([])\n  const [finalTotal, setFinalTotal] = useState(0)\n  const [finalSubTotal, setFinalSubTotal] = useState(0)\n\n  const [invoiceItems, setInvoiceItems] = useState([])\n  const [invoiceTaxes, setInvoiceTaxes] = useState([])\n  const [userOptions, setuserOptions] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [taxValues, setTaxValues] = useState([])\n  const [accDetails, setAccDetails] = useState([])\n  const [exemptionReasonOptions, setExemptionReasonOptions] = useState([])\n  const [selEmployees, setSelEmployees] = useState([])\n  const [participants, setParticipants] = useState([])\n  const [isRCMapplicable, setisRCMapplicable] = useState(false)\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const store = useSelector(state => state.invoice)\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const getTaxValue = (taxType) => {\n    const taxdata = {\n      type: taxType\n    }\n    axios.post('/taxvalues/list', taxdata).then(response => {\n      const arr = response.data\n      setTaxValues(arr.taxvalues)\n    })\n  }\n\n  const getExemptionReason = () => {\n    axios.post('/exemptionreasons/dropdown').then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n\n  const getBankAccounts = () => {\n    axios.post('/transactionaccounts/dropdown').then(response => {\n      const arr = response.data\n      setAccountOptions(arr.transactionaccounts)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data.organizationusers\n      setuserOptions(arr)\n    }).catch((err) => {\n      console.log(err)\n    })\n  }\n\n  const getParticipants = () => {\n\n    axios.post('/taskinvoices/getparticipants', { invoiceId: id })\n      .then((res) => {\n        const temp = res.data.taskinvoiceparticipants.map((obj) => obj.id)\n        setSelEmployees(temp)\n        setParticipants(res.data.taskinvoiceparticipants)\n      })\n      .catch((err) => { console.log(err) })\n\n  }\n\n  const deletefun = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteInvoiceItem(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Conatct has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  useEffect(() => {\n    // ** Get Clients\n    getClients()\n    getServices()\n    getTaxGroups()\n    getStates()\n    getBankAccounts()\n    getExemptionReason()\n    getOrganizationUsers()\n    getParticipants()\n\n  }, [])\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n  }\n\n  const schema = yup.object().shape({\n    updatedBy: yup.string().default(userId),\n    id: yup.string().default(id),\n    contactId: yup.string().required(\"Please select a Client\"),\n    uniqueIdentity: yup.string(),\n    contactEmail: yup.string(),\n    contactName: yup.string(),\n    invoiceDate: yup.number(),\n    paymentDue: yup.number(),\n    placeOfSupplyId: yup.string().required(\"Please select a Place Of Supply\"),\n    subTotalAmount: yup.string(),\n    totalAmount: yup.string(),\n    totalTaxAmount: yup.string(),\n    organizationId: yup.string().default(activeOrgId),\n    isRcmApplicable: yup.boolean().default(false),\n    dueAmount: yup.string(),\n    billingAddressLine1: yup.string(),\n    billingAddressLine2: yup.string(),\n    billingAddressState: yup.string(),\n    billingAddressCity: yup.string(),\n    billingAddressZipCode: yup.string(),\n    billingCurrencyId: yup.string().default(activeOrg.currencyid),\n    bankAccountBankName: yup.string(),\n    bankAccountBranchName: yup.string(),\n    bankAccountHolderName: yup.string(),\n    bankAccountId: yup.string().required('Please Select Account'),\n    bankAccountIfscCode: yup.string(),\n    bankAccountNumber: yup.string(),\n    organizationAddressLine1: yup.string().default(activeOrg.addressline1),\n    organizationAddressLine2: yup.string().default(activeOrg.addressline2),\n    organizationCity: yup.string().default(activeOrg.organizationcity),\n    organizationState: yup.string().default(activeOrg.statename),\n    organizationZipCode: yup.string().default(activeOrg.pinzipcode),\n    organizationName: yup.string().default(activeOrg.name),\n    organizationImageUrl: yup.string().default(activeOrg.organizationimageid || ''),\n    organizationStateCode: yup.string().default(activeOrg.stateshortname),\n    organizationGstin: yup.string().default(activeOrg.gstin),\n    gstin: yup.string(),\n    note: yup.string().default(''),\n    calculateTaxes: yup.string(),\n    status: yup.number().default(1),\n    paymentStatus: yup.number().default(11),\n    rows: yup.array().of(\n      yup.object().shape({\n        id: yup.string(),\n        serviceId: yup.string().required(\"Please Select Service Item\"),\n        invoiceId: yup.string(),\n        sacCode: yup.string(),\n        price: yup.string(),\n        organizationId: yup.string().default(activeOrgId),\n        exemptionReasonId: yup.string().nullable(),\n        isTaxApplicable: yup.boolean().default(true),\n        actualPrice: yup.string().required(),\n        taxGroupId: yup.string().required(\"Pleace Select Tax\"),\n        subTotalAmount: yup.string().required(1)\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue, reset } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'rows', keyName: 'rowid' })\n\n  const onSubmit = async data => {\n    setBlock(true)\n    const temp = data.rows\n    setInvoiceItems(temp)\n    delete data.rows\n    await dispatch(updateInvoice(data))\n\n  }\n\n  const InvoiceItems = async (id) => {\n    invoiceItems.forEach((obj, key) => {\n      invoiceItems[key].invoiceId = id\n      invoiceItems[key].updatedBy = userId\n    })\n    await dispatch(updateInvoiceItems(invoiceItems))\n\n    if (selEmployees.length > 0) {\n      const temp = []\n      selEmployees.forEach((id) => {\n        const ind = participants.findIndex(obj => obj.id === id)\n        if (ind !== -1) {\n          temp.push(participants[ind].id)\n        }\n      })\n      const obj = { users: selEmployees, organizationId: activeOrgId, invoiceId: id, deletedUser: temp }\n      await dispatch(addInvoiceParticipant(obj))\n    }\n\n    navigate(`/invoice/view/${store.invoiceId}`)\n  }\n\n  useEffect(async () => {\n    if (store.invoiceId !== null && invoiceItems.length > 0) {\n      await InvoiceItems(store.invoiceId)\n    }\n  }, [store.invoiceId, invoiceItems])\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', exemptionReasonId: 0, isTaxApplicable: true, sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '' })\n  })\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n  const calculateInvoiceTax = () => {\n\n    const inputArray = control._formValues.rows.map(a => {\n      if (a.taxes) {\n        return parser(a.taxes)\n      } else {\n        return []\n      }\n    })\n\n    let temp = []\n    temp = inputArray.flat()\n    let output = []\n    output = temp.reduce((acc, item) => {\n      if (item !== undefined) {\n        const existItem = acc.find((obj) => {\n          return item.taxName === obj.taxName\n        })\n        if (existItem) {\n          existItem.taxAmount = parseFloat(existItem.taxAmount) + parseFloat(item.taxAmount)\n          existItem.taxAmount = String(existItem.taxAmount)\n        } else {\n          acc.push(Object.assign({}, item))\n        }\n      }\n      return acc\n    }, [])\n\n    setInvoiceTaxes(output)\n    setValue('calculateTaxes', JSON.stringify(output))\n\n  }\n\n  const ItemFinalTotalAmount = () => {\n\n    const items = control._formValues.rows\n    let finalTotal = 0\n    let finalsubTotalAmount = 0\n    let finalTaxAmount = 0\n    items.forEach(obj => {\n      finalTotal = parseFloat(obj.subTotalAmount) + parseFloat(finalTotal)\n      finalsubTotalAmount = parseFloat(obj.price) + parseFloat(finalsubTotalAmount)\n      finalTaxAmount = parseFloat(finalTaxAmount) + parseFloat(obj.taxPrice)\n    })\n\n    control._formValues.subTotalAmount = finalsubTotalAmount\n    control._formValues.totalAmount = finalTotal\n    control._formValues.dueAmount = finalTotal\n    control._formValues.totalTaxAmount = finalTaxAmount\n\n    setFinalTotal(finalTotal)\n    setFinalSubTotal(finalsubTotalAmount)\n    calculateInvoiceTax()\n  }\n\n  const removeItem = async (ind) => {\n    const tempid = control._formValues.rows[ind].id\n    let flg\n    if (tempid !== undefined) {\n      flg = await deletefun(tempid)\n    }\n    if (flg) {\n      remove(ind)\n    }\n    ItemFinalTotalAmount()\n  }\n\n  const loadItemData = (ind, desFlg = false, priceFlg = false, sacFlg = false, taxFlg = false, itemFlg = false) => {\n    const eachObj = control._formValues.rows[ind]\n    if (eachObj.serviceId === undefined || eachObj.serviceId === '') {\n      return false\n    }\n    if (serviceOptions.length === 0) {\n      return false\n    }\n    let service_price, tax_group_id\n    const selectedService = serviceOptions.find((a) => a.id === eachObj.serviceId)\n    setValue(`rows[${ind}].serviceId`, eachObj.serviceId)\n    if (itemFlg) {\n      setValue(`rows[${ind}].sacCode`, selectedService.saccode || '')\n      service_price = selectedService.sellingprice || 0\n      tax_group_id = selectedService.taxgroupid\n      setValue(`rows[${ind}].actualPrice`, service_price)\n      setValue(`rows[${ind}].price`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    } else {\n      setValue(`rows[${ind}].sacCode`, sacFlg ? eachObj.sacCode : selectedService.saccode)\n      service_price = priceFlg ? eachObj.price : selectedService.sellingprice || 0\n      tax_group_id = taxFlg ? eachObj.taxGroupId : selectedService.taxgroupid\n      setValue(`rows[${ind}].price`, service_price)\n      setValue(`rows[${ind}].actualPrice`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, desFlg ? eachObj.description : selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    }\n\n    let calculateTaxAmount = 0\n    const invoice_item_taxes = []\n\n    const taxGroups = taxGroupOptions.find((a) => a.id === tax_group_id)\n\n    const taxApplicable = taxGroups !== undefined ? !taxGroups.nontaxableflag : selectedService.istaxapplicable\n    setValue(`rows[${ind}].isTaxApplicable`, taxApplicable)\n\n    if (taxApplicable) {\n      if (taxGroups !== undefined) {\n        taxValues.forEach(obj => {\n          if (obj.taxid === tax_group_id) {\n            let temp = 0\n            temp = calculateTax(service_price, obj.percentage, 2)\n            calculateTaxAmount = parseFloat(calculateTaxAmount) + parseFloat(temp)\n            const dataTemp = {}\n            dataTemp[\"taxName\"] = `${obj.name} (${obj.percentage}%)`\n            dataTemp[\"taxId\"] = parseInt(obj.id)\n            dataTemp[\"taxNameValue\"] = obj.name\n            dataTemp[\"taxPercentage\"] = String(obj.percentage)\n            dataTemp[\"taxAmount\"] = String(temp)\n\n            invoice_item_taxes.push(dataTemp)\n          }\n        })\n      }\n    }\n\n    setValue(`rows[${ind}].subTotalAmount`, parseFloat(parseFloat(calculateTaxAmount || 0.00) + parseFloat(service_price || 0.00)).toFixed(2))\n    setValue(`rows[${ind}].taxPrice`, parseFloat(calculateTaxAmount).toFixed(2))\n    setValue(`rows[${ind}].taxes`, JSON.stringify(invoice_item_taxes))\n    setValue(`rows[${ind}].updatedBy`, userId)\n\n    ItemFinalTotalAmount()\n\n  }\n\n  const taxvaluefn = () => {\n    let taxtype = 1\n    if (activeOrg.stateid === control._formValues.placeOfSupplyId) {\n      taxtype = 2\n    }\n\n    getTaxValue(taxtype)\n  }\n\n  useEffect(() => {\n    if (taxValues.length > 0) {\n      if (typeof control._formValues.rows === 'object') {\n        control._formValues.rows.forEach((obj, ind) => {\n          loadItemData(ind, true, true, true, true, false)\n        })\n      }\n    }\n  }, [taxValues])\n\n  const bankAccountfn = (id) => {\n    const acc = accountOptions.find((obj) => obj.id === id)\n    if (acc !== undefined) {\n      setAccDetails(acc)\n      setValue('bankAccountBankName', acc.bankName)\n      setValue('bankAccountBranchName', acc.branchAddress)\n      setValue('bankAccountHolderName', acc.accountHolderName)\n      setValue('bankAccountIfscCode', acc.ifscCode)\n      setValue('bankAccountNumber', acc.accountNumber)\n    }\n  }\n\n  useEffect(() => {\n    if (accountOptions.length > 0) {\n      bankAccountfn(control._formValues.bankAccountId)\n    }\n  }, [accountOptions])\n\n  useEffect(() => {\n    if (Object.keys(selectedClient).length > 0) {\n      setValue('billingAddressCity', selectedClient.billingaddresscity || '')\n      setValue('billingAddressLine1', selectedClient.billingaddressline1 || '')\n      setValue('billingAddressLine2', selectedClient.billingaddressline2 || '')\n      setValue('billingAddressState', selectedClient.billingaddressstatesname || '')\n      setValue('billingAddressZipCode', selectedClient.billingaddresszip || '')\n      setValue('billingCurrencyId', selectedClient.currencyid || activeOrg.currencyid)\n      setValue('billingCurrencySymbol', selectedClient.currenciessymbol || '')\n      setValue('billingCurrencyShortName', selectedClient.currenciescode || '')\n      setValue('billingCurrencyName', selectedClient.currenciesname || '')\n      setValue('contactEmail', selectedClient.email || '')\n      setValue('gstin', selectedClient.gstin || '')\n      setValue('contactName', selectedClient.name || '')\n      setValue('placeOfSupplyId', selectedClient.placeofsupplyid || '')\n      taxvaluefn()\n    }\n\n  }, [selectedClient])\n\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        if (key !== 'rows') {\n          ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n        }\n      })\n    }\n    return ErrorText\n  }\n\n  const getInvoiceItemList = async (id) => {\n    if (id !== undefined) {\n      const res = await dispatch(getInvoiceItems(id))\n      setValue('rows', res.payload)\n    }\n  }\n\n  useEffect(async () => {\n    if (Object.keys(data).length > 0) {\n      const invoice = data\n      reset({\n        contactId: invoice.contactid,\n        uniqueIdentity: invoice.uniqueno,\n        contactEmail: invoice.contactemail,\n        contactName: invoice.contactname,\n        invoiceDate: invoice.invoicedate.length === 13 ? String(invoice.invoicedate / 1000) : invoice.invoicedate,\n        paymentDue: invoice.paymentdue.length === 13 ? String(invoice.paymentdue / 1000) : invoice.paymentdue,\n        placeOfSupplyId: invoice.placeofsupplyid,\n        subTotalAmount: invoice.subtotalamount,\n        totalAmount: invoice.totalamount,\n        totalTaxAmount: invoice.totaltaxamount,\n        isRcmApplicable: invoice.isrcmapplicable,\n        dueAmount: invoice.dueamount,\n        billingAddressLine1: invoice.billingaddressline1 || '',\n        billingAddressLine2: invoice.billingaddressline2 || '',\n        billingAddressState: invoice.billingaddressstate || '',\n        billingAddressCity: invoice.billingaddresscity || '',\n        billingAddressZipCode: invoice.billingaddresszipcode || '',\n        billingCurrencyId: invoice.billingcurrencyid || '',\n        bankAccountBankName: invoice.bankaccountbankname,\n        bankAccountBranchName: invoice.bankaccountbranchname,\n        bankAccountHolderName: invoice.bankaccountholdername,\n        bankAccountId: invoice.bankaccountid,\n        bankAccountIfscCode: invoice.bankaccountifsccode,\n        bankAccountNumber: invoice.bankaccountnumber,\n        organizationAddressLine1: invoice.organizationaddressline1 === '' ? activeOrg.addressline1 : invoice.organizationaddressline1,\n        organizationAddressLine2: invoice.organizationaddressline2 === '' ? activeOrg.addressline2 : invoice.organizationaddressline2,\n        organizationCity: invoice.organizationcity === '' ? activeOrg.organizationcity : invoice.organizationcity,\n        organizationState: invoice.organizationstate === '' ? activeOrg.statename : invoice.organizationstate,\n        organizationZipCode: invoice.organizationzipcode === '' ? activeOrg.pinzipcode : invoice.organizationzipcode,\n        organizationName: invoice.organizationname === '' ? activeOrg.name : invoice.organizationname,\n        organizationImageUrl: invoice.organizationimageurl === null ? activeOrg.organizationimageid : invoice.organizationimageurl,\n        organizationStateCode: invoice.organizationstatecode || '',\n        organizationGstin: invoice.organizationgstin === '' ? activeOrg.gstin : invoice.gstin,\n        gstin: invoice.gstin,\n        note: invoice.note,\n        status: invoice.status,\n        paymentStatus: invoice.paymentstatus\n\n      })\n      await getClientData(invoice.contactid)\n      await getInvoiceItemList(invoice.id)\n    }\n  }, [data])\n\n  const handleUserChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    setSelEmployees(tempArr)\n\n  }\n\n\n  return (\n\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Row className='invoice-add'>\n          <Fragment>\n            <Col xl={10} md={8} sm={12}>\n\n              <Card className='invoice-preview-card'>\n\n                {/* Header */}\n                <CardBody className='invoice-padding pb-0'>\n                  {\n                    renderError()\n                  }\n                  <div className='d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0'>\n                    <div>\n                      <div className='logo-wrapper'>\n                        <img className='rounded me-50' height={75} width={75} src={`https://drive.google.com/uc?id=${data.imageid}`} alt=\"Organisation Logo\" />\n                        <h3 className='text-primary invoice-logo'>{activeOrg.name}</h3>\n                      </div>\n                      <p className='card-text mb-25'>{activeOrg.addressline1}</p>\n                      <p className='card-text mb-25'>{activeOrg.addressline2}</p>\n                      <p className='card-text mb-0'>{activeOrg.organizationcity} - {activeOrg.pinzipcode}</p>\n                      <p className='card-text mb-0'>{activeOrg.statename}</p>\n                      <p className='card-text mb-0'>{activeOrg.gstin}</p>\n                    </div>\n                    <div className='invoice-number-date mt-md-0 mt-2'>\n                      <div className='d-flex align-items-center justify-content-md-end mb-1'>\n                        <h4 className='invoice-title'>Invoice</h4>\n                        <InputGroup className='input-group-merge invoice-edit-input-group disabled'>\n                          <InputGroupText>\n                            <Hash size={15} />\n                          </InputGroupText>\n                          <Input\n                            type='number'\n                            className='invoice-edit-input'\n                            value={3171}\n                            placeholder='53634'\n                            disabled\n                          />\n                        </InputGroup>\n                      </div>\n                      <div className='d-flex align-items-center mb-1'>\n                        <span className='title '>Invoice Date:</span>\n                        <Controller\n                          control={control}\n                          name={`invoiceDate`}\n                          id='invoiceDate'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"M j, Y\", dateFormat: \"U\" }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                      <div className='d-flex align-items-center'>\n                        <span className='title required'>Due Date:</span>\n                        <Controller\n                          control={control}\n                          name={`paymentDue`}\n                          id='paymentDue'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"M j, Y\", dateFormat: \"U\" }}\n                              className='form-control invoice-edit-input due-date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardBody>\n                {/* /Header */}\n\n                <hr className='invoice-spacing' />\n\n                {/* Address and Contact */}\n                <CardBody className='invoice-padding pt-0'>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title required'>Invoice To</h6>\n                      <div className='invoice-customer'>\n                        <Controller\n                          control={control}\n                          name={`contactId`}\n                          id={`contactId`}\n                          render={({ field, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors['contactId'] })}\n                              {...field}\n                              classNamePrefix='select'\n                              options={clientOptions}\n                              value={clientOptions.find(c => { return c.id === field.value })}\n                              onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                      </div>\n                      <Col className='pe-0 mt-xl-2' xl='4'>\n                        <table>\n                          {selectedClient &&\n                            <tbody>\n                              <tr>\n                                <td>{selectedClient.billingaddressline1}</td>\n                              </tr>\n                              <tr>\n                                <td>{selectedClient.billingaddressline2}</td>\n                              </tr>\n                              <tr>\n                                <td>{selectedClient.billingaddresscity} {selectedClient.billingaddresszip && `-`}  {selectedClient.billingaddresszip}</td>\n                              </tr>\n                              <tr>\n                                <td>{selectedClient.billingaddressstatesname}</td>\n                              </tr>\n\n                            </tbody>\n                          }\n                        </table>\n                      </Col>\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                    <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                      <h6 className='mb-2'>Payment Details:</h6>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td className='pe-1'>Bank Name:</td>\n                            <td>\n                              {accDetails.bankName && <span className='fw-bolder'>{accDetails.bankName}</span>}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account name:</td>\n                            <td>{accDetails.accountHolderName && <span className='fw-bolder'>{accDetails.accountHolderName}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Branch Name:</td>\n                            <td> {accDetails.branchAddress && <span className='fw-bolder'>{accDetails.branchAddress}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>IFSC Code:</td>\n                            <td>{accDetails.ifscCode && <span className='fw-bolder'>{accDetails.ifscCode} </span>}</td>\n                          </tr>\n                          {selectedClient.currenciescode &&\n                            <tr>\n                              <td className='pe-1'>Currency code:</td>\n                              <td>{selectedClient.currenciescode}</td>\n                            </tr>\n                          }\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title mt-2 required'>Place Of Supply</h6>\n                      <div className='invoice-customer'>\n                        <Controller\n                          control={control}\n                          name={`placeOfSupplyId`}\n                          id={`placeOfSupplyId`}\n                          render={({ field, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors['placeOfSupplyId'] })}\n                              {...field}\n                              classNamePrefix='select'\n                              options={stateOptions}\n                              value={stateOptions.find(c => { return c.id === field.value })}\n                              onChange={val => { field.onChange(val.id); taxvaluefn() }}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                      </div>\n                      {(selectedClient.gstin !== '' && selectedClient.gstin !== undefined) && <div className='mt-1'> GSTIN : {selectedClient.gstin}</div>}\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                    <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td className='pe-1'>RCM Applicable:</td>\n                            <td>\n                              <div className='form-switch form-check-success'>\n                                <Controller\n                                  control={control}\n                                  name={`isRcmApplicable`}\n                                  id='isRcmApplicable'\n                                  render={({ }) => (\n                                    <Input type='switch' id='switch-success' onChange={(e) => { setisRCMapplicable(!isRCMapplicable); setValue('isRcmApplicable', e.target.checked) }} />\n                                  )}\n                                />\n                              </div></td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Address and Contact */}\n\n                {/* Product Details */}\n                <CardBody className='invoice-padding invoice-product-details'>\n                  {fields.map((item, index) => {\n                    return (\n                      <div key={item.rowid} className='repeater-wrapper'>\n                        <Row>\n                          <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                            <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                              <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                                <Controller\n                                  control={control}\n                                  defaultValue={`${item.serviceId}`}\n                                  name={`rows[${index}].serviceId`}\n                                  rules={{ required: true }}\n                                  render={({ field, ref }) => (\n                                    <Select\n                                      {...field}\n                                      inputRef={ref}\n                                      className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.serviceId })}\n                                      classNamePrefix='select'\n                                      options={serviceOptions}\n                                      value={serviceOptions.find(c => c.id === field.value)}\n                                      onChange={val => { field.onChange(val.id); loadItemData(index, false, false, false, false, true) }}\n                                      getOptionLabel={(option) => option.name}\n                                      getOptionValue={(option) => option.id}\n                                    />\n                                  )}\n                                />\n                                {errors.rows?.[index]?.serviceId && <FormFeedback>{errors.rows?.[index]?.serviceId.message}</FormFeedback>}\n                                <Controller\n                                  id={`rows_${index}_description`}\n                                  defaultValue={`${item.description}`}\n                                  name={`rows[${index}].description`}\n                                  control={control}\n                                  render={({ field }) => <Input className='mt-1' invalid={errors.rows?.[index]?.description && true} onInput={(val) => { field.onChange(val); loadItemData(index, true, false, false, false, false) }} {...field} />}\n                                />\n                              </Col>\n                              <Col className='my-lg-0 my-2 col-lg-2 col-sm-12'>\n                                <CardText className='col-title mb-md-2 mb-0'>SAC Code</CardText>\n                                <Controller\n                                  id={`rows_${index}_sacCode`}\n                                  defaultValue={`${item.sacCode}`}\n                                  name={`rows[${index}].sacCode`}\n                                  control={control}\n                                  render={({ field }) => <Input type='text' invalid={errors.rows?.[index]?.sacCode && true} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, true, false, false) }} {...field} />}\n                                />\n                                {errors.rows?.[index]?.sacCode && <FormFeedback>{errors.rows?.[index]?.sacCode.message}</FormFeedback>}\n                              </Col>\n                              <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                                <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                                <Controller\n                                  defaultValue={item.price}\n                                  id={`rows_${index}_price`}\n                                  name={`rows[${index}].price`}\n                                  control={control}\n                                  render={({ field }) => <Input type='number' id={`input_rows_${index}_price`} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, false, false, false) }} {...field} invalid={errors.rows?.[index]?.price && true} />}\n                                />\n                                {errors.rows?.[index]?.price && <FormFeedback>{errors.rows?.[index]?.price.message}</FormFeedback>}\n                              </Col>\n                              <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Tax Rate</CardText>\n                                <Controller\n                                  control={control}\n                                  defaultValue={item.taxGroupId}\n                                  name={`rows[${index}].taxGroupId`}\n                                  rules={{ required: true }}\n                                  render={({ field, ref }) => (\n                                    <Select\n                                      {...field}\n                                      inputRef={ref}\n                                      className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                      classNamePrefix='select'\n                                      options={taxGroupOptions}\n                                      value={taxGroupOptions.find(c => c.id === field.value)}\n                                      onChange={(val) => { field.onChange(val.id); loadItemData(index, false, true, false, true, false) }}\n                                      getOptionLabel={(option) => option.name}\n                                      getOptionValue={(option) => option.id}\n                                    />\n                                  )}\n                                />\n                                {errors.rows?.[index]?.taxGroupId && <FormFeedback>{errors.rows?.[index]?.taxGroupId.message}</FormFeedback>}\n                                {\n                                  !item.isTaxApplicable && <Controller\n                                    control={control}\n                                    name={`rows[${index}].exemptionReasonId`}\n                                    rules={{ required: true }}\n                                    render={({ field, ref }) => (\n                                      <Select\n                                        {...field}\n                                        inputRef={ref}\n                                        className={classnames('react-select mt-1', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                        classNamePrefix='select'\n                                        options={exemptionReasonOptions}\n                                        value={exemptionReasonOptions.find(c => c.id === field.value)}\n                                        onChange={(val) => { field.onChange(val.id) }}\n                                        getOptionLabel={(option) => option.name}\n                                        getOptionValue={(option) => option.id}\n                                      />\n                                    )}\n                                  />\n                                }\n                              </Col>\n                              <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                                {control._formValues.rows[index].subTotalAmount}\n                              </Col>\n                            </Row>\n                            <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                              <X size={18} className='cursor-pointer' onClick={() => { removeItem(index) }} />\n                            </div>\n                          </Col>\n                        </Row>\n                      </div>\n                    )\n                  })}\n                  <Row className='mt-1'>\n                    <Col sm='12' className='px-0'>\n                      <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                        <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                      </Button>\n                    </Col>\n                  </Row>\n                </CardBody>\n\n                {/* /Product Details */}\n\n                {/* Invoice Total */}\n                <CardBody className='invoice-padding'>\n                  <Row className='invoice-sales-total-wrapper'>\n                    <Col className='mt-md-0 mt-3' md={{ size: '6', order: 1 }} xs={{ size: 12, order: 2 }}>\n\n                    </Col>\n                    <Col className='d-flex justify-content-end' md={{ size: '6', order: 2 }} xs={{ size: 12, order: 1 }}>\n                      <div className='invoice-total-wrapper'>\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Pre Tax Amount:</p>\n                          <p className='invoice-total-amount'>{finalSubTotal}</p>\n                        </div>\n                        {!isRCMapplicable && <div>\n                          {\n                            invoiceTaxes.map((obj, ind) => {\n                              return (<div key={ind} className='invoice-total-item'>\n                                <p className='invoice-total-title'>{obj?.taxName}</p>\n                                <p className='invoice-total-amount'>{obj?.taxAmount}</p>\n                              </div>)\n                            })\n                          }\n                        </div>\n                        }\n                        <hr className='my-50' />\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Total Payable:</p>\n                          <p className='invoice-total-amount'>{finalTotal}</p>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Total */}\n\n                <hr className='invoice-spacing mt-0' />\n\n                {/* Invoice Note */}\n                <CardBody className='invoice-padding py-0'>\n                  <Row>\n                    <Col>\n                      <div className='mb-2'>\n                        <Label for='note' className='form-label fw-bold'>\n                          Note:\n                        </Label>\n                        <Controller\n                          id='note'\n                          name='note'\n                          control={control}\n                          render={({ field }) => <Input type=\"textarea\" value={field.value} invalid={errors.note && true} {...field} />}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Note */}\n              </Card>\n\n            </Col>\n            <Col xl={2} md={4} sm={12}>\n              <Card className='invoice-action-wrapper'>\n                <CardBody>\n                  {/* <Button color='primary' block className='mb-75' disabled>\n            Send Invoice\n          </Button>\n          <Button tag={Link} to='/invoice/preview' color='primary' block outline className='mb-75'>\n            Preview\n          </Button> */}\n                  <Button color='primary' type='submit' block outline className='mb-75'>\n                    Save\n                  </Button>\n                  <Button color='warning' block outline tag={Link} to={`/invoice/view/${id}`}>\n                    Cancel\n                  </Button>\n                </CardBody>\n              </Card>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50 required'>Accept payments via</p>\n                  <Controller\n                    control={control}\n                    name={`bankAccountId`}\n                    rules={{ required: true }}\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select mt-1', { 'is-invalid': errors.bankAccountId })}\n                        classNamePrefix='select'\n                        options={accountOptions}\n                        value={accountOptions.find(c => c.id === field.value)}\n                        onChange={(val) => { field.onChange(val.id); bankAccountfn(val.id) }}\n                        getOptionLabel={(option) => option.accountHolderName}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50'>Select Employee</p>\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        defaultValue={participants}\n                        value={participants} // set selected values\n                        onChange={handleUserChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        styles={colourStyles}\n                      />\n                    )}\n\n                  />\n                </div>\n              </div>\n            </Col>\n          </Fragment >\n        </Row>\n      </form >\n    </UILoader>\n  )\n}\n\nexport default AddCard\n","// ** React Imports\nimport { useEffect, useState } from 'react'\nimport { useParams, Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\n\n// ** Reactstrap Imports\nimport { Alert, Row, Col } from 'reactstrap'\n\n// ** Invoice Edit Components\nimport EditCard from './EditCard'\n\nconst InvoiceEdit = () => {\n  // ** Hooks\n  const { id } = useParams()\n\n  // ** States\n  const [data, setData] = useState(null)\n\n  // ** Get invoice on mount based on id\n  const getInvoice = async () => {\n    axios.post('/taskinvoices/get', { id }).then((res) => {\n      setData(res.data.taskinvoices)\n    }).catch((err) => { console.log(err) })\n\n  }\n\n  useEffect(() => {\n    getInvoice()\n  }, [])\n\n  return data !== null && data !== undefined ? (\n    <div className='invoice-edit-wrapper'>\n      <Row className='invoice-edit'>\n        <Col xl={12} md={8} sm={12}>\n          <EditCard data={data} />\n        </Col>\n      </Row>\n    </div>\n  ) : (\n    <Alert color='danger'>\n      <h4 className='alert-heading'>Invoice not found</h4>\n      <div className='alert-body'>\n        Invoice with id: {id} doesn't exist. Check list of all invoices:{' '}\n        <Link to='/apps/invoice/list'>Invoice List</Link>\n      </div>\n    </Alert>\n  )\n}\n\nexport default InvoiceEdit\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","export const calculateTax = (amount, taxRateInPercentage, TaxType) => {\n    let calculatedTax = 0\n    if (TaxType === 1) { //Inclusive\n        calculatedTax = parseFloat(amount) - (parseFloat(amount) * (100 / (100 + parseFloat(taxRateInPercentage))))\n        // calculatedTax = parseFloat(amount) - parseFloat(calculatedTax);\n\n    } else if (TaxType === 2) { //Exclusive\n        calculatedTax = (parseFloat(amount) * parseFloat(taxRateInPercentage)) / 100\n    }\n    return parseFloat(calculatedTax)\n}\n\nexport const parser = (str) => {\n\n    return JSON.parse(str.replace(/\\\\/g, ''))\n\n}"],"sourceRoot":""}