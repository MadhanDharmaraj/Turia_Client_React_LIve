{"version":3,"sources":["views/apps/recurring-task/view/UserInfoCard.js","views/apps/recurring-task/view/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/apps/recurring-task/store/index.js"],"names":["statusColors","withReactContent","Swal","active","pending","inactive","UserInfoCard","selectedTask","id","useParams","useForm","defaultValues","username","servicename","dateFormat","value","length","moment","format","unix","className","clientname","recurringid","nextrecurringstartdate","nextrecurringenddate","color","priority","Can","I","a","tag","Link","to","outline","TaskView","store","useSelector","state","task","dispatch","useDispatch","useState","block","setBlock","Loader","useEffect","getTask","undefined","blocking","loader","xl","lg","xs","order","md","size","UILoader","props","children","overlayColor","Tag","classnames","style","backgroundColor","defaultProps","ComponentSpinner","userId","orgUserId","getData","createAsyncThunk","params","axios","post","response","data","tasks","totalPages","total","getClient","clients","addTask","addTaskParticipants","taskparticpants","updateInvocieId","taskworkflows","updateTask","deleteTask","getState","updatedBy","addDescription","res","taskconversations","updateDescription","cloneWorkFlows","exportTask","ws","XLSX","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","bookType","type","Blob","FileSaver","createSlice","name","initialState","allData","taskId","editflag","reducers","extraReducers","builder","addCase","fulfilled","action","payload"],"mappings":"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","file":"static/js/80.366cfbaa.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment } from 'react'\nimport { Link, useParams } from 'react-router-dom'\n// ** Reactstrap Imports\nimport { Card, CardBody, Button, Badge } from 'reactstrap'\nimport { Can } from '@src/utility/context/Can.js'\n// ** Third Party Components\nimport Swal from 'sweetalert2'\nimport { useForm } from 'react-hook-form'\nimport withReactContent from 'sweetalert2-react-content'\nconst MySwal = withReactContent(Swal)\n// ** Custom Components\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport moment from 'moment'\n\nconst statusColors = {\n  active: 'light-success',\n  pending: 'light-warning',\n  inactive: 'light-secondary'\n}\n\n\nconst UserInfoCard = ({ selectedTask }) => {\n  // ** State\n\n  const { id } = useParams()\n\n  const durationArr = ['', 'Monthly', 'Yearly', 'Quaterly', 'Daily']\n\n  // ** Hook\n  const {\n    formState: { }\n  } = useForm({\n    defaultValues: {\n      username: selectedTask.servicename\n    }\n  })\n\n  const dateFormat = (value) => {\n    if (value.length === 13) {\n      return moment(value, 'x').format(\"MMM DD, YYYY\")\n    } else {\n      return moment.unix(value).format(\"MMM DD, YYYY\")\n    }\n  }\n\n  return (\n    <Fragment>\n      <Card>\n        <CardBody>\n          <div className='info-container'>\n            {selectedTask !== null ? (\n              <ul className='list-unstyled'>\n                <li className='mb-75'>\n                  <span className='fw-bolder me-25'>Client Name:</span>\n                  <span>{selectedTask.clientname}</span>\n                </li>\n                <li className='mb-75'>\n                  <span className='fw-bolder me-25'>Service Name:</span>\n                  <span>{selectedTask.servicename}</span>\n                </li>\n                <li className='mb-75'>\n                  <span className='fw-bolder me-25'>Duration:</span>\n                  <span>{durationArr[selectedTask.recurringid]}</span>\n                </li>\n                <li className='mb-75'>\n                  <span className='fw-bolder me-25'>Next Start Date:</span>\n                  <span>{dateFormat(selectedTask.nextrecurringstartdate)}</span>\n                </li>\n                <li className='mb-75'>\n                  <span className='fw-bolder me-25'>Next End Date:</span>\n                  <span>{dateFormat(selectedTask.nextrecurringenddate)}</span>\n                </li>\n                <li className='mb-75'>\n                  <span className='fw-bolder me-25'>Priority:</span>\n                  <Badge className='text-capitalize' color={statusColors[selectedTask.priority]}>\n                    Medium\n                  </Badge>\n                </li>\n\n              </ul>\n            ) : null}\n          </div>\n          <div className='d-flex justify-content-center pt-2'>\n            <Can I={'write'} a={'recurring-task'}>\n              <Button color='primary' tag={Link} to={`/recurring-task/edit/${id}`}>\n                Edit\n              </Button>\n            </Can>\n            <Button className='ms-1' color='danger' outline tag={Link} to={`/recurring-task/list`}>\n              Cancel\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </Fragment>\n  )\n}\n\nexport default UserInfoCard\n","// ** React Imports\nimport { useEffect, useState, Fragment } from 'react'\nimport { useParams, Link } from 'react-router-dom'\n\n// ** Store & Actions\nimport { getTask } from '../store'\nimport { useSelector, useDispatch } from 'react-redux'\n\n// ** Reactstrap Imports\nimport { Row, Col, Alert } from 'reactstrap'\n\n// ** User View Components\nimport UserInfoCard from './UserInfoCard'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst TaskView = () => {\n  // ** Store Vars\n  const store = useSelector(state => state.task)\n  const dispatch = useDispatch()\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  // ** Hooks\n  const { id } = useParams()\n\n  // ** Get suer on mount\n  useEffect(async () => {\n    if (id !== null) {\n      setBlock(true)\n      await dispatch(getTask(id))\n      setBlock(false)\n    }\n  }, [dispatch])\n\n\n  return store.selectedTask !== null && store.selectedTask !== undefined ? (\n    <UILoader blocking={block} loader={<Loader />}>\n      <div className='app-user-view'>\n        <Row>\n          <Col xl='4' lg='5' xs={{ order: 1 }} md={{ order: 0, size: 5 }}>\n            <UserInfoCard selectedTask={store.selectedTask} />\n          </Col>\n        </Row>\n      </div>\n    </UILoader>\n  ) : (\n    <UILoader blocking={block} loader={<Loader />}>\n      <Alert color='danger'>\n        <h4 className='alert-heading'>Task not found</h4>\n        <div className='alert-body'>\n          Task with id: {id} doesn't exist. Check list of all Tasks: <Link to='/recurring-task/list'>Tasks List</Link>\n        </div>\n      </Alert>\n    </UILoader>\n  )\n}\nexport default TaskView\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport * as FileSaver from \"file-saver\"\nimport * as XLSX from \"xlsx\"\n// ** Axios Imports\nimport axios from '@src/configs/axios/axiosConfig'\nimport { orgUserId } from '@src/helper/sassHelper'\nconst userId = orgUserId()\n\nexport const getData = createAsyncThunk('appTasks/getData', async params => {\n  const response = await axios.post('/tasks/list', params)\n  return {\n    params,\n    data: response.data.tasks.tasks,\n    totalPages: response.data.tasks.total\n  }\n})\n\nexport const getClient = createAsyncThunk('appTasks/getClient', async id => {\n  const response = await axios.post('/clients/get', { id })\n  return response.data.clients\n})\n\nexport const getTask = createAsyncThunk('appTasks/getTask', async id => {\n  const response = await axios.post('/tasks/recurringtaskget', { id })\n  return response.data.task\n})\n\nexport const addTask = createAsyncThunk('appTasks/addTask', async (task, { }) => {\n  const response = await axios.post('/tasks/create', task)\n  return response.data.task\n})\n\nexport const addTaskParticipants = createAsyncThunk('appTasks/addTaskParticipants', async (taskparticpants, { }) => {\n  await axios.post('/taskparticpants/create', taskparticpants)\n  return []\n})\n\nexport const addTaskWorkflow = createAsyncThunk('appTasks/addTaskWorkflow', async (taskworkflows, { }) => {\n  await axios.post('/recurring-taskworkflows/create', taskworkflows)\n  return []\n})\n\nexport const updateInvocieId = createAsyncThunk('appTasks/updateInvocieId', async (data, { }) => {\n  await axios.post('/tasks/updateinvocieid', data)\n  return response.data.task\n})\n\nexport const updateTask = createAsyncThunk('appTasks/updateTask', async (task, { }) => {\n  const response = await axios.post('/tasks/update', task)\n  return response.data.task\n})\n\nexport const deleteTask = createAsyncThunk('appTasks/deleteTask', async (id, { dispatch, getState }) => {\n  await axios.post('/tasks/delete', { id, updatedBy :userId })\n  await dispatch(getData(getState().tasks.params))\n  return id\n})\n\nexport const addDescription = createAsyncThunk('appTasks/addDescription', async (data, { }) => {\n  const res = await axios.post('/taskconversations/create', data)\n  return res.data.taskconversations\n})\n\nexport const updateDescription = createAsyncThunk('appTasks/addDescription', async (data, { }) => {\n  const res = await axios.post('/taskconversations/update', data)\n  return res.data.taskconversations\n})\n\nexport const cloneWorkFlows = createAsyncThunk('appTasks/cloneWorkFlows', async (data, { }) => {\n  const res = await axios.post('/taskworkflows/clone', data)\n  return res.data.taskworkflows\n})\n\nexport const exportTask = createAsyncThunk('appTasks/exportTask', async params => {\n  const response = await axios.post(`/tasks/exportToExcel`, params)\n\n  const ws = XLSX.utils.json_to_sheet(response.data.tasks)\n  const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] }\n  const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" })\n  const data = new Blob([excelBuffer], { type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\" })\n  FileSaver.saveAs(data, 'recurring_task.xlsx')\n\n})\n\nexport const appTasksSlice = createSlice({\n  name: 'appTasks',\n  initialState: {\n    data: [],\n    total: 1,\n    params: {},\n    allData: [],\n    selectedTask: null,\n    taskId: null,\n    editflag : true\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getData.fulfilled, (state, action) => {\n        state.data = action.payload.data\n        state.params = action.payload.params\n        state.total = action.payload.totalPages\n        state.selectedTask = null\n      })\n      .addCase(getTask.fulfilled, (state, action) => {\n        state.selectedTask = action.payload\n        state.taskId = null\n      })\n      .addCase(addTask.fulfilled, (state, action) => {\n        state.taskId = action.payload\n      })\n      .addCase(updateTask.fulfilled, (state, action) => {\n        state.taskId = action.payload\n      })\n  }\n})\n\nexport default appTasksSlice.reducer\n"],"sourceRoot":""}