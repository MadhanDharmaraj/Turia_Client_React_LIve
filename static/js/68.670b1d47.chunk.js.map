{"version":3,"sources":["views/apps/client/edit/EditCard.js","views/apps/client/edit/index.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","EditCard","MySwal","withReactContent","Swal","phoneRegExp","navigate","useNavigate","store","useSelector","state","client","dispatch","useDispatch","useState","businessEntityOptions","setBusinessEntityOptions","stateOptions","setStateOptions","countryOptions","setCountryOptions","currencyOptions","setCurrencyOptions","gstRegistrationTypeOptions","setGstRegistrationTypeOptions","clientType","setClientType","clientInfo","setClientInfo","contactId","setConatctId","clientDetails","setClientDetails","schema","yup","shape","updatedBy","default","uniqueIdentity","nullable","contactPersonName","required","name","when","is","then","contactnumber","matches","message","excludeEmptyString","email","businessEntity","gstRegistrationType","gstin","placeOfSupply","currency","billingAddressLine1","billingAddressLine2","billingAddressCity","billingAddressState","billingAddressCountry","billingAddressZip","contact_info","of","createdBy","min","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","reset","control","errors","formState","id","useParams","useFieldArray","keyName","fields","append","remove","onSubmit","data","a","temp","updateClient","predata","deletefun","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","value","deleteContactInfo","dismiss","DismissReason","cancel","removeItem","ind","undefined","tempid","_formValues","flg","getClientInfo","getConatctInfo","getClientData","getClient","payload","useEffect","Object","keys","length","uniqueidentity","contactpersonname","organization","organizationid","businessentityid","gstregistrationtypeid","placeofsupplyid","currencyid","billingaddressline1","billingaddressline2","billingaddresscountry","billingaddressstate","billingaddresszip","billingaddresscity","clientInformations","forEach","obj","rows","updateContactInfo","saveContactInfo","axios","post","response","arr","businessentities","countries","currencies","gstregistrationtypes","states","getRow","fieldLabel","fieldName","reqflag","className","sm","size","classnames","for","render","field","invalid","getSelectRow","options","ref","inputRef","classNamePrefix","isDisabled","find","c","onChange","val","getOptionLabel","option","getOptionValue","md","type","defaultChecked","onInput","map","item","i","lg","designation","onClick","rowid","color","contactid","primarystatus","outline","tag","Link","to","ClientEdit","xl"],"mappings":"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","file":"static/js/68.670b1d47.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport classnames from 'classnames'\nimport { useDispatch, useSelector } from 'react-redux'\n// ** Custom Components\nimport { updateClient, updateContactInfo, getClient, getConatctInfo, deleteContactInfo } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\n\nimport { X, Plus } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback, CardTitle, CardHeader } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\nconst EditCard = () => {\n\n  // ** States\n  const MySwal = withReactContent(Swal)\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const zipcodeExp = /^[0-9\\- ]{6,6}$/\n  const navigate = useNavigate({})\n  const store = useSelector(state => state.client)\n  const dispatch = useDispatch()\n  const [businessEntityOptions, setBusinessEntityOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [gstRegistrationTypeOptions, setGstRegistrationTypeOptions] = useState([])\n  const [clientType, setClientType] = useState(2)\n  const [clientInfo, setClientInfo] = useState([])\n  const [contactId, setConatctId] = useState(null)\n  const [clientDetails, setClientDetails] = useState({})\n\n  const schema = yup.object().shape({\n    clientType: yup.number(),\n    updatedBy: yup.string().default(userId),\n    uniqueIdentity: yup.string().nullable(),\n    contactPersonName: yup.string().required(\"Please Enter a Contact Person Name\"),\n    name: yup.string().when([\"clientType\"], { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Enter Business Name.\") }),\n    contactnumber: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n    email: yup.string().email(\"Please Enter valid Email\").required(\"Please Enter valid Email\"),\n    businessEntity: yup.string().when([\"clientType\"], { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Select Business Enity.\") }),\n    gstRegistrationType: yup.string().required(\"Please select a GST Type\"),\n    gstin: yup.string().required(\"Please Enter GSTIN No\"),\n    placeOfSupply: yup.string().required(\"Please select Place Of Supply\"),\n    currency: yup.string(),\n    billingAddressLine1: yup.string().nullable(),\n    billingAddressLine2: yup.string().nullable(),\n    billingAddressCity: yup.string().nullable(),\n    billingAddressState: yup.number().nullable(),\n    billingAddressCountry: yup.number().nullable(),\n    billingAddressZip: yup.string().matches(zipcodeExp, { message: 'Zip Code is not valid', excludeEmptyString: true }),\n    contact_info: yup.array().of(\n      yup.object().shape({\n        updatedBy: yup.string().default(userId),\n        createdBy: yup.string().default(userId),\n        name: yup.string().required(\"Please Enter A Name\"),\n        email: yup.string().email().required(\"Please Enter valid Email\"),\n        contactnumber: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true })\n      })\n    ).min(1, \"Please Enter atleast one contact Info\")\n\n  })\n\n  const { handleSubmit, reset, control, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n  const { id } = useParams()\n  const { fields, append, remove } = useFieldArray({ name: 'contact_info', control, keyName: 'rowid' })\n\n  const saveContactInfo = () => {\n\n    const data = { rows: clientInfo }\n    dispatch(updateContactInfo(data))\n    navigate(`/client/view/${contactId}`)\n\n  }\n\n  const onSubmit = async (data) => {\n\n    const temp = data.contact_info\n    delete data.contact_info\n    const id = clientDetails.id\n    await dispatch(updateClient({ data, id }))\n\n    setClientInfo(predata => ([...predata, ...temp]))\n\n  }\n\n  const deletefun = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteContactInfo(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Conatct has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  const addItem = (() => {\n    append({ id: '', name: '', email: '', contactnumber: '', contactid: id, organizationid: activeOrgId, designation: '', primarystatus: false })\n  })\n\n  const removeItem = async (ind) => {\n    const tempid = control._formValues.contact_info[ind].id\n    let flg\n    if (tempid !== undefined) {\n      flg = await deletefun(tempid)\n    }\n    if (flg) {\n      remove(ind)\n    }\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityOptions(arr.businessentities)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/list').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getCurrency = () => {\n    axios.post('/currencies/list').then(response => {\n      const arr = response.data\n      setCurrencyOptions(arr.currencies)\n    })\n  }\n\n  const getGSTRegType = () => {\n    axios.post('/gstregistrationtypes/list').then(response => {\n      const arr = response.data\n      setGstRegistrationTypeOptions(arr.gstregistrationtypes)\n    })\n  }\n\n  const getClientInfo = async () => {\n    await dispatch(getConatctInfo(contactId))\n\n  }\n\n  const getClientData = async () => {\n    const client = await dispatch(getClient(id))\n    setClientDetails(client.payload)\n  }\n\n  useEffect(() => {\n\n    if (Object.keys(clientDetails).length > 0) {\n      reset({\n        clientType: 1,\n        uniqueIdentity: clientDetails.uniqueidentity,\n        contactPersonName: clientDetails.contactpersonname,\n        organization: clientDetails.organizationid,\n        name: clientDetails.name,\n        contactnumber: clientDetails.contactnumber,\n        businessEntity: clientDetails.businessentityid,\n        email: clientDetails.email,\n        gstRegistrationType: clientDetails.gstregistrationtypeid,\n        gstin: clientDetails.gstin,\n        placeOfSupply: clientDetails.placeofsupplyid,\n        currency: clientDetails.currencyid,\n        billingAddressLine1: clientDetails.billingaddressline1,\n        billingAddressLine2: clientDetails.billingaddressline2,\n        billingAddressCountry: clientDetails.billingaddresscountry,\n        billingAddressState: clientDetails.billingaddressstate,\n        billingAddressZip: clientDetails.billingaddresszip,\n        billingAddressCity: clientDetails.billingaddresscity\n      })\n\n      setConatctId(clientDetails.id)\n\n    }\n\n    if (contactId !== null) {\n      getClientInfo()\n    }\n\n  }, [contactId, clientDetails])\n\n  useEffect(() => {\n    store.clientInformations.forEach((obj) => {\n      append(obj)\n    })\n  }, [store.clientInformations])\n\n  useEffect(() => {\n    if (clientInfo.length) {\n      saveContactInfo()\n    }\n  }, [clientInfo])\n\n  useEffect(() => {\n    getBusineessEntity()\n    getCountries()\n    getCurrency()\n    getGSTRegType()\n    getStates()\n\n    getClientData()\n\n  }, [])\n\n\n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='4' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='8'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='4' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='8'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                isDisabled={fieldName === 'currency'}\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => field.onChange(val.id)}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardHeader>\n          <CardTitle> Edit Client</CardTitle>\n        </CardHeader>\n        <CardBody className='pb-0'>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='4' size='lg' className='form-label required' for='contactPersonName'>\n                  Client Type\n                </Label>\n                <Col sm='8'>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      control={control}\n                      render={({ field }) => <Input type='radio' id='clientType_1' defaultChecked value={2} {...field} onInput={() => setClientType(2)} />}\n                    />\n                    <Label className='form-check-label' for='clientType_1'>\n                      Business\n                    </Label>\n                  </div>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      control={control}\n                      render={({ field }) => <Input id='clientType_2' type='radio' value={1} {...field} onInput={() => setClientType(1)} />}\n                    />\n                    <Label className='form-check-label' for='clientType_2'>\n                      Individual\n                    </Label>\n                  </div>\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Unique No', 'uniqueIdentity', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Contact Person Name', 'contactPersonName', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Business Name', 'name', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Mobile Number', 'contactnumber')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Email ID', 'email', true)}\n            </Col>\n          </Row>\n\n          {clientType === 2 && (\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('Business Entity', 'businessEntity', businessEntityOptions, true)}\n              </Col>\n            </Row>\n          )}\n        </CardBody>\n        {/* /Header */}\n\n        <hr className='invoice-spacing' />\n        {errors.contact_info && <p className='text-danger ms-2'>{errors.contact_info?.message}</p>}\n        {/* Product Details */}\n        <CardBody className='invoice-padding invoice-product-details'>\n          {fields.map((item, i) => (\n\n            <div key={item.rowid} className='repeater-wrapper'>\n              <Row >\n                <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                  <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                    <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-50 mb-0'>First Name</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_name'\n                        name={`contact_info[${i}].name`}\n                        render={({ field }) => (\n                          <Input type='text' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.name && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.name && <FormFeedback>{errors.contact_info?.[i]?.name.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-2 mb-0 '>Email</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_email'\n                        name={`contact_info[${i}].email`}\n                        render={({ field }) => (\n                          <Input type='email' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.email && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.email && <FormFeedback>{errors.contact_info?.[i]?.email.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-2 mb-0'>Mobile</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_contactnumber'\n                        name={`contact_info[${i}].contactnumber`}\n                        render={({ field }) => (\n                          <Input type='number' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.contactnumber && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.contactnumber && <FormFeedback>{errors.contact_info?.[i]?.contactnumber.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Designation</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_designation'\n                        name={`contact_info[${i}].designation`}\n                        render={({ field }) => (\n                          <Input type='text' invalid={errors.contact_info?.[i]?.designation && true} onChange={(val) => { field.onChange(val) }}  {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.designation && <FormFeedback>{errors.contact_info?.[i]?.designation.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Primary</CardText>\n                      <div className='form-switch form-check-primary'>\n                        <Controller\n                          control={control}\n                          id='contact_info_primarystatus'\n                          name={`contact_info[${i}].primarystatus`}\n                          render={({ field }) => (\n                            <Input type='switch' onChange={(val) => { field.onChange(val) }} {...field} defaultChecked={field.value} />\n                          )}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                  <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                    <X size={18} className='cursor-pointer' onClick={() => removeItem(i)} />\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          ))}\n\n          <Row className='mt-1'>\n            <Col sm='12' className='px-0'>\n              <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n              </Button>\n            </Col>\n          </Row>\n\n        </CardBody>\n\n        <hr className='invoice-spacing' />\n        {/* Product Details */}\n        <CardBody>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('GST Type', 'gstRegistrationType', gstRegistrationTypeOptions, true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Place of Supply', 'placeOfSupply', stateOptions, true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('GSTIN', 'gstin', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Currency', 'currency', currencyOptions, false)}\n            </Col>\n          </Row>\n        </CardBody>\n        {/* Invoice Total */}\n        <CardBody className=''>\n          <h4 className='text-primary'>Billing Address</h4>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line1', 'billingAddressLine1')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line2', 'billingAddressLine2')}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('City', 'billingAddressCity')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('State', 'billingAddressState', stateOptions)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Country', 'billingAddressCountry', countryOptions)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Zip Code', 'billingAddressZip')}\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/client/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form >\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ClientEdit = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ClientEdit\n"],"sourceRoot":""}