{"version":3,"sources":["views/apps/client/edit/EditCard.js","views/apps/client/edit/index.js"],"names":["EditCard","phoneRegExp","navigate","useNavigate","dispatch","useDispatch","useState","businessEntityOptions","setBusinessEntityOptions","stateOptions","setStateOptions","countryOptions","setCountryOptions","currencyOptions","setCurrencyOptions","gstRegistrationTypeOptions","setGstRegistrationTypeOptions","clientType","setClientType","clientInfo","setClientInfo","contactId","setConatctId","clientDetails","setClientDetails","schema","yup","shape","uniqueIdentity","required","contactPersonName","name","when","is","then","contactNumber","matches","message","excludeEmptyString","email","businessEntity","gstRegistrationType","gstin","placeOfSupply","currency","billingAddressZip","contact_info","of","firstName","min","useForm","resolver","yupResolver","defaultValues","cast","register","handleSubmit","reset","control","errors","formState","id","useParams","useFieldArray","fields","append","onSubmit","data","a","temp","predata","updateClient","length","addContactInfo","addItem","designation","is_primary","removeItem","e","preventDefault","target","closest","remove","getClientInfo","getConatctInfo","getClientData","getClient","client","payload","useEffect","Object","keys","uniqueidentity","contactpersonname","organization","organizationid","contactnumber","businessentityid","gstregistrationtypeid","placeofsupplyid","currencyid","billingAddressLine1","billingaddressline1","billingAddressLine2","billingaddressline2","billingAddressCountry","billingaddresscountry","billingAddressState","billingaddressstate","billingaddresszip","billingAddressCity","billingaddresscity","axios","post","response","arr","businessentities","countries","currencies","gstregistrationtypes","states","getRow","fieldLabel","fieldName","reqflag","className","sm","size","classnames","for","render","field","invalid","getSelectRow","options","ref","inputRef","classNamePrefix","value","find","c","onChange","val","getOptionLabel","option","getOptionValue","md","type","defaultChecked","map","item","i","lg","onClick","color","outline","tag","Link","to","ClientEdit","xl"],"mappings":"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","file":"static/js/64.4bf80da1.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport classnames from 'classnames'\nimport { useDispatch } from 'react-redux'\n// ** Custom Components\nimport { updateClient, addContactInfo, getClient, getConatctInfo } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\n\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst EditCard = () => {\n\n  // ** States\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const zipcodeExp = /^[0-9\\- ]{6,6}$/\n  const navigate = useNavigate({})\n\n  const dispatch = useDispatch()\n  const [businessEntityOptions, setBusinessEntityOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [gstRegistrationTypeOptions, setGstRegistrationTypeOptions] = useState([])\n  const [clientType, setClientType] = useState(2)\n  const [clientInfo, setClientInfo] = useState([])\n  const [contactId, setConatctId] = useState(null)\n  const [clientDetails, setClientDetails] = useState({})\n\n  const schema = yup.object().shape({\n    clientType: yup.number(),\n    uniqueIdentity: yup.string().required(\"Please Enter Unique Identity\"),\n    contactPersonName: yup.string().required(\"Please Enter a Contact Person Name\"),\n    name: yup.string().when([\"clientType\"], { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Enter Business Name.\") }),\n    contactNumber: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n    email: yup.string().email(\"Please Enter valid Email\").required(\"Please Enter valid Email\"),\n    businessEntity: yup.string().when([\"clientType\"], { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Select Business Enity.\") }),\n    gstRegistrationType: yup.string().required(\"Please select a GST Type\"),\n    gstin: yup.string().required(\"Please Enter GSTIN No\"),\n    placeOfSupply: yup.string().required(\"Please select Place Of Supply\"),\n    currency: yup.string(),\n    billingAddressZip: yup.string().matches(zipcodeExp, { message: 'Zip Code is not valid', excludeEmptyString: true }),\n    contact_info: yup.array().of(\n      yup.object().shape({\n        firstName: yup.string().required(\"Please Enter A Name\"),\n        email: yup.string().email().required(\"Please Enter valid Email\"),\n        contactNumber: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true })\n      })\n    ).min(1, \"Please Enter atleast one contact Info\")\n\n  })\n\n  const { register, handleSubmit, reset, control, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n  const { id } = useParams()\n  const { fields, append } = useFieldArray({ name: 'contact_info', control })\n\n  const saveContactInfo = () => {\n    if (clientInfo.length > 0) {\n      dispatch(addContactInfo(clientInfo))\n      navigate(`/client/view/${contactId}`)\n    }\n  }\n\n  const onSubmit = async (data) => {\n\n    const temp = data.contact_info\n    setClientInfo(predata => ([...predata, ...temp]))\n    delete data.contact_info\n    const id = clientDetails.id\n    await dispatch(updateClient({ data, id }))\n\n    saveContactInfo()\n\n  }\n\n  const addItem = (() => {\n    append({ firstName: '', email: '', contactNumber: '', designation: '', is_primary: '' })\n  })\n\n  const removeItem = e => {\n    e.preventDefault()\n    e.target.closest('.repeater-wrapper').remove()\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityOptions(arr.businessentities)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/list').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getCurrency = () => {\n    axios.post('/currencies/list').then(response => {\n      const arr = response.data\n      setCurrencyOptions(arr.currencies)\n    })\n  }\n\n  const getGSTRegType = () => {\n    axios.post('/gstregistrationtypes/list').then(response => {\n      const arr = response.data\n      setGstRegistrationTypeOptions(arr.gstregistrationtypes)\n    })\n  }\n\n  const getClientInfo = async () => {\n    await dispatch(getConatctInfo(contactId))\n  }\n\n  const getClientData = async () => {\n    const client = await dispatch(getClient(id))\n    setClientDetails(client.payload)\n  }\n\n  useEffect(() => {\n\n    if (Object.keys(clientDetails).length > 0) {\n      reset({\n        clientType: 1,\n        uniqueIdentity: clientDetails.uniqueidentity,\n        contactPersonName: clientDetails.contactpersonname,\n        organization: clientDetails.organizationid,\n        name: clientDetails.name,\n        contactNumber: clientDetails.contactnumber,\n        businessEntity: clientDetails.businessentityid,\n        email: clientDetails.email,\n        gstRegistrationType: clientDetails.gstregistrationtypeid,\n        gstin: clientDetails.gstin,\n        placeOfSupply: clientDetails.placeofsupplyid,\n        currency: clientDetails.currencyid,\n        billingAddressLine1: clientDetails.billingaddressline1,\n        billingAddressLine2: clientDetails.billingaddressline2,\n        billingAddressCountry: clientDetails.billingaddresscountry,\n        billingAddressState: clientDetails.billingaddressstate,\n        billingAddressZip: clientDetails.billingaddresszip,\n        billingAddressCity: clientDetails.billingaddresscity\n      })\n\n      setConatctId(clientDetails.id)\n      addItem()\n    }\n\n    if (contactId !== null) {\n      getClientInfo()\n    }\n\n  }, [contactId, clientDetails])\n\n  useEffect(() => {\n    getBusineessEntity()\n    getCountries()\n    getCurrency()\n    getGSTRegType()\n    getStates()\n\n    getClientData()\n\n    addItem()\n\n  }, [])\n\n \n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => field.onChange(val.id)}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardBody className='pb-0'>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label required' for='contactPersonName'>\n                  Client Type\n                </Label>\n                <Col sm='9'>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      control={control}\n                      render={({ field }) => <Input type='radio' id='clientType_1' defaultChecked value={2} {...field} onChange={() => setClientType(2)} />}\n                    />\n                    <Label className='form-check-label' for='clientType_1'>\n                      Business\n                    </Label>\n                  </div>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      control={control}\n                      render={({ field }) => <Input id='clientType_2' type='radio' value={1} {...field} onChange={() => setClientType(1)} />}\n                    />\n                    <Label className='form-check-label' for='clientType_2'>\n                      Individual\n                    </Label>\n                  </div>\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Unique No', 'uniqueIdentity', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Contact Person Name', 'contactPersonName', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Business Name', 'name', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Mobile Number', 'contactNumber')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Email ID', 'email', true)}\n            </Col>\n          </Row>\n\n          {clientType === 2 && (\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('Business Entity', 'businessEntity', businessEntityOptions, true)}\n              </Col>\n            </Row>\n          )}\n        </CardBody>\n        {/* /Header */}\n\n        <hr className='invoice-spacing' />\n        {errors.contact_info && <p className='text-danger ms-2'>{errors.contact_info?.message}</p>}\n        {/* Product Details */}\n        <CardBody className='invoice-padding invoice-product-details'>\n          {fields.map((item, i) => (\n\n            <div key={i} className='repeater-wrapper'>\n              <Row >\n                <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                  <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                    <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-50 mb-0'>First Name</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_firstName'\n                        name={`contact_info.${i}.name`}\n                        render={({ field }) => (\n                          <Input type='text' {...register(`contact_info.${i}.name`)} invalid={errors.contact_info?.[i]?.name && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.name && <FormFeedback>{errors.contact_info?.[i]?.name.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-2 mb-0 '>Email</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_email'\n                        name={`contact_info.${i}.email`}\n                        render={({ field }) => (\n                          <Input type='email' {...register(`contact_info.${i}.email`)} invalid={errors.contact_info?.[i]?.email && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.email && <FormFeedback>{errors.contact_info?.[i]?.email.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-2 mb-0'>Mobile</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_contactNumber'\n                        name={`contact_info.${i}.contactNumber`}\n                        render={({ field }) => (\n                          <Input type='number'  {...register(`contact_info.${i}.contactNumber`)} invalid={errors.contact_info?.[i]?.contactNumber && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.contactNumber && <FormFeedback>{errors.contact_info?.[i]?.contactNumber.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Designation</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_designation'\n                        name={`contact_info.${i}.designation`}\n                        render={({ field }) => (\n                          <Input type='text' invalid={errors.contact_info?.[i]?.designation && true} {...register(`contact_info.${i}.designation`)} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.designation && <FormFeedback>{errors.contact_info?.[i]?.designation.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Primary</CardText>\n                      <div className='form-switch form-check-primary'>\n                        <Controller\n                          control={control}\n                          id='contact_info_primaryStatus'\n                          name={`contact_info.${i}.primaryStatus`}\n                          render={({ field }) => (\n                            <Input type='switch' {...register(`contact_info.${i}.primaryStatus`)} {...field} />\n                          )}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                  <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                    <X size={18} className='cursor-pointer' onClick={removeItem} />\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          ))}\n\n          <Row className='mt-1'>\n            <Col sm='12' className='px-0'>\n              <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n              </Button>\n            </Col>\n          </Row>\n\n        </CardBody>\n\n        <hr className='invoice-spacing' />\n        {/* Product Details */}\n        <CardBody>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('GST Type', 'gstRegistrationType', gstRegistrationTypeOptions, true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Place of Supply', 'placeOfSupply', stateOptions, true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('GSTIN', 'gstin', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Currency', 'currency', currencyOptions, true)}\n            </Col>\n          </Row>\n        </CardBody>\n        {/* Invoice Total */}\n        <CardBody className=''>\n          <h4 className='text-primary'>Billing Address</h4>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line1', 'billingAddressLine1')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line2', 'billingAddressLine2')}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('City', 'billingAddressCity')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('State', 'billingAddressState', stateOptions)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Country', 'billingAddressCountry', countryOptions)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Zip Code', 'billingAddressZip')}\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/client/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form >\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ClientEdit = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ClientEdit\n"],"sourceRoot":""}