{"version":3,"sources":["views/apps/task/edit/EditCard.js","views/apps/task/edit/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","EditCard","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","inputRef","useRef","navigate","useNavigate","date","setDate","id","useParams","schema","yup","shape","default","updatedBy","clientId","required","serviceId","assignee","min","reviewer","clientAccessFlag","organizationId","taskStatus","invoiceId","startDate","endDate","priority","invoiceFlag","store","useSelector","state","task","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","reset","setValue","priorityOptions","name","assigneeUserOptions","setAssigneeUserOptions","reviewerUserOptions","setReviewerUserOptions","assigneeDefaultValue","setAssigneeDefaultValue","reviewerDefaultValue","setReviewerDefaultValue","taskDescription","setTaskDescription","taskDescriptionObj","setTaskDescriptionObj","descriptionFlag","setDescriptionFlag","dispatch","useDispatch","clientOptions","setClientOptions","serviceOptions","setServiceOptions","userOptions","setUserOptions","setinvoiceFlag","taskParticipants","seTaskParticipants","useEffect","taskId","arr","map","obj","deletedUser","tasktemp","x","selectedTask","forEach","indexOf","push","addTaskParticipants","rows","serviceid","_formValues","createdBy","cloneWorkFlows","comment","attachmentIds","undefined","isDefault","addDescription","updateDescription","formatparticipants","user","type","onSubmit","data","tempParticipants","updateTask","getOrganizationUsers","axios","post","status","then","response","organizationusers","catch","err","console","log","clients","services","handleAssigneeChange","e","reviewerOptions","tempArr","Array","isArray","length","filter","id1","some","id2","handleReviwerChange","assigneeOptions","clientid","taskstatus","invoiceid","startdate","String","enddate","parseInt","invoiceflag","getTask","res","taskconversation","blocking","loader","className","Object","keys","k","message","sm","size","for","render","field","ref","classnames","classNamePrefix","options","value","find","c","onChange","val","getClientData","getOptionLabel","option","getOptionValue","invalid","description","onInput","target","defaultValue","replace","multiple","event","files","outline","color","onClick","current","click","isMulti","rules","dateFormat","dateStr","altInput","altFormat","checked","tag","Link","to","TaskEdit","xl","md","UILoader","props","children","overlayColor","Tag","style","defaultProps","ComponentSpinner"],"mappings":"4ZA6BMA,EAAcC,cACdC,EAASC,cAmjBAC,EAjjBE,WAAO,IAAD,cAErB,EAA0BC,oBAAS,GAAM,mBAAlCC,EAAK,KAAEC,EAAQ,KAChBC,EAAS,WACb,OACE,cAAC,WAAQ,UACP,cAAC,IAAO,KAGd,EACMC,EAAe,CACnBC,WAAY,SAACC,EAAO,GAElB,OAF4B,eAErB,2BACFA,GAAM,IACTC,gBAAiB,WAErB,GAGIC,EAAWC,iBAAO,MAClBC,EAAWC,cACjB,EAAkBX,oBAAS,GAC3B,GADiC,iBAAnB,GACUA,mBAAS,KAAG,mBAA7BY,EAAI,KAAEC,EAAO,KACZC,EAAOC,cAAPD,GAEFE,EAASC,MAAaC,MAAM,CAChCJ,GAAIG,MAAaE,QAAQL,GACzBM,UAAWH,MAAaE,QAAQtB,GAChCwB,SAAUJ,MAAaK,SAAS,0BAChCC,UAAWN,MAAaK,SAAS,2BACjCE,SAAUP,MAAYQ,IAAI,EAAG,0BAC7BC,SAAUT,MACVU,iBAAkBV,MAAcE,SAAQ,GACxCS,eAAgBX,MAAaE,QAAQxB,GACrCkC,WAAYZ,MAAaE,QAAQ,GACjCW,UAAWb,MAAaE,QAAQ,GAChCY,UAAWd,MAAaK,SAAS,4BACjCU,QAASf,MAAaK,SAAS,0BAC/BW,SAAUhB,MAAaK,SAAS,4BAChCY,YAAajB,MAAcE,SAAQ,KAE/BgB,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI,IAE7C,EAA0EC,YAAQ,CAChFC,SAAUC,YAAYzB,GACtB0B,cAAe1B,EAAO2B,SAFhBC,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUE,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAKvDC,EAAkB,CACtB,CAAEpC,GAAI,EAAGqC,KAAM,OACf,CAAErC,GAAI,EAAGqC,KAAM,UACf,CAAErC,GAAI,EAAGqC,KAAM,SAGjB,GAAsDnD,mBAAS,IAAG,qBAA3DoD,GAAmB,MAAEC,GAAsB,MAClD,GAAsDrD,mBAAS,IAAG,qBAA3DsD,GAAmB,MAAEC,GAAsB,MAClD,GAAwDvD,qBAAU,qBAA3DwD,GAAoB,MAAEC,GAAuB,MACpD,GAAwDzD,qBAAU,qBAA3D0D,GAAoB,MAAEC,GAAuB,MACpD,GAA8C3D,mBAAS,IAAG,qBAAnD4D,GAAe,MAAEC,GAAkB,MAC1C,GAAoD7D,mBAAS,CAAC,GAAE,qBAAzD8D,GAAkB,MAAEC,GAAqB,MAChD,GAA8C/D,oBAAS,GAAM,qBAAtDgE,GAAe,MAAEC,GAAkB,MAEpCC,GAAWC,cACjB,GAA0CnE,mBAAS,IAAG,qBAA/CoE,GAAa,MAAEC,GAAgB,MACtC,GAA4CrE,mBAAS,IAAG,qBAAjDsE,GAAc,MAAEC,GAAiB,MACxC,GAAsCvE,mBAAS,IAAG,qBAA3CwE,GAAW,MAAEC,GAAc,MAElC,GAAsCzE,oBAAS,GAAM,qBAA9CkC,GAAW,MAAEwC,GAAc,MAClC,GAA+C1E,mBAAS,IAAG,qBAApD2E,GAAgB,MAAEC,GAAkB,MAE3CC,oBAAS,gCAAC,2GACa,OAAjB1C,EAAM2C,OAAe,iBAerB,OAdIC,EAAMJ,GAAiBK,KAAI,SAACC,GAChC,OAAO,2BAAKA,GAAG,IAAEH,OAAQ3C,EAAM2C,QACjC,IACMI,EAAc,GACdC,EAAWR,GAAiBK,KAAI,SAAAI,GAAC,OAAIA,EAAEvF,MAAM,IACnDsC,EAAMkD,aAAa7D,SAAS8D,SAAQ,SAACL,IACD,IAA9BE,EAASI,QAAQN,EAAInE,KACvBoE,EAAYM,KAAKP,EAAInE,GAEzB,IACAqB,EAAMkD,aAAa3D,SAAS4D,SAAQ,SAACL,IACD,IAA9BE,EAASI,QAAQN,EAAInE,KACvBoE,EAAYM,KAAKP,EAAInE,GAEzB,IAAE,SAEIoD,GAASuB,YAAoB,CAAEC,KAAMX,EAAKG,cAAaJ,OAAQ3C,EAAM2C,UAAU,UAEjF3C,EAAMkD,aAAaM,YAAc5C,EAAQ6C,YAAYrE,UAAS,iBAM/D,OALK0D,EAAM,CACVH,OAAQ3C,EAAM2C,OACdvD,UAAWwB,EAAQ6C,YAAYrE,UAC/BK,eAAgBjC,EAChBkG,UAAWhG,GACZ,UACKqE,GAAS4B,YAAeb,IAAK,WAGb,KAApBrB,GAAsB,iBAUvB,GATKmC,EAAU,CACdA,QAASnC,GACTkB,OAAQ3C,EAAM2C,OACde,UAAWhG,EACXuB,UAAWvB,EACX+B,eAAgBjC,EAChBqG,cAAe,GACflF,QAA2BmF,IAAvBnC,GAAmC,GAAKA,GAAmBhD,GAC/DoF,WAAW,GAERlC,GAAgB,CAAD,iCACZE,GAASiC,YAAeJ,IAAS,iDAEjC7B,GAASkC,YAAkBL,IAAS,QAKxCjF,EAAKqB,EAAM2C,OACjBpE,EAAS,cAAD,OAAeI,IAAK,4CAG7B,CAACqB,EAAM2C,SAEV,IAAMuB,GAAqB,SAACC,EAAMC,GAOhC,MANY,CACV3E,eAAgBjC,EAChBE,OAAQyG,EACRC,OACAV,UAAWhG,EAGf,EAEM2G,GAAQ,iDAAG,WAAMC,GAAI,iFAeL,OAdpBvG,GAAS,GACHwG,EAAmB,GACzBD,EAAKjF,SAAS8D,SAAQ,SAACgB,GACrBI,EAAiBlB,KAAKa,GAAmBC,EAAM,GACjD,SAEsBL,IAAlBQ,EAAK/E,UACP+E,EAAK/E,SAAS4D,SAAQ,SAACgB,GACrBI,EAAiBlB,KAAKa,GAAmBC,EAAM,GACjD,IAGF1B,GAAmB8B,UACZD,EAAKjF,gBACLiF,EAAK/E,SAAQ,SAEdwC,GAASyC,YAAWF,IAAM,2CACjC,gBAlBa,sCA2BRG,GAAoB,iDAAG,wFAC3BC,IAAMC,KAAK,8BAA+B,CAAEC,OAAQ,IAAKC,MAAK,SAAAC,GAC5D,IAAMlC,EAAMkC,EAASR,KACrBlD,GAAuBwB,EAAImC,mBAC3B7D,GAAuB0B,EAAImC,mBAC3BzC,GAAeM,EAAImC,kBACrB,IAAGC,OAAM,SAACC,GACRC,QAAQC,IAAIF,EACd,IAAE,2CAEH,kBAVyB,mCAuB1BvC,qBAAU,WA7BRgC,IAAMC,KAAK,oBAAqB,CAAEC,OAAQ,IAAKC,MAAK,SAAAC,GAClD,IAAMlC,EAAMkC,EAASR,KACrBpC,GAAiBU,EAAIwC,QACvB,IA4BAX,KAZAC,IAAMC,KAAK,qBAAsB,CAAEC,OAAQ,IAAKC,MAAK,SAAAC,GACnD,IAAMlC,EAAMkC,EAASR,KACrBlC,GAAkBQ,EAAIyC,SACxB,GAWF,GAAG,IAGH,IAAMC,GAAuB,SAACC,GAC5BjE,GAAwBiE,GACxB,IACIC,EADEC,EAAUC,MAAMC,QAAQJ,GAAKA,EAAE1C,KAAI,SAAAI,GAAC,OAAIA,EAAEtE,EAAE,IAAI,GAGpD6G,EADEC,EAAQG,OAAS,EACDvD,GAAYwD,QAAO,gBAAOC,EAAG,EAAPnH,GAAE,OAAa8G,EAAQM,MAAK,SAAAC,GAAG,OAAIA,IAAQF,CAAG,GAAC,IAC9DzD,GAE3BjB,GAAuBoE,GACvB1E,EAAS,WAAY2E,EACvB,EAEMQ,GAAsB,SAACV,GAC3B/D,GAAwB+D,GACxB,IACIW,EADET,EAAUC,MAAMC,QAAQJ,GAAKA,EAAE1C,KAAI,SAAAI,GAAC,OAAIA,EAAEtE,EAAE,IAAI,GAGpDuH,EADET,EAAQG,OAAS,EACDvD,GAAYwD,QAAO,gBAAOC,EAAG,EAAPnH,GAAE,OAAa8G,EAAQM,MAAK,SAAAC,GAAG,OAAIA,IAAQF,CAAG,GAAC,IAC9DzD,GAE3BnB,GAAuBgF,GACvBpF,EAAS,WAAY2E,EACvB,EAiCA/C,oBAAS,gCAAC,wFACmB,OAAvB1C,EAAMkD,eACRrC,EAAM,CACJ5B,UAAWvB,EACXwB,SAAUc,EAAMkD,aAAaiD,SAC7B/G,UAAWY,EAAMkD,aAAaM,UAC9BhE,kBAAkB,EAClBC,eAAgBjC,EAChBkC,WAAYM,EAAMkD,aAAakD,WAC/BzG,UAAWK,EAAMkD,aAAamD,WAAa,EAC3CzG,UAAmD,KAAxCI,EAAMkD,aAAaoD,UAAUV,OAAgBW,OAAOvG,EAAMkD,aAAaoD,UAAY,KAAQtG,EAAMkD,aAAaoD,UACzHzG,QAA+C,KAAtCG,EAAMkD,aAAasD,QAAQZ,OAAgBW,OAAOvG,EAAMkD,aAAasD,QAAU,KAAQxG,EAAMkD,aAAasD,QACnH1G,SAAU2G,SAASzG,EAAMkD,aAAapD,UACtCC,YAAaC,EAAMkD,aAAawD,cAElCnE,GAAevC,EAAMkD,aAAawD,aAClCpB,GAAqBtF,EAAMkD,aAAa7D,UACxC4G,GAAoBjG,EAAMkD,aAAa3D,WACxC,2CACA,CAACS,EAAMkD,eAEVR,oBAAS,gCAAC,gGACGoB,IAAPnF,EAAgB,gCACZoD,GAAS4E,YAAQhI,IAAI,OAjD7B+F,IAAMC,KAAK,iCAAkC,CAAEhC,OAAQhE,IACpDkG,MAAK,SAAC+B,GACLhF,GAAsBgF,EAAItC,KAAKuC,kBAC/BnF,QAAiDoC,IAA9B8C,EAAItC,KAAKuC,iBAAiC,GAAKD,EAAItC,KAAKuC,iBAAiBjD,cAC1DE,IAA9B8C,EAAItC,KAAKuC,kBACX/E,IAAmB,EAEvB,IAAGkD,OAAM,SAACC,GACRC,QAAQC,IAAIF,EACd,IAyCgB,2CAEjB,CAACtG,IAgBJ,OACE,cAAC,IAAQ,CAACmI,SAAUhJ,EAAOiJ,OAAQ,cAAC/I,EAAM,IAAI,SAC5C,uBAAMqG,SAAU5D,EAAa4D,IAAU,UACrC,eAAC,IAAI,CAAC2C,UAAU,uBAAsB,UACnCC,OAAOC,KAAKxG,GAAQmC,KAAI,SAACC,EAAKqE,GAAO,IAAD,EACnC,OAAO,eAAC,IAAY,WAAS,IAAa,QAAZ,EAACzG,EAAOoC,UAAI,aAAX,EAAasE,UAAlBD,EAC5B,IACA,cAAC,IAAU,UAAC,cAEZ,cAAC,IAAQ,CAACH,UAAU,YAAW,SAC7B,eAAC,KAAG,WACF,sBAAKA,UAAU,qBAAoB,UACjC,eAAC,KAAG,CAACA,UAAU,OAAM,UACnB,cAAC,IAAK,CAACK,GAAG,IAAIC,KAAK,KAAKN,UAAU,sBAAsBO,IAAI,WAAU,SAAC,WAGvE,eAAC,IAAG,CAACF,GAAG,IAAG,UACT,cAAC,IAAU,CACTzG,QAASA,EACTI,KAAK,WACLrC,GAAG,WACH6I,OAAQ,gBAAGC,EAAK,EAALA,MAAOC,EAAG,EAAHA,IAAG,OACnB,cAAC,IAAM,uCACDD,GAAK,IACTpJ,SAAUqJ,EACVV,UAAWW,IAAW,eAAgB,CAAE,aAAcjH,EAAOxB,YACzDuI,GAAK,IACTG,gBAAgB,SAChBC,QAAS5F,GACT6F,MAAO7F,GAAc8F,MAAK,SAAAC,GAAO,OAAOA,EAAErJ,KAAO8I,EAAMK,KAAM,IAC7DG,SAAU,SAAAC,GAAST,EAAMQ,SAASC,EAAIvJ,IAAKwJ,cAAcD,EAAIvJ,GAAI,EACjEyJ,eAAgB,SAACC,GAAM,OAAKA,EAAOrH,IAAI,EACvCsH,eAAgB,SAACD,GAAM,OAAKA,EAAO1J,EAAE,IACrC,IAIL+B,EAAOxB,UAAY,cAAC,IAAY,CAAC8H,UAAU,cAAa,SAAiB,QAAjB,EAAEtG,EAAOxB,gBAAQ,aAAf,EAAiBkI,gBAIhF,eAAC,KAAG,CAACJ,UAAU,OAAM,UACnB,cAAC,IAAK,CAACK,GAAG,IAAIC,KAAK,KAAKN,UAAU,sBAAsBO,IAAI,YAAW,SAAC,YAGxE,eAAC,IAAG,CAACF,GAAG,IAAG,UACT,cAAC,IAAU,CACTzG,QAASA,EACTI,KAAK,YACLrC,GAAG,YACH6I,OAAQ,gBAAGC,EAAK,EAALA,MAAOC,EAAG,EAAHA,IAAG,OACnB,cAAC,IAAM,uCACDD,GAAK,IACTpJ,SAAUqJ,EACVV,UAAWW,IAAW,eAAgB,CAAE,aAAcjH,EAAOtB,aACzDqI,GAAK,IACTG,gBAAgB,SAChBC,QAAS1F,GACT2F,MAAO3F,GAAe4F,MAAK,SAAAC,GAAO,OAAOA,EAAErJ,KAAO8I,EAAMK,KAAM,IAC9DG,SAAU,SAAAC,GAAG,OAAIT,EAAMQ,SAASC,EAAIvJ,GAAG,EACvCyJ,eAAgB,SAACC,GAAM,OAAKA,EAAOrH,IAAI,EACvCsH,eAAgB,SAACD,GAAM,OAAKA,EAAO1J,EAAE,IACrC,IAIL+B,EAAOtB,WAAa,cAAC,IAAY,CAAC4H,UAAU,cAAa,SAAkB,QAAlB,EAAEtG,EAAOtB,iBAAS,aAAhB,EAAkBgI,gBAIlF,eAAC,KAAG,CAACJ,UAAU,OAAM,UACnB,cAAC,IAAK,CAACK,GAAG,IAAIC,KAAK,KAAKN,UAAU,aAAaO,IAAI,cAAa,SAAC,gBAGjE,eAAC,IAAG,CAACF,GAAG,IAAG,UACT,cAAC,IAAU,CACT1I,GAAG,cACHqC,KAAK,cACLJ,QAASA,EACT4G,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OAAO,cAAC,IAAK,yBAACrD,KAAK,WAAWmE,QAAS7H,EAAO8H,cAAe,EAAMC,QAAS,SAAClD,GAAQ7D,GAAmB6D,EAAEmD,OAAOZ,MAAO,GAAOL,GAAK,IAAEkB,aAAclH,GAAgBmH,QAAQ,SAAU,QAAS,IAEhNlI,EAAO8H,aAAe,cAAC,IAAY,UAAE9H,EAAO8H,YAAYpB,gBAI7D,cAAC,KAAG,CAACJ,UAAU,OAAM,SACnB,cAAC,IAAG,UACF,sBAAKA,UAAU,YAAW,UACxB,uBAAO5C,KAAK,OAAO4C,UAAU,SAAS6B,UAAQ,EAACZ,SAjK7C,SAACa,GACrB5D,QAAQC,IAAI2D,EAAMJ,OAAOK,MAC3B,EA+J4FrB,IAAKrJ,IAC7E,eAAC,IAAM,CAAC+F,KAAK,SAAS4E,SAAO,EAACC,MAAM,UAAUC,QAAS,kBAAM7K,EAAS8K,QAAQC,OAAO,EAAC,UACpF,cAAC,IAAI,CAAC9B,KAAM,GAAIN,UAAU,UAAe,+BAKnD,sBAAKA,UAAU,qBAAoB,UAEjC,eAAC,KAAG,CAACA,UAAU,OAAM,UACnB,cAAC,IAAK,CAACK,GAAG,IAAIC,KAAK,KAAKN,UAAU,sBAAsBO,IAAI,WAAU,SAAC,aAGvE,eAAC,IAAG,CAACF,GAAG,IAAG,UACT,cAAC,IAAU,CACTzG,QAASA,EACTI,KAAK,WACLrC,GAAG,WACH6I,OAAQ,gBAAGC,EAAK,EAALA,MAAOC,EAAG,EAAHA,IAAG,OACnB,cAAC,IAAM,yBACLrJ,SAAUqJ,EACVV,UAAWW,IAAW,eAAgB,CAAE,aAAcjH,EAAOrB,YACzDoI,GAAK,IACTG,gBAAgB,SAChBC,QAAS5G,GACToI,SAAS,EACTvB,MAAOzG,GACP4G,SAAU3C,GACV8C,eAAgB,SAACC,GAAM,OAAKA,EAAOrH,IAAI,EACvCsH,eAAgB,SAACD,GAAM,OAAKA,EAAO1J,EAAE,EACrCR,OAAQF,IACR,IAILyC,EAAOrB,UAAY,cAAC,IAAY,CAAC2H,UAAU,cAAa,SAAiB,QAAjB,EAAEtG,EAAOrB,gBAAQ,aAAf,EAAiB+H,gBAIhF,eAAC,KAAG,CAACJ,UAAU,OAAM,UACnB,cAAC,IAAK,CAACK,GAAG,IAAIC,KAAK,KAAKN,UAAU,aAAaO,IAAI,WAAU,SAAC,aAG9D,eAAC,IAAG,CAACF,GAAG,IAAG,UACT,cAAC,IAAU,CACTzG,QAASA,EACTI,KAAK,WACLrC,GAAG,WACH6I,OAAQ,gBAAGC,EAAK,EAALA,MAAOC,EAAG,EAAHA,IAAG,OACnB,cAAC,IAAM,yBACLrJ,SAAUqJ,EACVV,UAAWW,IAAW,eAAgB,CAAE,aAAcjH,EAAOnB,YACzDkI,GAAK,IACTG,gBAAgB,SAChBC,QAAS1G,GACTkI,SAAS,EACTvB,MAAOvG,GACP0G,SAAUhC,GACVmC,eAAgB,SAACC,GAAM,OAAKA,EAAOrH,IAAI,EACvCsH,eAAgB,SAACD,GAAM,OAAKA,EAAO1J,EAAE,EACrCR,OAAQF,IACR,IAILyC,EAAOnB,UAAY,cAAC,IAAY,CAACyH,UAAU,cAAa,SAAiB,QAAjB,EAAEtG,EAAOnB,gBAAQ,aAAf,EAAiB6H,gBAIhF,eAAC,KAAG,CAACJ,UAAU,OAAM,UACnB,cAAC,IAAK,CAACK,GAAG,IAAIC,KAAK,KAAKN,UAAU,sBAAsBO,IAAI,YAAW,SAAC,eAGxE,eAAC,IAAG,CAACF,GAAG,IAAG,UACT,cAAC,IAAU,CACTS,MAAOrJ,EACPuC,KAAK,YACLJ,QAASA,EACT0I,MAAO,CAAEnK,UAAU,GACnB0I,QAAS,CAAE0B,WAAY,SACvB/B,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACd,cAAC,IAAS,CACRK,MAAOL,EAAMK,MACbG,SAAU,SAACxJ,EAAM+K,GAAc/B,EAAMQ,SAASuB,EAAS,EACvD3B,QAAS,CAAE4B,UAAU,EAAMC,UAAW,SAAUH,WAAY,KAC5DvC,UAAWW,IAAW,kBAAmB,CAAE,6BAA8BjH,EAAOd,aAAgB,IAIrGc,EAAOd,WAAa,cAAC,IAAY,CAACoH,UAAU,cAAa,SAAkB,QAAlB,EAAEtG,EAAOd,iBAAS,aAAhB,EAAkBwH,gBAIlF,eAAC,KAAG,CAACJ,UAAU,OAAM,UACnB,cAAC,IAAK,CAACK,GAAG,IAAIC,KAAK,KAAKN,UAAU,sBAAsBO,IAAI,UAAS,SAAC,aAGtE,eAAC,IAAG,CAACF,GAAG,IAAG,UACT,cAAC,IAAU,CACTS,MAAOrJ,EACPwJ,SAAU,SAAAxJ,GAAI,OAAIC,EAAQD,EAAK,EAC/BuC,KAAK,UACLJ,QAASA,EACT0I,MAAO,CAAEnK,UAAU,GACnB0I,QAAS,CAAE0B,WAAY,SACvB/B,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACd,cAAC,IAAS,CACRK,MAAOL,EAAMK,MACbG,SAAU,SAACxJ,EAAM+K,GAAc/B,EAAMQ,SAASuB,EAAS,EACvD3B,QAAS,CAAE4B,UAAU,EAAMC,UAAW,SAAUH,WAAY,KAC5DvC,UAAWW,IAAW,kBAAmB,CAAE,6BAA8BjH,EAAOb,WAAc,IAInGa,EAAOb,SAAW,cAAC,IAAY,CAACmH,UAAU,cAAa,SAAgB,QAAhB,EAAEtG,EAAOb,eAAO,aAAd,EAAgBuH,gBAI9E,eAAC,KAAG,CAACJ,UAAU,OAAM,UACnB,cAAC,IAAK,CAACK,GAAG,IAAIC,KAAK,KAAKN,UAAU,sBAAsBO,IAAI,WAAU,SAAC,aAGvE,eAAC,IAAG,CAACF,GAAG,IAAG,UACT,cAAC,IAAU,CACTzG,QAASA,EACTI,KAAK,WACLrC,GAAG,WACH6I,OAAQ,gBAAGC,EAAK,EAALA,MAAOC,EAAG,EAAHA,IAAG,OACnB,cAAC,IAAM,uCACDD,GAAK,IACTpJ,SAAUqJ,EACVV,UAAWW,IAAW,eAAgB,CAAE,aAAcjH,EAAOZ,YACzD2H,GAAK,IACTG,gBAAgB,SAChBC,QAAS9G,EACT+G,MAAO/G,EAAgBgH,MAAK,SAAAC,GAAO,OAAOA,EAAErJ,KAAO8I,EAAMK,KAAM,IAC/DG,SAAU,SAAAC,GAAG,OAAIT,EAAMQ,SAASC,EAAIvJ,GAAG,EACvCyJ,eAAgB,SAACC,GAAM,OAAKA,EAAOrH,IAAI,EACvCsH,eAAgB,SAACD,GAAM,OAAKA,EAAO1J,EAAE,IACrC,IAIL+B,EAAOZ,UAAY,cAAC,IAAY,CAACkH,UAAU,cAAa,SAAiB,QAAjB,EAAEtG,EAAOZ,gBAAQ,aAAf,EAAiBsH,wBAMtF,oBAAIJ,UAAU,oBACd,cAAC,KAAG,CAACA,UAAU,YAAW,SACxB,sBAAKA,UAAU,qCAAoC,UACjD,cAAC,IAAU,CACTpG,QAASA,EACTI,KAAI,cACJsI,MAAO,CAAEnK,UAAU,GACnBqI,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACd,cAAC,IAAK,yBAACT,UAAU,mBAAmB5C,KAAK,WAAWzF,GAAG,eAAemJ,MAAOL,EAAMK,MAAO6B,QAAS5J,IAAiB0H,GAAK,IAAEQ,SAAU,SAACC,GAAUT,EAAMQ,SAASC,GAhW7K3F,IAAgBxC,GAgWmL,IAAK,IAG9L,cAAC,IAAK,CAACiH,UAAU,mBAAmBO,IAAI,eAAc,SAAC,0CAM7D,cAAC,IAAI,UACH,cAAC,IAAQ,UACP,sBAAKP,UAAU,wBAAuB,UACpC,cAAC,IAAM,CAACA,UAAU,eAAegC,SAAO,EAACC,MAAM,UAAUW,IAAKC,IAAMC,GAAE,qBAAgBnL,GAAK,SAAC,WAG5F,cAAC,IAAM,CAACsK,MAAM,UAAU7E,KAAK,SAAQ,SAAE,oBASrD,ECzjBe2F,UAZE,WACf,OACE,qBAAK/C,UAAU,sBAAf,SACE,cAAC,KAAD,CAAKA,UAAU,cAAf,SACE,cAAC,IAAD,CAAKgD,GAAI,GAAIC,GAAI,GAAI5C,GAAI,GAAzB,SACE,cAAC,EAAD,SAKT,C,uGCPK6C,EAAW,SAAAC,GAAU,IAAD,EAChBC,EAA6DD,EAA7DC,SAAUtD,EAAmDqD,EAAnDrD,SAAUC,EAAyCoD,EAAzCpD,OAAQC,EAAiCmD,EAAjCnD,UAAW4C,EAAsBO,EAAtBP,IAAKS,EAAiBF,EAAjBE,aAE9CC,EAAMV,EAEZ,OACE,eAACU,EAAD,CAAKtD,UAAWW,IAAW,aAAD,mBAAiBX,EAAYA,GAA7B,qBAA8CF,GAA9C,IAA1B,UACGsD,EACAtD,EACC,eAAC,WAAD,WACE,iCACEE,UAAU,WACLF,GAAYuD,EAAe,CAAEE,MAAO,CAAEnM,gBAAiBiM,IAAmB,CAAC,IAGlF,qBAAKrD,UAAU,SAAf,SAAyBD,OAEzB,OAGT,EAEcmD,MAEfA,EAASM,aAAe,CACtBZ,IAAK,MACL9C,UAAU,EACVC,OAAQ,cAAC,KAAD,CAASkC,MAAM,Y,+CC5BVwB,IAZU,WACvB,OACE,qBAAKzD,UAAU,mBAAf,SACE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,yBAItB,C","file":"static/js/68.3f4ae228.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect, useRef, Fragment } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\n// ** Custom Components\nimport classnames from 'classnames'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus } from 'react-feather'\nimport Select, { components } from 'react-select'\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\nimport { getTask, addTaskParticipants, updateDescription, addDescription, updateTask, cloneWorkFlows } from '../store'\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, FormFeedback, Input, CardHeader } from 'reactstrap'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n\nconst EditCard = () => {\n  // ** States\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n\n  const inputRef = useRef(null)\n  const navigate = useNavigate()\n  const [setOpen] = useState(false)\n  const [date, setDate] = useState(\"\")\n  const { id } = useParams()\n\n  const schema = yup.object().shape({\n    id: yup.string().default(id),\n    updatedBy: yup.string().default(userId),\n    clientId: yup.string().required(\"Please select a Client\"),\n    serviceId: yup.string().required(\"Please select a Service\"),\n    assignee: yup.array().min(1, \"Please select Assignee\"),\n    reviewer: yup.array(),\n    clientAccessFlag: yup.boolean().default(false),\n    organizationId: yup.string().default(activeOrgId),\n    taskStatus: yup.number().default(1),\n    invoiceId: yup.string().default(0),\n    startDate: yup.string().required('Please Select Start Date'),\n    endDate: yup.string().required('Please Select End Date'),\n    priority: yup.string().required(\"Please select a Priority\"),\n    invoiceFlag: yup.boolean().default(false)\n  })\n  const store = useSelector(state => state.task)\n\n  const { handleSubmit, formState: { errors }, control, reset, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const priorityOptions = [\n    { id: 1, name: \"Low\" },\n    { id: 2, name: \"Medium\" },\n    { id: 3, name: \"High\" }\n  ]\n\n  const [assigneeUserOptions, setAssigneeUserOptions] = useState([])\n  const [reviewerUserOptions, setReviewerUserOptions] = useState([])\n  const [assigneeDefaultValue, setAssigneeDefaultValue] = useState()\n  const [reviewerDefaultValue, setReviewerDefaultValue] = useState()\n  const [taskDescription, setTaskDescription] = useState('')\n  const [taskDescriptionObj, setTaskDescriptionObj] = useState({})\n  const [descriptionFlag, setDescriptionFlag] = useState(false)\n\n  const dispatch = useDispatch()\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [userOptions, setUserOptions] = useState([])\n\n  const [invoiceFlag, setinvoiceFlag] = useState(false)\n  const [taskParticipants, seTaskParticipants] = useState([])\n\n  useEffect(async () => {\n    if (store.taskId !== null) {\n      const arr = taskParticipants.map((obj) => {\n        return { ...obj, taskId: store.taskId }\n      })\n      const deletedUser = []\n      const tasktemp = taskParticipants.map(x => x.userId)\n      store.selectedTask.assignee.forEach((obj) => {\n        if (tasktemp.indexOf(obj.id) === -1) {\n          deletedUser.push(obj.id)\n        }\n      })\n      store.selectedTask.reviewer.forEach((obj) => {\n        if (tasktemp.indexOf(obj.id) === -1) {\n          deletedUser.push(obj.id)\n        }\n      })\n\n      await dispatch(addTaskParticipants({ rows: arr, deletedUser, taskId: store.taskId }))\n\n      if (store.selectedTask.serviceid !== control._formValues.serviceId) {\n        const obj = {\n          taskId: store.taskId,\n          serviceId: control._formValues.serviceId,\n          organizationId: activeOrgId,\n          createdBy: userId\n        }\n        await dispatch(cloneWorkFlows(obj))\n      }\n\n      if (taskDescription !== '') {\n        const comment = {\n          comment: taskDescription,\n          taskId: store.taskId,\n          createdBy: userId,\n          updatedBy: userId,\n          organizationId: activeOrgId,\n          attachmentIds: [],\n          id: taskDescriptionObj === undefined ? '' : taskDescriptionObj.id,\n          isDefault: true\n        }\n        if (!descriptionFlag) {\n          await dispatch(addDescription(comment))\n        } else {\n          await dispatch(updateDescription(comment))\n        }\n\n      }\n\n      const id = store.taskId\n      navigate(`/task/view/${id}`)\n\n    }\n  }, [store.taskId])\n\n  const formatparticipants = (user, type) => {\n    const obj = {\n      organizationId: activeOrgId,\n      userId: user,\n      type,\n      createdBy: userId\n    }\n    return obj\n  }\n\n  const onSubmit = async data => {\n    setBlock(true)\n    const tempParticipants = []\n    data.assignee.forEach((user) => {\n      tempParticipants.push(formatparticipants(user, 1))\n    })\n\n    if (data.reviewer !== undefined) {\n      data.reviewer.forEach((user) => {\n        tempParticipants.push(formatparticipants(user, 2))\n      })\n    }\n\n    seTaskParticipants(tempParticipants)\n    delete data.assignee\n    delete data.reviewer\n\n    await dispatch(updateTask(data))\n  }\n\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setReviewerUserOptions(arr.organizationusers)\n      setAssigneeUserOptions(arr.organizationusers)\n      setUserOptions(arr.organizationusers)\n    }).catch((err) => {\n      console.log(err)\n    })\n\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const enableInvoice = () => {\n    setinvoiceFlag(!invoiceFlag)\n  }\n\n  useEffect(() => {\n    getClients()\n    getOrganizationUsers()\n    getServices()\n  }, [])\n\n  // handle onChange event of the dropdown\n  const handleAssigneeChange = (e) => {\n    setAssigneeDefaultValue(e)\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let reviewerOptions\n    if (tempArr.length > 0) {\n      reviewerOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { reviewerOptions = userOptions }\n\n    setReviewerUserOptions(reviewerOptions)\n    setValue(\"assignee\", tempArr)\n  }\n\n  const handleReviwerChange = (e) => {\n    setReviewerDefaultValue(e)\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let assigneeOptions\n    if (tempArr.length > 0) {\n      assigneeOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { assigneeOptions = userOptions }\n\n    setAssigneeUserOptions(assigneeOptions)\n    setValue(\"reviewer\", tempArr)\n  }\n\n  const changeHandler = (event) => {\n    console.log(event.target.files)\n  }\n\n  const getDescription = () => {\n    axios.post('/taskconversations/description', { taskId: id })\n      .then((res) => {\n        setTaskDescriptionObj(res.data.taskconversation)\n        setTaskDescription(res.data.taskconversation === undefined ? '' : res.data.taskconversation.comment)\n        if (res.data.taskconversation !== undefined) {\n          setDescriptionFlag(true)\n        }\n      }).catch((err) => {\n        console.log(err)\n      })\n  }\n\n  // const handleSubmission = () => {\n  //   const formData = new FormData()\n\n  //     // Update the formData object\n  //     formData.append(\n  //       \"myFile\",\n  //       selectedFile,\n  //       selectedFile.name\n  //     )\n\n  //     // Details of the uploaded file\n  //     console.log(selectedFile)\n  // }\n\n  useEffect(async () => {\n    if (store.selectedTask !== null) {\n      reset({\n        updatedBy: userId,\n        clientId: store.selectedTask.clientid,\n        serviceId: store.selectedTask.serviceid,\n        clientAccessFlag: false,\n        organizationId: activeOrgId,\n        taskStatus: store.selectedTask.taskstatus,\n        invoiceId: store.selectedTask.invoiceid || 0,\n        startDate: store.selectedTask.startdate.length === 13 ? String(store.selectedTask.startdate / 1000) : store.selectedTask.startdate,\n        endDate: store.selectedTask.enddate.length === 13 ? String(store.selectedTask.enddate / 1000) : store.selectedTask.enddate,\n        priority: parseInt(store.selectedTask.priority),\n        invoiceFlag: store.selectedTask.invoiceflag\n      })\n      setinvoiceFlag(store.selectedTask.invoiceflag)\n      handleAssigneeChange(store.selectedTask.assignee)\n      handleReviwerChange(store.selectedTask.reviewer)\n    }\n  }, [store.selectedTask])\n\n  useEffect(async () => {\n    if (id !== undefined) {\n      await dispatch(getTask(id))\n      getDescription()\n    }\n  }, [id])\n\n  // ** Custom Options Component\n  const OptionComponent = ({ data, ...props }) => {\n    if (data.type === 'button') {\n      return (\n        <Button className='text-start rounded-0 px-50' color={data.color} block onClick={() => setOpen(true)}>\n          <Plus className='font-medium-1 me-50' />\n          <span className='align-middle'>{data.label}</span>\n        </Button>\n      )\n    } else {\n      return <components.Option {...props}> {data.label} </components.Option>\n    }\n  }\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Card className='invoice-preview-card'>\n          {Object.keys(errors).map((obj, k) => {\n            return <FormFeedback key={k}> {errors[obj]?.message}</FormFeedback>\n          })}\n          <CardHeader>Edit Task</CardHeader>\n          {/* Header */}\n          <CardBody className='pb-2 px-2'>\n            <Row>\n              <div className='col-lg-6 col-sm-12'>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='clientId'>\n                    Client\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"clientId\"\n                      id=\"clientId\"\n                      render={({ field, ref }) => (\n                        <Select\n                          {...field}\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.clientId })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={clientOptions}\n                          value={clientOptions.find(c => { return c.id === field.value })}\n                          onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n\n                    />\n                    {errors.clientId && <FormFeedback className='text-danger'>{errors.clientId?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='serviceId'>\n                    Service\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"serviceId\"\n                      id=\"serviceId\"\n                      render={({ field, ref }) => (\n                        <Select\n                          {...field}\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.serviceId })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={serviceOptions}\n                          value={serviceOptions.find(c => { return c.id === field.value })}\n                          onChange={val => field.onChange(val.id)}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n\n                    />\n                    {errors.serviceId && <FormFeedback className='text-danger'>{errors.serviceId?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='description'>\n                    Description\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      id='description'\n                      name='description'\n                      control={control}\n                      render={({ field }) => <Input type=\"textarea\" invalid={errors.description && true} onInput={(e) => { setTaskDescription(e.target.value) }} {...field} defaultValue={taskDescription.replace(/(\\\\n)/g, \"\\n\")} />}\n                    />\n                    {errors.description && <FormFeedback>{errors.description.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='my-2'>\n                  <Col>\n                    <div className='d-lg-flex'>\n                      <input type='file' className='hidden' multiple onChange={changeHandler} ref={inputRef} />\n                      <Button type='button' outline color='primary' onClick={() => inputRef.current.click()}>\n                        <Plus size={14} className='me-25'></Plus> Add Attachment</Button>\n                    </div>\n                  </Col>\n                </Row>\n              </div>\n              <div className='col-lg-6 col-sm-12'>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='assignee'>\n                    Assignee\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"assignee\"\n                      id=\"assignee\"\n                      render={({ field, ref }) => (\n                        <Select\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.assignee })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={assigneeUserOptions}\n                          isMulti={true}\n                          value={assigneeDefaultValue} // set selected values\n                          onChange={handleAssigneeChange}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                          styles={colourStyles}\n                        />\n                      )}\n\n                    />\n                    {errors.assignee && <FormFeedback className='text-danger'>{errors.assignee?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='reviewer'>\n                    Reviewer\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"reviewer\"\n                      id=\"reviewer\"\n                      render={({ field, ref }) => (\n                        <Select\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={reviewerUserOptions}\n                          isMulti={true}\n                          value={reviewerDefaultValue} // set selected values\n                          onChange={handleReviwerChange}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                          styles={colourStyles}\n                        />\n                      )}\n\n                    />\n                    {errors.reviewer && <FormFeedback className='text-danger'>{errors.reviewer?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='startDate'>\n                    Start Date\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      value={date}\n                      name=\"startDate\"\n                      control={control}\n                      rules={{ required: true }}\n                      options={{ dateFormat: \"d-m-Y\" }}\n                      render={({ field }) => (\n                        <Flatpickr\n                          value={field.value}\n                          onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                          options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                          className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.startDate })} />\n                      )}\n                    />\n\n                    {errors.startDate && <FormFeedback className='text-danger'>{errors.startDate?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='endDate'>\n                    End Date\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      value={date}\n                      onChange={date => setDate(date)}\n                      name=\"endDate\"\n                      control={control}\n                      rules={{ required: true }}\n                      options={{ dateFormat: \"d-m-Y\" }}\n                      render={({ field }) => (\n                        <Flatpickr\n                          value={field.value}\n                          onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                          options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                          className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.endDate })} />\n                      )}\n                    />\n\n                    {errors.endDate && <FormFeedback className='text-danger'>{errors.endDate?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='priority'>\n                    Priority\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"priority\"\n                      id=\"priority\"\n                      render={({ field, ref }) => (\n                        <Select\n                          {...field}\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.priority })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={priorityOptions}\n                          value={priorityOptions.find(c => { return c.id === field.value })}\n                          onChange={val => field.onChange(val.id)}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n\n                    />\n                    {errors.priority && <FormFeedback className='text-danger'>{errors.priority?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n              </div>\n            </Row>\n          </CardBody>\n          <hr className='invoice-spacing' />\n          <Row className='px-1 pb-2'>\n            <div className='form-check form-check-primary mx-2'>\n              <Controller\n                control={control}\n                name={`invoiceFlag`}\n                rules={{ required: true }}\n                render={({ field }) => (\n                  <Input className='form-check-input' type='checkbox' id='invoice_flag' value={field.value} checked={invoiceFlag} {...field} onChange={(val) => { field.onChange(val); enableInvoice() }} />\n                )}\n              />\n              <Label className='form-check-label' for='invoice_flag'>\n                Create Proposal for this Task\n              </Label>\n            </div>\n          </Row>\n        </Card>\n        <Card>\n          <CardBody>\n            <div className='modal-footer border-0'>\n              <Button className='add-new-user' outline color='warning' tag={Link} to={`/task/view/${id}`}>\n                Cancel\n              </Button>\n              <Button color='primary' type=\"submit\" >\n                Save\n              </Button>\n            </div>\n          </CardBody>\n        </Card>\n      </form >\n    </UILoader>\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst TaskEdit = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default TaskEdit\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}