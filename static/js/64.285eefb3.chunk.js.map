{"version":3,"sources":["views/apps/client/edit/AddCard.js","views/apps/client/edit/index.js"],"names":["EditCard","phoneRegExp","navigate","useNavigate","dispatch","useDispatch","useState","businessEntityOptions","setBusinessEntityOptions","stateOptions","setStateOptions","countryOptions","setCountryOptions","currencyOptions","setCurrencyOptions","gstRegistrationTypeOptions","setGstRegistrationTypeOptions","clientType","setClientType","clientInfo","setClientInfo","contactId","setConatctId","clientDetails","setClientDetails","schema","yup","shape","uniqueIdentity","required","contactPersonName","name","when","is","then","contactnumber","matches","message","excludeEmptyString","email","businessEntity","gstRegistrationType","gstin","placeOfSupply","currency","billingAddressZip","contact_info","of","min","id","useParams","clientid","useForm","resolver","yupResolver","defaultValues","organization","billingAddressLine1","billingAddressLine2","billingAddressCountry","billingAddressState","billingAddressCity","register","handleSubmit","reset","control","errors","formState","useFieldArray","fields","append","onSubmit","data","a","temp","predata","updateClient","datatemp","payload","client","addExistingItem","obj","getClientInfo","getConatctInfo","clientInfos","forEach","getClientData","getClient","useEffect","Object","keys","length","uniqueidentity","contactpersonname","organizationid","businessentityid","gstregistrationtypeid","placeofsupplyid","currencyid","billingaddressline1","billingaddressline2","billingaddresscountry","billingaddressstate","billingaddresszip","billingaddresscity","ind","rows","addContactInfo","saveContactInfo","axios","post","response","arr","businessentities","countries","currencies","gstregistrationtypes","states","className","md","sm","size","for","render","field","type","defaultChecked","value","onChange","invalid","ref","inputRef","classnames","classNamePrefix","options","find","c","val","getOptionLabel","option","getOptionValue","map","item","i","lg","onClick","clientinformationid","_formValues","findIndex","splice","removeItem","color","organizationId","designation","primaryStatus","title","outline","tag","Link","to","ClientAdd","xl","AddCard"],"mappings":"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","file":"static/js/64.285eefb3.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport classnames from 'classnames'\nimport { useDispatch } from 'react-redux'\n// ** Custom Components\nimport { updateClient, addContactInfo, getClient, getConatctInfo } from '../store'\nimport axios from '../../../../configs/axios/axiosConfig'\n\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst EditCard = () => {\n\n  // ** States\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const zipcodeExp = /^[0-9\\- ]{6,6}$/\n  const navigate = useNavigate({})\n\n  const dispatch = useDispatch()\n  const [businessEntityOptions, setBusinessEntityOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [gstRegistrationTypeOptions, setGstRegistrationTypeOptions] = useState([])\n  const [clientType, setClientType] = useState(2)\n  const [clientInfo, setClientInfo] = useState([])\n  const [contactId, setConatctId] = useState(null)\n  const [clientDetails, setClientDetails] = useState({})\n\n  const schema = yup.object().shape({\n    clientType: yup.number(),\n    uniqueIdentity: yup.string().required(\"Please Enter Unique Identity\"),\n    contactPersonName: yup.string().required(\"Please Enter a Contact Person Name\"),\n    name: yup.string().when([\"clientType\"], { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Enter Business Name.\") }),\n    contactnumber: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n    email: yup.string().email(\"Please Enter valid Email\").required(\"Please Enter valid Email\"),\n    businessEntity: yup.string().when([\"clientType\"], { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Select Business Enity.\") }),\n    gstRegistrationType: yup.string().required(\"Please select a GST Type\"),\n    gstin: yup.string().required(\"Please Enter GSTIN No\"),\n    placeOfSupply: yup.string().required(\"Please select Place Of Supply\"),\n    currency: yup.string(),\n    billingAddressZip: yup.string().matches(zipcodeExp, { message: 'Zip Code is not valid', excludeEmptyString: true }),\n    contact_info: yup.array().of(\n      yup.object().shape({\n        name: yup.string().required(\"Please Enter A Name\"),\n        email: yup.string().email().required(\"Please Enter valid Email\"),\n        contactnumber: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true })\n      })\n    ).min(1, \"Please Enter atleast one contact Info\")\n\n  })\n  const { id } = useParams()\n  const clientid = id\n  const { register, handleSubmit, reset, control, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: {\n      clientType: 2,\n      uniqueIdentity: '',\n      contactPersonName: '',\n      organization: 1,\n      name: '',\n      contactnumber: '',\n      businessEntity: '',\n      email: '',\n      gstRegistrationType: '',\n      gstin: '',\n      placeOfSupply: '',\n      currency: 1,\n      contact_info: [],\n      billingAddressLine1: '',\n      billingAddressLine2: '',\n      billingAddressCountry: '',\n      billingAddressState: '',\n      billingAddressZip: '',\n      billingAddressCity: ''\n    }\n  })\n\n  const { fields, append } = useFieldArray({ name: 'contact_info', control })\n\n  const saveContactInfo = () => {\n    if (clientInfo.length > 0) {\n      clientInfo.forEach((obj, ind) => {\n        clientInfo[ind].contactId = clientid\n      })\n      const rows = clientInfo\n      dispatch(addContactInfo({ rows }))\n      navigate(`/client/view/${clientid}`)\n    }\n  }\n\n  const onSubmit = async (data) => {\n\n    const temp = data.contact_info\n    setClientInfo(predata => ([...predata, ...temp]))\n    delete data.contact_info\n\n    const datatemp = await dispatch(updateClient(data))\n    setConatctId(datatemp.payload.client.id)\n\n  }\n\n  const addItem = (() => {\n    append({ organizationId: 1, name: '', email: '', contactnumber: '', designation: '', primaryStatus: '' })\n  })\n\n  const addExistingItem = ((obj) => {\n    append(obj)\n  })\n\n  const removeItem = (clientinformationid) => {\n    const ind = control._formValues.contact_info.findIndex((obj) => obj.id !== clientinformationid)\n    control._formValues.contact_info.splice(ind)\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityOptions(arr.businessentities)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/list').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getCurrency = () => {\n    axios.post('/currencies/list').then(response => {\n      const arr = response.data\n      setCurrencyOptions(arr.currencies)\n    })\n  }\n\n  const getGSTRegType = () => {\n    axios.post('/gstregistrationtypes/list').then(response => {\n      const arr = response.data\n      setGstRegistrationTypeOptions(arr.gstregistrationtypes)\n    })\n  }\n\n  const getClientInfo = async () => {\n\n    const clientinformations = await dispatch(getConatctInfo(clientid))\n\n    clientinformations.payload.clientInfos.forEach((obj) => {\n      addExistingItem(obj)\n    })\n\n  }\n\n  const getClientData = async () => {\n    const client = await dispatch(getClient(id))\n\n    setClientDetails(client.payload)\n\n  }\n\n  useEffect(() => {\n\n    if (Object.keys(clientDetails).length > 0) {\n      reset({\n        id: clientid,\n        clientType: 1,\n        uniqueIdentity: clientDetails.uniqueidentity,\n        contactPersonName: clientDetails.contactpersonname,\n        organization: clientDetails.organizationid,\n        name: clientDetails.name,\n        contactnumber: clientDetails.contactnumber,\n        businessEntity: clientDetails.businessentityid,\n        email: clientDetails.email,\n        gstRegistrationType: clientDetails.gstregistrationtypeid,\n        gstin: clientDetails.gstin,\n        placeOfSupply: clientDetails.placeofsupplyid,\n        currency: clientDetails.currencyid,\n        billingAddressLine1: clientDetails.billingaddressline1,\n        billingAddressLine2: clientDetails.billingaddressline2,\n        billingAddressCountry: clientDetails.billingaddresscountry,\n        billingAddressState: clientDetails.billingaddressstate,\n        billingAddressZip: clientDetails.billingaddresszip,\n        billingAddressCity: clientDetails.billingaddresscity\n      })\n\n    }\n    if (clientid !== null) {\n      getClientInfo()\n    }\n    if (contactId !== null) {\n      saveContactInfo()\n    }\n\n  }, [contactId, clientDetails])\n\n  useEffect(() => {\n    getBusineessEntity()\n    getCountries()\n    getCurrency()\n    getGSTRegType()\n    getStates()\n\n    getClientData()\n\n  }, [])\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardBody className='pb-0'>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='contactPersonName'>\n                  Client Type\n                </Label>\n                <Col sm='9'>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      control={control}\n                      render={({ field }) => <Input type='radio' id='clientType_1' defaultChecked value={2} {...field} onChange={() => setClientType(2)} />}\n                    />\n                    <Label className='form-check-label' for='clientType_1'>\n                      Business\n                    </Label>\n                  </div>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      control={control}\n                      render={({ field }) => <Input id='clientType_2' type='radio' value={1} {...field} onChange={() => setClientType(1)} />}\n                    />\n                    <Label className='form-check-label' for='clientType_2'>\n                      Individual\n                    </Label>\n                  </div>\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='uniqueIdentity'>\n                  Unique No\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='uniqueIdentity'\n                    name='uniqueIdentity'\n                    control={control}\n                    render={({ field }) => <Input invalid={errors.uniqueIdentity && true} {...field} />}\n                  />\n                  {errors.uniqueIdentity && <FormFeedback>{errors.uniqueIdentity.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='contactPersonName'>\n                  Conatct Person Name\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='contactPersonName'\n                    name='contactPersonName'\n                    control={control}\n                    render={({ field }) => <Input invalid={errors.contactPersonName && true} {...field} />}\n                  />\n                  {errors.contactPersonName && <FormFeedback>{errors.contactPersonName.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='name'>\n                  Business Name\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    id='name'\n                    name='name'\n                    render={({ field }) => (\n                      <Input type='text' invalid={errors.name && true} {...field} />\n                    )}\n                  />\n                  {errors.name && <FormFeedback>{errors.name.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='contactnumber'>\n                  Mobile Number\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='contactnumber'\n                    name='contactnumber'\n                    control={control}\n                    render={({ field }) => <Input invalid={errors.contactnumber && true} {...field} />}\n                  />\n                  {errors.contactnumber && <FormFeedback>{errors.contactnumber.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='email'>\n                  Email ID\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    id='email'\n                    name='email'\n                    render={({ field }) => (\n                      <Input type='email' invalid={errors.email && true} {...field} />\n                    )}\n                  />\n                  {errors.email && <FormFeedback>{errors.email.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n\n          {clientType === 2 && (\n            <Row>\n              <Col md='6' className='mb-1'>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='businessEntity'>\n                    Business Entity\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"businessEntity\"\n                      id=\"businessEntity\"\n                      render={({ field, value, ref }) => (\n                        <Select\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.businessEntity })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={businessEntityOptions}\n                          value={businessEntityOptions.find(c => { return c.id === value })}\n                          onChange={val => field.onChange(val.id)}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n\n                    />\n                    {errors.businessEntity && <FormFeedback className='text-danger'>{errors.businessEntity?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          )}\n        </CardBody>\n        {/* /Header */}\n\n        <hr className='invoice-spacing' />\n        {errors.contact_info && <p className='text-danger ms-2'>{errors.contact_info?.message}</p>}\n        {/* Product Details */}\n        <CardBody className='invoice-padding invoice-product-details'>\n          {fields.map((item, i) => (\n\n            <div key={i} className='repeater-wrapper'>\n              <Row >\n                <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                  <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                    <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-50 mb-0'>First Name</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_name'\n                        name={`contact_info.${i}.name`}\n                        render={({ field }) => (\n                          <Input type='text' {...register(`contact_info.${i}.name`)} invalid={errors.contact_info?.[i]?.name && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.name && <FormFeedback>{errors.contact_info?.[i]?.name.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-2 mb-0'>Email</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_email'\n                        name={`contact_info.${i}.email`}\n                        render={({ field }) => (\n                          <Input type='email' {...register(`contact_info.${i}.email`)} invalid={errors.contact_info?.[i]?.email && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.email && <FormFeedback>{errors.contact_info?.[i]?.email.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-2 mb-0'>Mobile</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_contactNumber'\n                        name={`contact_info.${i}.contactnumber`}\n                        render={({ field }) => (\n                          <Input type='number'  {...register(`contact_info.${i}.contactnumber`)} invalid={errors.contact_info?.[i]?.contactnumber && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.contactnumber && <FormFeedback>{errors.contact_info?.[i]?.contactnumber.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Designation</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_designation'\n                        name={`contact_info.${i}.designation`}\n                        render={({ field }) => (\n                          <Input type='text' {...field} {...register(`contact_info.${i}.designation`)} />\n                        )}\n                      />\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Primary</CardText>\n                      <div className='form-switch form-check-primary'>\n                        <Input type='switch' id='switch-primary' value={true} name='primary' defaultChecked {...register(`contact_info.${i}.primaryStatus`)} />\n                      </div>\n                    </Col>\n                  </Row>\n                  <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                    <X size={18} className='cursor-pointer' onClick={() => removeItem(item.id)} />\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          ))}\n\n          <Row className='mt-1'>\n            <Col sm='12' className='px-0'>\n              <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n              </Button>\n            </Col>\n          </Row>\n\n        </CardBody>\n\n        <hr className='invoice-spacing' />\n        {/* Product Details */}\n        <CardBody>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='gstRegistrationType'>\n                  GST Type\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"gstRegistrationType\"\n                    id=\"gstRegistrationType\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.gstRegistrationType })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={gstRegistrationTypeOptions}\n                        value={gstRegistrationTypeOptions.find(c => { return c.id === value })}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.gstRegistrationType && <FormFeedback className='text-danger'>{errors.gstRegistrationType?.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='placeOfSupply'>\n                  Place of Supply\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"placeOfSupply\"\n                    id=\"placeOfSupply\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        name=\"placeOfSupply\"\n                        title=\"Country\"\n                        className={classnames('react-select', { 'is-invalid': errors.gstRegistrationType })}\n                        {...field}\n                        classNamePrefix='select'\n                        aria-label='name'\n                        value={stateOptions.find(c => c.id === value)}\n                        options={stateOptions}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        onChange={val => field.onChange(val.id)}\n                      />\n                    )}\n                  />\n                  {errors.placeOfSupply && <FormFeedback className='text-danger'>{errors.placeOfSupply?.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='gstin'>\n                  GSTIN\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='gstin'\n                    name='gstin'\n                    control={control}\n                    render={({ field }) => <Input invalid={errors.gstin && true} {...field} />}\n                  />\n                  {errors.gstin && <FormFeedback>{errors.gstin.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='currency'>\n                  Currency\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"currency\"\n                    id=\"currency\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        {...register(\"currency\")}\n                        inputRef={ref}\n                        className=\"react-select col-lg-12 col-sm-12\"\n                        classNamePrefix=\"addl-class\"\n                        options={currencyOptions}\n                        value={currencyOptions.find(c => c.id === value)}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                  {errors.currency && <FormFeedback>{errors.currency.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </CardBody>\n        {/* Invoice Total */}\n        <CardBody className=''>\n          <h4 className='text-primary'>Billing Address</h4>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='billingAddress_addressline1'>\n                  Address Line1\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='billingAddress_addressline1'\n                    name=\"billingAddressLine1\"\n                    control={control}\n                    render={({ field }) => <Input {...field} />}\n                  />\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='billingAddress_addressline2'>\n                  Address Line 2\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='billingAddress_addressline2'\n                    name=\"billingAddressLine2\"\n                    control={control}\n                    render={({ field }) => <Input {...field} />}\n                  />\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='billingAddress_city'>\n                  City\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='billingAddress_city'\n                    name=\"billingAddressCity\"\n                    control={control}\n                    render={({ field }) => <Input  {...field} />}\n                  />\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='billingAddressState'>\n                  State\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"billingAddressState\"\n                    id=\"billingAddressState\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select')}\n                        {...field}\n                        classNamePrefix='select'\n                        options={stateOptions}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        value={stateOptions.find(c => { return c.id === value })}\n                        onChange={val => field.onChange(val.id)}\n                      />\n                    )}\n                  />\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='billingAddressCountry'>\n                  Country\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"billingAddressCountry\"\n                    id=\"billingAddressCountry\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select')}\n                        {...field}\n                        classNamePrefix='select'\n                        options={countryOptions}\n                        value={countryOptions.find(c => { return c.id === value })}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='billingAddress_zipcode'>\n                  Zip Code\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='billingAddress_zipcode'\n                    name='billingAddressZip'\n                    control={control}\n                    render={({ field }) => <Input type='text' invalid={errors.billingAddressZip && true} {...field} />}\n                  />\n                  {errors.billingAddressZip && <FormFeedback>{errors.billingAddressZip.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/client/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form >\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ClientAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ClientAdd\n"],"sourceRoot":""}