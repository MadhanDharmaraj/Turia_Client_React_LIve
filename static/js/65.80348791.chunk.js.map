{"version":3,"sources":["views/apps/digital-signature/add/AddCard.js","views/apps/digital-signature/add/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","AddCard","useState","block","setBlock","Loader","dispatch","useDispatch","store","useSelector","state","digitalsignature","navigate","useNavigate","clientId","setClientId","schema","yup","shape","required","rows","of","name","createdBy","default","organizationId","email","contact","matches","message","excludeEmptyString","issuedDate","expiryDate","password","min","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","clientOptions","setClientOptions","useFieldArray","keyName","fields","append","remove","onSubmit","data","addDsc","addItem","_formValues","forEach","obj","key","getClientInfo","id","DSCList","useEffect","DSCLists","axios","post","status","then","response","arr","clients","blocking","loader","className","md","sm","size","for","render","field","ref","inputRef","classnames","classNamePrefix","options","value","find","c","onChange","val","getOptionLabel","option","getOptionValue","map","item","i","type","invalid","lg","date","dateStr","altInput","altFormat","dateFormat","onClick","rowid","color","outline","tag","Link","to","ServiceAdd","xl","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/65.80348791.chunk.js","sourcesContent":["// ** React Imports\nimport { useEffect, useState, Fragment } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport classnames from 'classnames'\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus } from 'react-feather'\nimport Select from 'react-select'\nimport { DSCList, addDsc } from '../store/index'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\n//import moment from 'moment'\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\nconst AddCard = () => {\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.digitalsignature)\n  const navigate = useNavigate()\n  const [clientId, setClientId] = useState(null)\n  const schema = yup.object().shape({\n    clientId: yup.string().required(\"Please select a Client\"),\n    rows: yup.array().of(\n      yup.object().shape({\n        name: yup.string().required(\"Please Enter Name\"),\n        createdBy: yup.string().default(userId),\n        organizationId: yup.string().default(activeOrgId),\n        email: yup.string().email().required(\"Please Enter Email\"),\n        contact: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n        issuedDate: yup.number().required(\"Please Enter Issued Date\"),\n        expiryDate: yup.number().required(\"Please Enter Expiry Date\"),\n        password: yup.string().min(5, \"Password length should be 5 or above.\")\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  //const [date, setDate] = useState(\"\")\n  const [clientOptions, setClientOptions] = useState([])\n  const { fields, append, remove } = useFieldArray({ name: 'rows', keyName: 'rowid', control })\n  const onSubmit = async data => {\n    setBlock(true)\n    await dispatch(addDsc(data))\n    navigate('/digital-signature/list')\n\n  }\n\n  const addItem = (() => {\n    append({ clientId: '', name: '', email: '', contact: '', issuedDate: '', expiryDate: '', password: '' })\n\n    control._formValues.rows.forEach((obj, key) => {\n      control._formValues.rows[key].clientId = clientId\n    })\n\n  })\n\n  const removeItem = (ind) => {\n    remove(ind)\n  }\n\n  // const compareDate = (fie) => {\n\n  //   console.log(fie)\n  //   // if (control._formValues.rows[ind].issuedDate !== '' && control._formValues.rows[ind].expiryDate !== '') {\n  //   //   const issDate = control._formValues.rows[ind].issuedDate[0]\n  //   //   const expDate = control._formValues.rows[ind].expiryDate[0]\n\n  //   //   if (expDate < issDate) {\n  //   //     console.log('Success Date')\n  //   //   }\n  // }\n\n  const getClientList = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getClientInfo = async (id) => {\n    setClientId(id)\n    remove()\n    await dispatch(DSCList(id))\n  }\n\n  useEffect(() => {\n    store.DSCLists.forEach((obj) => {\n      const data = {}\n\n      data['name'] = obj.name\n      data['createdBy'] = userId\n      data['email'] = obj.email\n      data['organizationId'] = activeOrgId\n      data['clientId'] = clientId\n      data['contact'] = obj.contact\n      data['issuedDate'] = obj.issuedDate || null\n      data['expiryDate'] = obj.expiryDate || null\n      data['password'] = obj.password | ''\n\n      append(data)\n    })\n\n  }, [store.DSCLists])\n\n  useEffect(() => {\n    getClientList()\n    addItem()\n  }, [])\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Card className='invoice-preview-card'>\n          {/* Header */}\n          <CardBody className='pb-0'>\n            <Row>\n              <Col md='6' className='mb-1'>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='clientId'>\n                    Client\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"clientId\"\n                      id=\"clientId\"\n                      render={({ field, ref }) => (\n                        <Select\n                          {...field}\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.clientId })}\n                          classNamePrefix='select'\n                          options={clientOptions}\n                          value={clientOptions.find(c => { return c.id === field.value })}\n                          onChange={(val) => { field.onChange(val.id); getClientInfo(val.id) }}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n                    />\n                    {errors.clientId && <FormFeedback className='text-danger'>{errors.clientId?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </CardBody>\n          <CardBody className='invoice-padding invoice-product-details'>\n            {fields.map((item, i) => (\n              <div key={item.rowid} className='repeater-wrapper'>\n                <Row >\n                  <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                    <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                      <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Name</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_name'\n                          name={`rows[${i}].name`}\n                          render={({ field }) => (\n                            <Input type='text' invalid={errors.rows?.[i]?.name && true} {...field} />\n                          )}\n                        />\n                        {errors.rows?.[i]?.name && <FormFeedback>{errors.rows?.[i]?.name.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 my-2 col-lg-2 col-sm-12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Email</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_email'\n                          name={`rows[${i}].email`}\n                          render={({ field }) => (\n                            <Input type='email' invalid={errors.rows?.[i]?.email && true} {...field} />\n                          )}\n                        />\n                        {errors.rows?.[i]?.email && <FormFeedback>{errors.rows?.[i]?.email.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Mobile</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_contactNumber'\n                          name={`rows[${i}].contact`}\n                          render={({ field }) => (\n                            <Input type='number' invalid={errors.rows?.[i]?.contact && true} {...field} />\n                          )}\n                        />\n                        {errors.rows?.[i]?.contact && <FormFeedback>{errors.rows?.[i]?.contact.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Issued Date</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_issuedDate'\n                          name={`rows[${i}].issuedDate`}\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                        {errors.rows?.[i]?.issuedDate && <FormFeedback>{errors.rows?.[i]?.issuedDate.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Expiry Date</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_expiryDate'\n                          name={`rows[${i}].expiryDate`}\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                        {errors.rows?.[i]?.expiryDate && <FormFeedback>{errors.rows?.[i]?.expiryDate.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Password</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_password'\n                          name={`rows[${i}].password`}\n                          render={({ field }) => (\n                            <Input type='text' invalid={errors.rows?.[i]?.password && true} {...field} />\n                          )}\n                        />\n                        {errors.rows?.[i]?.password && <FormFeedback>{errors.rows?.[i]?.password.message}</FormFeedback>}\n                      </Col>\n                    </Row>\n                    <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                      <X size={18} className='cursor-pointer' onClick={() => removeItem(i)} />\n                    </div>\n                  </Col>\n                </Row>\n              </div>\n            ))}\n\n            <Row className='mt-1'>\n              <Col sm='12' className='px-0'>\n                <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                  <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                </Button>\n              </Col>\n            </Row>\n\n          </CardBody>\n          {/* /Header */}\n        </Card>\n        <Card>\n          <CardBody>\n            <div className='modal-footer border-0'>\n              <Button color='warning' outline tag={Link} to='/digital-signature/list'>\n                Cancel\n              </Button>\n              <Button color='primary' type=\"submit\" >\n                Save\n              </Button>\n            </div>\n          </CardBody>\n        </Card>\n      </form>\n    </UILoader>\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ServiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ServiceAdd\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}