{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/logic/shouldSubscribeByName.ts","../../src/useSubscribe.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/logic/getControllerValue.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFocusFieldName.ts","../../src/logic/mapCurrentIds.ts","../../src/logic/generateId.ts","../../src/logic/mapId.ts","../../src/utils/append.ts","../../src/utils/fillEmptyArray.ts","../../src/utils/insert.ts","../../src/utils/move.ts","../../src/utils/prepend.ts","../../src/utils/remove.ts","../../src/utils/swap.ts","../../src/utils/update.ts","../../src/useFieldArray.ts","../../src/utils/omitKeys.ts","../../src/utils/isFunction.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","useFormContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","signalName","convertToArrayPayload","currentName","startsWith","tearDown","_unsubscribe","unsubscribe","useSubscribe","props","_updateSubscription","disabled","subject","subscribe","next","callback","updateSubscriptionProps","skipEarlySubscription","useController","methods","control","shouldUnregister","_formValues","_defaultValues","setInputStateValue","_formState","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","useFormState","values","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","isNameInFieldArray","_names","array","_stateFlags","action","unregister","onChange","event","target","isCheckBoxInput","checked","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","_fieldIds","keyName","map","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","slice","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","fieldValues","useFieldArray","mapIds","_getFieldArray","setFields","_actioned","add","fieldArrayName","updateValues","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","watchAll","watch","watchField","_executeSchema","then","_updateValid","swap","mapCurrentIds","swapArrayAt","_updateFieldArray","argA","argB","move","moveArrayAt","prependAt","fillEmptyArray","getFocusFieldName","appendValue","appendAt","remove","removeArrayAt","insertAt","update","updateAt","cloneObject","Set","isFunction","createSubject","_observers","observers","observer","subscription","tearDowns","push","teardown","createSubscription","subscriber","closed","createSubscriber","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","fieldName","join","foundError","pop","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","isBlurEvent","isSubmitted","reValidateMode","isString","RegExp","getValidateError","isMessage","validationData","isRegex","inputValue","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","has","shouldSkipRender","resolver","executeBuildInValidation","method","shouldSetValues","shouldSetFields","unsetEmptyArray","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","setFieldArrayDirtyFields","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","_removeUnmounted","live","getValues","_getWatch","isGlobal","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","shouldSkipValidation","hasValidation","deps","skipValidation","isWatched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","all","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl"],"mappings":"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","file":"static/js/0.a56dc242.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T>(name?: T, signalName?: string) =>\n  !name ||\n  !signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, TearDown } from './utils/createSubject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, _name.current)),\n    skipEarlySubscription: true,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport { FieldValues, UseFormStateProps, UseFormStateReturn } from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(_name.current, formState.name) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n    skipEarlySubscription: true,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n    skipEarlySubscription: true,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      setFields(updatedFieldArrayValuesWithKey);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type Subscription = {\n  add: (tearDown: TearDown) => void;\n  unsubscribe: () => void;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nfunction createSubscription() {\n  let tearDowns: TearDown[] = [];\n\n  const add = (tearDown: TearDown) => {\n    tearDowns.push(tearDown);\n  };\n\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n    tearDowns = [];\n  };\n\n  return {\n    add,\n    unsubscribe,\n  };\n}\n\nfunction createSubscriber<T>(\n  observer: Observer<T>,\n  subscription: Subscription,\n): Observer<T> {\n  let closed = false;\n  subscription.add(() => (closed = true));\n\n  const next = (value: T) => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n\n  return {\n    next,\n  };\n}\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>) => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n    _observers.push(subscriber);\n    return subscription;\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  React.useEffect(\n    () => () =>\n      Object.values(control._subjects).forEach((subject) =>\n        subject.unsubscribe(),\n      ),\n    [control],\n  );\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}