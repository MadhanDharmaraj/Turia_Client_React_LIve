{"version":3,"sources":["views/apps/task/add/AddCard.js","views/apps/task/add/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/apps/proposal/helper/hepler.js"],"names":["activeOrgId","activeOrganizationid","activeOrg","activeOrganization","userId","orgUserId","AddCard","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","navigate","useNavigate","date","setDate","schema","yup","shape","createdBy","default","clientId","required","serviceId","assignee","min","reviewer","clientAccessFlag","organizationId","taskStatus","invoiceId","startDate","endDate","recurringFlag","priority","invoiceFlag","invoiceItems","of","sacCode","price","exemptioReasonId","actualPrice","nullable","taxGroupId","subTotalAmount","isTaxApplicable","taxes","when","is","then","store","useSelector","state","task","invoicestore","invoice","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","priorityOptions","id","name","assigneeUserOptions","setAssigneeUserOptions","reviewerUserOptions","setReviewerUserOptions","dispatch","useDispatch","clientOptions","setClientOptions","serviceOptions","setServiceOptions","userOptions","setUserOptions","exemptionReasonOptions","setExemptionReasonOptions","taxGroupOptions","setTaxGroupOptions","setinvoiceFlag","taxValues","setTaxValues","taskParticipants","seTaskParticipants","selectedClient","setSelectedClient","invoiceData","setInvoiceData","invoiceTaxes","setInvoiceTaxes","setInvoiceItems","finalTotal","setFinalTotal","finalSubTotal","setFinalSubTotal","taskDescription","setTaskDescription","finalTotalTaxAmount","setFinalTotalTaxAmount","useFieldArray","keyName","fields","append","remove","filesArr","setFilesArr","files","setFiles","fileUploadProgress","setProgress","attachmentIds","setAttachmentsId","moveFiles","obj","taskId","axios","post","response","arr","data","exemptionreasons","useEffect","map","addTaskParticipants","rows","length","comment","isDefault","addDescription","_formValues","cloneWorkFlows","calculateTaxes","JSON","stringify","totalTaxAmount","String","dueAmount","totalAmount","addInvoice","temp","addInvoiceItems","updateInvocieId","updatedBy","formatparticipants","user","type","onSubmit","predata","tempParticipants","forEach","push","undefined","addTask","getClientData","getClient","res","payload","getOrganizationUsers","organizationusers","catch","err","console","log","configUpload","headers","onUploadProgress","Math","round","loaded","total","useDropzone","multiple","onDrop","acceptedFiles","rejectedFiles","toast","error","getRootProps","getInputProps","formData","FormData","file","key","attachment_ids","uploadFiles","addItem","taxPrice","description","Object","keys","Invoicedata","billingaddresscity","billingaddressline1","billingaddressline2","billingaddressstatesname","billingaddresszip","currencyid","currenciessymbol","currenciescode","currenciesname","email","gstin","placeofsupplyid","addressline1","addressline2","organizationcity","statename","pinzipcode","organizationimageid","stateshortname","moment","startOf","format","taxtype","stateid","taxType","taxvalues","getTaxValue","ItemFinalTotalAmount","items","finalsubTotalAmount","finalTaxAmount","parseFloat","output","a","parser","flat","reduce","acc","item","existItem","find","taxName","taxAmount","assign","calculateInvoiceTax","loadItemData","ind","service_price","tax_group_id","desFlg","priceFlg","sacFlg","taxFlg","itemFlg","eachObj","selectedService","saccode","sellingprice","taxgroupid","exemptionreasonid","calculateTaxAmount","invoice_item_taxes","taxGroups","taxApplicable","nontaxableflag","istaxapplicable","taxid","calculateTax","percentage","dataTemp","parseInt","toFixed","fileList","index","className","size","color","outline","onClick","filtered","filter","i","handleRemoveFile","status","clients","services","taxgroups","handleAssigneeChange","e","reviewerOptions","tempArr","Array","isArray","x","id1","some","id2","handleReviwerChange","assigneeOptions","blocking","loader","k","message","sm","for","render","field","value","ref","inputRef","classnames","classNamePrefix","options","c","onChange","val","getOptionLabel","option","getOptionValue","onInput","target","invalid","isMulti","rules","dateFormat","dateStr","altInput","altFormat","defaultChecked","lg","rowid","tag","Link","to","TaskAdd","xl","md","UILoader","props","children","overlayColor","Tag","style","defaultProps","ComponentSpinner","amount","taxRateInPercentage","TaxType","calculatedTax","str","parse","replace"],"mappings":"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","file":"static/js/54.92595474.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect, Fragment } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\n// ** Custom Components\nimport classnames from 'classnames'\nimport { useDropzone } from 'react-dropzone'\n// ** Third Party Components\nimport Avatar from '@src/@core/components/avatar'\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus, Paperclip } from 'react-feather'\nimport Select, { components } from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\nimport { getClient, addTask, updateInvocieId, addTaskParticipants, addDescription, cloneWorkFlows } from '../store'\nimport { addInvoice, addInvoiceItems } from '@src/views/apps/invoice/store/index.js'\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, FormFeedback, Input, CardHeader, ListGroupItem, ListGroup, Progress } from 'reactstrap'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { calculateTax, parser } from '@src/views/apps/proposal/helper/hepler.js'\nimport moment from 'moment'\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\n\nconst AddCard = () => {\n  // ** States\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n\n  const navigate = useNavigate()\n  const [setOpen] = useState(false)\n  const [date, setDate] = useState(\"\")\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    clientId: yup.string().required(\"Please select a Client\"),\n    serviceId: yup.string().required(\"Please select a Service\"),\n    assignee: yup.array().min(1, \"Please select Assignee\"),\n    reviewer: yup.array(),\n    clientAccessFlag: yup.boolean().default(false),\n    organizationId: yup.string().default(activeOrgId),\n    taskStatus: yup.number().default(1),\n    invoiceId: yup.string().default(0),\n    startDate: yup.string().required('Please Select Start Date'),\n    endDate: yup.string().required('Please Select End Date'),\n    recurringFlag: yup.boolean().default(false),\n    priority: yup.string().required(\"Please select a Priority\"),\n    invoiceFlag: yup.boolean().default(true),\n    invoiceItems: yup.array().of(\n      yup.object().shape({\n        serviceId: yup.string().required(\"Please Select Service Item\"),\n        invoiceId: yup.string(),\n        sacCode: yup.string(),\n        price: yup.string(),\n        organizationId: yup.string().default(activeOrgId),\n        exemptioReasonId: yup.string(),\n        actualPrice: yup.string().nullable(),\n        taxGroupId: yup.string().required('Please Select Tax group'),\n        subTotalAmount: yup.string().nullable('Subtotal Should be Greater than 0'),\n        isTaxApplicable: yup.boolean().default(true),\n        taxes: yup.string()\n      })\n    ).when(\"invoiceFlag\", { is: (invoiceFlag) => invoiceFlag === true, then: yup.array().min(1, \"Require Atleast one Item when Proposal For this Task.\") })\n  })\n  const store = useSelector(state => state.task)\n  const invoicestore = useSelector(state => state.invoice)\n\n  const { handleSubmit, formState: { errors }, control, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const priorityOptions = [\n    { id: 1, name: \"Low\" },\n    { id: 2, name: \"Medium\" },\n    { id: 3, name: \"High\" }\n  ]\n\n  const [assigneeUserOptions, setAssigneeUserOptions] = useState([])\n  const [reviewerUserOptions, setReviewerUserOptions] = useState([])\n\n  const dispatch = useDispatch()\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [userOptions, setUserOptions] = useState([])\n  const [exemptionReasonOptions, setExemptionReasonOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [invoiceFlag, setinvoiceFlag] = useState(true)\n  const [taxValues, setTaxValues] = useState([])\n  const [taskParticipants, seTaskParticipants] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [invoiceData, setInvoiceData] = useState({})\n  const [invoiceTaxes, setInvoiceTaxes] = useState([])\n  const [invoiceItems, setInvoiceItems] = useState([])\n  const [finalTotal, setFinalTotal] = useState(0)\n  const [finalSubTotal, setFinalSubTotal] = useState(0)\n  const [taskDescription, setTaskDescription] = useState('')\n  const [finalTotalTaxAmount, setFinalTotalTaxAmount] = useState(0)\n  const { fields, append, remove } = useFieldArray({ name: 'invoiceItems', keyName: 'rowid', control })\n\n  const [filesArr, setFilesArr] = useState([])\n  const [files, setFiles] = useState([])\n  const [fileUploadProgress, setProgress] = useState(0)\n  const [attachmentIds, setAttachmentsId] = useState([])\n\n  const moveFiles = async () => {\n    const obj = { taskId: store.taskId, organizationId: activeOrgId, attachmentIds, createdBy: userId }\n    await axios.post('/google/movetaskfiles', obj).then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  useEffect(async () => {\n    if (store.taskId !== null) {\n      const arr = taskParticipants.map((obj) => {\n        return { ...obj, taskId: store.taskId }\n      })\n      await dispatch(addTaskParticipants({ rows: arr }))\n\n\n      if (attachmentIds.length > 0) {\n        await moveFiles()\n      }\n\n      if (taskDescription !== '' || attachmentIds.length > 0) {\n        const comment = {\n          comment: taskDescription,\n          taskId: store.taskId,\n          createdBy: userId,\n          organizationId: activeOrgId,\n          attachmentIds,\n          isDefault: true\n        }\n        await dispatch(addDescription(comment))\n      }\n\n      const obj = {\n        taskId: store.taskId,\n        serviceId: control._formValues.serviceId,\n        organizationId: activeOrgId,\n        createdBy: userId\n      }\n      await dispatch(cloneWorkFlows(obj))\n\n      if (invoiceFlag) {\n        const data = { ...invoiceData, calculateTaxes: JSON.stringify(invoiceTaxes), totalTaxAmount: String(finalTotalTaxAmount), dueAmount: String(finalTotal), totalAmount: String(finalTotal), subTotalAmount: String(finalSubTotal) }\n        await dispatch(addInvoice(data))\n      } else {\n        const id = store.taskId\n        navigate(`/task/view/${id}`)\n      }\n    }\n  }, [store.taskId])\n\n  useEffect(async () => {\n    if (invoiceFlag) {\n      if (invoicestore.invoiceId !== null) {\n        const temp = invoiceItems.map((obj) => {\n          return { ...obj, invoiceId: invoicestore.invoiceId }\n        })\n        await dispatch(addInvoiceItems(temp))\n        const invoiceId = invoicestore.invoiceId\n        const id = store.taskId\n        await dispatch(updateInvocieId({ updatedBy: userId, id, invoiceId }))\n\n        navigate(`/task/view/${id}`)\n      }\n    }\n  }, [invoicestore.invoiceId])\n\n  const formatparticipants = (user, type) => {\n    const obj = {\n      organizationId: activeOrgId,\n      userId: user,\n      type,\n      createdBy: userId\n    }\n    return obj\n  }\n\n  const onSubmit = async data => {\n    setBlock(true)\n    const temp = data.invoiceItems\n    setInvoiceItems(predata => ([...predata, ...temp]))\n    const tempParticipants = []\n    data.assignee.forEach((user) => {\n      tempParticipants.push(formatparticipants(user, 1))\n    })\n\n    if (data.reviewer !== undefined) {\n      data.reviewer.forEach((user) => {\n        tempParticipants.push(formatparticipants(user, 2))\n      })\n    }\n\n    seTaskParticipants(tempParticipants)\n    delete data.invoiceItems\n    delete data.assignee\n    delete data.reviewer\n\n    // if (serviceDetails.isdefault && serviceDetails.organizationid === null) {\n    //   axios.post('/services/clone', data)\n    //     .then((res) => {\n    //       id = res.data.service.id\n    //     })\n    //     .catch((err) => {\n    //       console.log(err)\n    //     })\n    // }\n\n\n    await dispatch(addTask(data))\n  }\n\n  const getExemptionReason = () => {\n    axios.post('/exemptionreasons/dropdown').then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data\n      setReviewerUserOptions(arr.organizationusers)\n      setAssigneeUserOptions(arr.organizationusers)\n      setUserOptions(arr.organizationusers)\n    }).catch((err) => {\n      console.log(err)\n    })\n\n  }\n\n  const configUpload =\n  {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    },\n    onUploadProgress: data => {\n      //Set the progress value to show the progress bar\n      setProgress(Math.round((100 * data.loaded) / data.total))\n    }\n  }\n\n  const uploadFiles = () => {\n\n    const formData = new FormData()\n    files.forEach((file, key) => {\n      formData.append(`files[${key}]`, file)\n    })\n    formData.append('organizationId', activeOrgId)\n    formData.append('createdBy', userId)\n\n    axios.post('/google/taskfiles', formData, configUpload).then((res) => {\n      setAttachmentsId([...attachmentIds, ...res.data.attachment_ids])\n    }).catch((err) => { console.log(err) })\n  }\n\n  const { getRootProps, getInputProps } = useDropzone({\n    multiple: true,\n    onDrop: (acceptedFiles, rejectedFiles) => {\n      if (rejectedFiles.length) {\n        toast.error('You can only upload image Files!.')\n      } else {\n        setFiles(acceptedFiles)\n        setFilesArr([...filesArr, ...acceptedFiles])\n      }\n    }\n  })\n\n  useEffect(() => {\n    if (files.length > 0) {\n      uploadFiles()\n    }\n  }, [files])\n\n  const getTaxValue = (taxType) => {\n    const data = {\n      type: taxType\n    }\n    axios.post('/taxvalues/list', data).then(response => {\n      const arr = response.data\n      setTaxValues(arr.taxvalues)\n    })\n\n  }\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '', isTaxApplicable: false })\n  })\n\n  useEffect(() => {\n    if (Object.keys(selectedClient).length > 0) {\n      const Invoicedata = {}\n      Invoicedata['billingAddressCity'] = selectedClient.billingaddresscity\n      Invoicedata['billingAddressLine1'] = selectedClient.billingaddressline1\n      Invoicedata['billingAddressLine2'] = selectedClient.billingaddressline2 || ''\n      Invoicedata['billingAddressState'] = selectedClient.billingaddressstatesname || ''\n      Invoicedata['billingAddressZipCode'] = selectedClient.billingaddresszip\n      Invoicedata['billingCurrencyId'] = selectedClient.currencyid || activeOrg.currencyid\n      Invoicedata['billingCurrencySymbol'] = selectedClient.currenciessymbol\n      Invoicedata['billingCurrencyShortName'] = selectedClient.currenciescode\n      Invoicedata['billingCurrencyName'] = selectedClient.currenciesname\n      Invoicedata['bankAccountBankName'] = ''\n      Invoicedata['bankAccountBranchName'] = ''\n      Invoicedata['bankAccountHolderName'] = ''\n      Invoicedata['bankAccountId'] = ''\n      Invoicedata['bankAccountIfscCode'] = ''\n      Invoicedata['bankAccountNumber'] = ''\n      Invoicedata['contactEmail'] = selectedClient.email\n      Invoicedata['gstin'] = selectedClient.gstin\n      Invoicedata['isRcmApplicable'] = false\n      Invoicedata['contactName'] = selectedClient.name\n      Invoicedata['placeOfSupplyId'] = selectedClient.placeofsupplyid\n      Invoicedata['contactId'] = selectedClient.id\n      Invoicedata['organizationAddressLine1'] = activeOrg.addressline1\n      Invoicedata['organizationAddressLine2'] = activeOrg.addressline2\n      Invoicedata['organizationCity'] = activeOrg.organizationcity\n      Invoicedata['organizationState'] = activeOrg.statename\n      Invoicedata['organizationZipCode'] = activeOrg.pinzipcode\n      Invoicedata['organizationName'] = activeOrg.name\n      Invoicedata['organizationImageUrl'] = activeOrg.organizationimageid\n      Invoicedata['organizationStateCode'] = activeOrg.stateshortname\n      Invoicedata['organizationGstin'] = activeOrg.gstin\n      Invoicedata['createdBy'] = userId\n      Invoicedata['invoiceDate'] = moment().startOf('day').format('x')\n      Invoicedata['organizationId'] = activeOrgId\n      Invoicedata['note'] = ''\n      Invoicedata['paymentStatus'] = 5\n      Invoicedata['status'] = 4\n      Invoicedata['paymentDue'] = moment().startOf('day').format('x')\n\n      setInvoiceData(Invoicedata)\n\n      let taxtype = 1\n      if (activeOrg.stateid === selectedClient.placeofsupplyid) {\n        taxtype = 2\n      }\n\n      getTaxValue(taxtype)\n\n    }\n\n  }, [selectedClient])\n\n  const calculateInvoiceTax = () => {\n\n    const inputArray = control._formValues.invoiceItems.map(a => parser(a.taxes))\n    let temp = []\n    temp = inputArray.flat()\n    let output = []\n    output = temp.reduce((acc, item) => {\n      if (item !== undefined) {\n        const existItem = acc.find((obj) => {\n          return item.taxName === obj.taxName\n        })\n        if (existItem) {\n          existItem.taxAmount = parseFloat(existItem.taxAmount) + parseFloat(item.taxAmount)\n        } else {\n          acc.push(Object.assign({}, item))\n        }\n      }\n      return acc\n    }, [])\n\n    setInvoiceTaxes(output)\n\n  }\n\n  const ItemFinalTotalAmount = () => {\n\n    const items = control._formValues.invoiceItems\n    let finalTotal = 0\n    let finalsubTotalAmount = 0\n    let finalTaxAmount = 0\n    items.forEach(obj => {\n      finalTotal = parseFloat(obj.subTotalAmount) + parseFloat(finalTotal)\n      finalsubTotalAmount = parseFloat(obj.price) + parseFloat(finalsubTotalAmount)\n      finalTaxAmount = parseFloat(finalTaxAmount) + parseFloat(obj.taxPrice)\n    })\n\n    setFinalTotal(finalTotal)\n    setFinalSubTotal(finalsubTotalAmount)\n    setFinalTotalTaxAmount(finalTaxAmount)\n    calculateInvoiceTax()\n  }\n\n  const removeItem = ((ind) => {\n    remove(ind)\n    ItemFinalTotalAmount()\n  })\n\n  const loadItemData = (ind, desFlg = false, priceFlg = false, sacFlg = false, taxFlg = false, itemFlg = false) => {\n    const eachObj = control._formValues.invoiceItems[ind] || {}\n\n    if (eachObj.serviceId === undefined || eachObj.serviceId === '') {\n      return false\n    }\n    let service_price, tax_group_id\n    const selectedService = serviceOptions.find((a) => a.id === eachObj.serviceId)\n    setValue(`invoiceItems[${ind}].serviceId`, eachObj.serviceId)\n    if (itemFlg) {\n      setValue(`invoiceItems[${ind}].sacCode`, selectedService.saccode)\n      service_price = selectedService.sellingprice || 0\n      tax_group_id = selectedService.taxgroupid\n      setValue(`invoiceItems[${ind}].actualPrice`, service_price)\n      setValue(`invoiceItems[${ind}].price`, String(selectedService.sellingprice) || 0)\n      setValue(`invoiceItems[${ind}].taxGroupId`, tax_group_id)\n      setValue(`invoiceItems[${ind}].description`, selectedService.description)\n      setValue(`invoiceItems[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    } else {\n      setValue(`invoiceItems[${ind}].sacCode`, sacFlg ? eachObj.sacCode : selectedService.saccode)\n      service_price = priceFlg ? eachObj.price : selectedService.sellingprice || 0\n      tax_group_id = taxFlg ? eachObj.taxGroupId : selectedService.taxgroupid\n      setValue(`invoiceItems[${ind}].price`, service_price)\n      setValue(`invoiceItems[${ind}].actualPrice`, String(selectedService.sellingprice) || 0)\n      setValue(`invoiceItems[${ind}].taxGroupId`, tax_group_id)\n      setValue(`invoiceItems[${ind}].description`, desFlg ? eachObj.description : selectedService.description)\n      setValue(`invoiceItems[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    }\n\n    let calculateTaxAmount = 0\n    const invoice_item_taxes = []\n\n    const taxGroups = taxGroupOptions.find((a) => a.id === tax_group_id)\n\n    const taxApplicable = taxGroups !== undefined ? !taxGroups.nontaxableflag : selectedService.istaxapplicable || false\n    setValue(`invoiceItems[${ind}].isTaxApplicable`, taxApplicable)\n\n    if (taxApplicable) {\n      if (taxGroups !== undefined) {\n        taxValues.forEach(obj => {\n          if (obj.taxid === tax_group_id) {\n            let temp = 0\n            temp = calculateTax(service_price, obj.percentage, 2)\n            calculateTaxAmount = parseFloat(calculateTaxAmount) + parseFloat(temp)\n            const dataTemp = {}\n            dataTemp[\"taxName\"] = `${obj.name} (${obj.percentage}%)`\n            dataTemp[\"taxId\"] = parseInt(obj.id)\n            dataTemp[\"taxNameValue\"] = obj.name\n            dataTemp[\"taxPercentage\"] = String(obj.percentage)\n            dataTemp[\"taxAmount\"] = String(temp)\n\n            invoice_item_taxes.push(dataTemp)\n          }\n        })\n      }\n    }\n\n    setValue(`invoiceItems[${ind}].subTotalAmount`, parseFloat(parseFloat(calculateTaxAmount || 0.00) + parseFloat(service_price || 0.00)).toFixed(2))\n    setValue(`invoiceItems[${ind}].taxPrice`, parseFloat(calculateTaxAmount).toFixed(2))\n    setValue(`invoiceItems[${ind}].taxes`, JSON.stringify(invoice_item_taxes))\n    setValue(`invoiceItems[${ind}].createdBy`, userId)\n\n    ItemFinalTotalAmount()\n\n  }\n\n  const enableInvoice = () => {\n\n    setinvoiceFlag(!invoiceFlag)\n    setValue('invoiceFlag', !invoiceFlag)\n    if (invoiceFlag) {\n      remove()\n    } else {\n      if (control._formValues.invoiceItems.length === 0) {\n        addItem()\n      }\n    }\n  }\n\n  const handleRemoveFile = file => {\n    const uploadedFiles = files\n    const filtered = uploadedFiles.filter(i => i.name !== file.name)\n    setFiles([...filtered])\n  }\n\n  const renderFileSize = size => {\n    if (Math.round(size / 100) / 10 > 1000) {\n      return `${(Math.round(size / 100) / 10000).toFixed(1)} mb`\n    } else {\n      return `${(Math.round(size / 100) / 10).toFixed(1)} kb`\n    }\n  }\n\n  const fileList = files.map((file, index) => (\n    <ListGroupItem key={`${file.name}-${index}`} className='d-flex align-items-center justify-content-between'>\n      <div className='file-details d-flex align-items-center'>\n        <div className='file-preview me-1'>\n          <Avatar />\n        </div>\n        <div>\n          <p className='file-name mb-0'>{file.name}</p>\n          <p className='file-size mb-0'>{renderFileSize(file.size)}</p>\n        </div>\n      </div>\n      <Button color='danger' outline size='sm' className='btn-icon' onClick={() => handleRemoveFile(file)}>\n        <X size={14} />\n      </Button>\n    </ListGroupItem>\n  ))\n\n  useEffect(() => {\n    getClients()\n    getServices()\n    getTaxGroups()\n    getOrganizationUsers()\n    getExemptionReason()\n    addItem()\n\n  }, [])\n\n  // handle onChange event of the dropdown\n  const handleAssigneeChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let reviewerOptions\n    if (tempArr.length > 0) {\n      reviewerOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { reviewerOptions = userOptions }\n\n    setReviewerUserOptions(reviewerOptions)\n    setValue(\"assignee\", tempArr)\n  }\n\n  const handleReviwerChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let assigneeOptions\n    if (tempArr.length > 0) {\n      assigneeOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { assigneeOptions = userOptions }\n\n    setAssigneeUserOptions(assigneeOptions)\n    setValue(\"reviewer\", tempArr)\n  }\n\n  // ** Custom Options Component\n  const OptionComponent = ({ data, ...props }) => {\n    if (data.type === 'button') {\n      return (\n        <Button className='text-start rounded-0 px-50' color={data.color} block onClick={() => setOpen(true)}>\n          <Plus className='font-medium-1 me-50' />\n          <span className='align-middle'>{data.label}</span>\n        </Button>\n      )\n    } else {\n      return <components.Option {...props}> {data.label} </components.Option>\n    }\n  }\n\n  const setServiceDefault = (serviceId) => {\n    if (control._formValues.invoiceItems.length === 0) {\n      addItem()\n    }\n    setValue(`invoiceItems[0].serviceId`, serviceId)\n    loadItemData(0, false, false, false, false, true)\n  }\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Card className='invoice-preview-card'>\n          {Object.keys(errors).map((obj, k) => {\n            return <FormFeedback key={k}> {errors[obj]?.message}</FormFeedback>\n          })}\n          <CardHeader>Add Task</CardHeader>\n          {/* Header */}\n          <CardBody className='pb-2 px-2'>\n            <Row>\n              <div className='col-lg-6 col-sm-12'>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='clientId'>\n                    Client\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"clientId\"\n                      id=\"clientId\"\n                      render={({ field, value, ref }) => (\n                        <Select\n                          {...field}\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.clientId })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={clientOptions}\n                          value={clientOptions.find(c => { return c.id === value })}\n                          onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n\n                    />\n                    {errors.clientId && <FormFeedback className='text-danger'>{errors.clientId?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='serviceId'>\n                    Service\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"serviceId\"\n                      id=\"serviceId\"\n                      render={({ field, value, ref }) => (\n                        <Select\n                          {...field}\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.serviceId })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={serviceOptions}\n                          value={serviceOptions.find(c => { return c.id === value })}\n                          onChange={val => { setServiceDefault(val.id); return field.onChange(val.id) }}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n\n                    />\n                    {errors.serviceId && <FormFeedback className='text-danger'>{errors.serviceId?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='description'>\n                    Description\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      id='description'\n                      name='description'\n                      control={control}\n                      render={({ field }) => <Input type=\"textarea\" onInput={(e) => { setTaskDescription(e.target.value) }} invalid={errors.description && true} {...field} />}\n                    />\n                    {errors.description && <FormFeedback>{errors.description.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='my-2'>\n                  <Col>\n                    <div className='d-lg-flex'>\n\n                      <input {...getInputProps()} />\n\n                      <Button type='button' color='primary' size='sm' {...getRootProps({ className: 'dropzone' })} >\n                        <Paperclip size={14} className=''></Paperclip> Add Attachment\n                      </Button>\n\n                      {fileUploadProgress > 0 && <Progress className='mt-md-50' color={fileUploadProgress < 100 ? 'primary' : 'success'} value={fileUploadProgress} />}\n\n                    </div>\n                  </Col>\n                </Row>\n                <Row>\n                  <ListGroup className='col-3'>{fileList}</ListGroup>\n                </Row>\n              </div>\n              <div className='col-lg-6 col-sm-12'>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='assignee'>\n                    Assignee\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"assignee\"\n                      id=\"assignee\"\n                      render={({ field, value, ref }) => (\n                        <Select\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.assignee })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={assigneeUserOptions}\n                          isMulti={true}\n                          value={value} // set selected values\n                          onChange={handleAssigneeChange}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                          styles={colourStyles}\n                        />\n                      )}\n\n                    />\n                    {errors.assignee && <FormFeedback className='text-danger'>{errors.assignee?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='reviewer'>\n                    Reviewer\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"reviewer\"\n                      id=\"reviewer\"\n                      render={({ field, value, ref }) => (\n                        <Select\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={reviewerUserOptions}\n                          isMulti={true}\n                          value={value} // set selected values\n                          onChange={handleReviwerChange}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                          styles={colourStyles}\n                        />\n                      )}\n\n                    />\n                    {errors.reviewer && <FormFeedback className='text-danger'>{errors.reviewer?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='startDate'>\n                    Start Date\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      value={date}\n                      name=\"startDate\"\n                      control={control}\n                      rules={{ required: true }}\n                      options={{ dateFormat: \"d-m-Y\" }}\n                      render={({ field }) => (\n                        <Flatpickr\n                          value={field.value}\n                          onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                          options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                          className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.startDate })} />\n                      )}\n                    />\n\n                    {errors.startDate && <FormFeedback className='text-danger'>{errors.startDate?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='endDate'>\n                    End Date\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      value={date}\n                      onChange={date => setDate(date)}\n                      name=\"endDate\"\n                      control={control}\n                      rules={{ required: true }}\n                      options={{ dateFormat: \"d-m-Y\" }}\n                      render={({ field }) => (\n                        <Flatpickr\n                          value={field.value}\n                          onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                          options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                          className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.endDate })} />\n                      )}\n                    />\n\n                    {errors.endDate && <FormFeedback className='text-danger'>{errors.endDate?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label required' for='priority'>\n                    Priority\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"priority\"\n                      id=\"priority\"\n                      render={({ field, value, ref }) => (\n                        <Select\n                          {...field}\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.priority })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={priorityOptions}\n                          value={priorityOptions.find(c => { return c.id === value })}\n                          onChange={val => field.onChange(val.id)}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n\n                    />\n                    {errors.priority && <FormFeedback className='text-danger'>{errors.priority?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n              </div>\n            </Row>\n          </CardBody>\n          <hr className='invoice-spacing' />\n          <Row className='px-1 pb-2'>\n            <div className='form-check form-check-primary mx-2'>\n              <Controller\n                control={control}\n                name={`invoiceFlag`}\n                rules={{ required: true }}\n                render={({ field }) => (\n                  <Input className='form-check-input' type='checkbox' id='invoice_flag' {...field} onChange={(val) => { field.onChange(val); enableInvoice() }} defaultChecked={invoiceFlag} />\n                )}\n              />\n              <Label className='form-check-label' for='invoice_flag'>\n                Create Proposal for this Task\n              </Label>\n            </div>\n          </Row>\n          {invoiceFlag && (\n            <CardBody className='invoice-padding invoice-product-details'>\n              {fields.map((item, index) => {\n                return (\n                  <div key={item.rowid} className='repeater-wrapper'>\n                    <Row>\n                      <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                        <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                          <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-12'>\n                            <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                            <Controller\n                              control={control}\n                              name={`invoiceItems[${index}].serviceId`}\n                              rules={{ required: true }}\n                              render={({ field, ref }) => (\n                                <Select\n                                  {...field}\n                                  inputRef={ref}\n                                  className={classnames('react-select', { 'is-invalid': errors.invoiceItems?.[index]?.serviceId })}\n                                  classNamePrefix='select'\n                                  options={serviceOptions}\n                                  value={serviceOptions.find(c => c.id === field.value)}\n                                  onChange={val => { field.onChange(val.id); loadItemData(index, false, false, false, false, true) }}\n                                  getOptionLabel={(option) => option.name}\n                                  getOptionValue={(option) => option.id}\n                                />\n                              )}\n                            />\n                            {errors.invoiceItems?.[index]?.serviceId && <FormFeedback>{errors.invoiceItems?.[index]?.serviceId.message}</FormFeedback>}\n                            <Controller\n                              id={`invoiceItems_${index}_description`}\n                              name={`invoiceItems[${index}].description`}\n                              control={control}\n                              render={({ field }) => <Input className='mt-1' invalid={errors.invoiceItems?.[index]?.description && true} onInput={(val) => { field.onChange(val); loadItemData(index, true, false, false, false, false) }} {...field} />}\n                            />\n                          </Col>\n                          <Col className='my-lg-0 my-2 col-lg-2 col-sm-12'>\n                            <CardText className='col-title mb-md-2 mb-0'>SAC Code</CardText>\n                            <Controller\n                              id={`invoiceItems_${index}_sacCode`}\n                              name={`invoiceItems[${index}].sacCode`}\n                              control={control}\n                              render={({ field }) => <Input type='text' invalid={errors.invoiceItems?.[index]?.sacCode && true} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, true, false, false) }} {...field} />}\n                            />\n                            {errors.invoiceItems?.[index]?.sacCode && <FormFeedback>{errors.invoiceItems?.[index]?.sacCode.message}</FormFeedback>}\n                          </Col>\n                          <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                            <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                            <Controller\n                              id={`invoiceItems_${index}_price`}\n                              name={`invoiceItems[${index}].price`}\n                              control={control}\n                              render={({ field }) => <Input type='number' id={`input_invoiceItems_${index}_price`} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, false, false, false) }} {...field} invalid={errors.invoiceItems?.[index]?.price && true} />}\n                            />\n                            {errors.invoiceItems?.[index]?.price && <FormFeedback>{errors.invoiceItems?.[index]?.price.message}</FormFeedback>}\n                          </Col>\n                          <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                            <CardText className='col-title mb-md-50 mb-0'>Tax Rate</CardText>\n                            <Controller\n                              control={control}\n                              name={`invoiceItems[${index}].taxGroupId`}\n                              rules={{ required: true }}\n                              render={({ field, ref }) => (\n                                <Select\n                                  {...field}\n                                  inputRef={ref}\n                                  className={classnames('react-select', { 'is-invalid': errors.invoiceItems?.[index]?.taxGroupId })}\n                                  classNamePrefix='select'\n                                  options={taxGroupOptions}\n                                  value={taxGroupOptions.find(c => c.id === field.value)}\n                                  onChange={(val) => { field.onChange(val.id); loadItemData(index, false, true, false, true, false) }}\n                                  getOptionLabel={(option) => option.name}\n                                  getOptionValue={(option) => option.id}\n                                />\n                              )}\n                            />\n                            {errors.invoiceItems?.[index]?.taxGroupId && <FormFeedback>{errors.invoiceItems?.[index]?.taxGroupId.message}</FormFeedback>}\n                            {\n                              !item.isTaxApplicable && <Controller\n                                control={control}\n                                name={`invoiceItems[${index}].exemptionReasonId`}\n                                rules={{ required: true }}\n                                render={({ field, ref }) => (\n                                  <Select\n                                    {...field}\n                                    inputRef={ref}\n                                    className={classnames('react-select mt-1', { 'is-invalid': errors.invoiceItems?.[index]?.taxGroupId })}\n                                    classNamePrefix='select'\n                                    options={exemptionReasonOptions}\n                                    value={exemptionReasonOptions.find(c => c.id === field.value)}\n                                    onChange={(val) => { field.onChange(val.id) }}\n                                    getOptionLabel={(option) => option.name}\n                                    getOptionValue={(option) => option.id}\n                                  />\n                                )}\n                              />\n                            }\n\n                          </Col>\n                          <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                            <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                            {control._formValues.invoiceItems[index].subTotalAmount}\n                          </Col>\n                        </Row>\n                        <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                          <X size={18} className='cursor-pointer' onClick={() => { removeItem(index) }} />\n                        </div>\n                      </Col>\n                    </Row>\n                  </div>\n                )\n              })}\n              <Row className='mt-1'>\n                <Col sm='12' className='px-0'>\n                  <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                    <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                  </Button>\n                </Col>\n              </Row>\n            </CardBody>\n          )}\n        </Card>\n        <Card>\n          <CardBody>\n            <div className='modal-footer border-0'>\n              <Button className='add-new-user' outline color='warning' tag={Link} to='/task/list'>\n                Cancel\n              </Button>\n              <Button color='primary' type=\"submit\" >\n                Save\n              </Button>\n            </div>\n          </CardBody>\n        </Card>\n      </form >\n    </UILoader>\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst TaskAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default TaskAdd\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","export const calculateTax = (amount, taxRateInPercentage, TaxType) => {\n    let calculatedTax = 0\n    if (TaxType === 1) { //Inclusive\n        calculatedTax = parseFloat(amount) - (parseFloat(amount) * (100 / (100 + parseFloat(taxRateInPercentage))))\n        // calculatedTax = parseFloat(amount) - parseFloat(calculatedTax);\n\n    } else if (TaxType === 2) { //Exclusive\n        calculatedTax = (parseFloat(amount) * parseFloat(taxRateInPercentage)) / 100\n    }\n    return parseFloat(calculatedTax)\n}\n\nexport const parser = (str) => {\n    \n    return JSON.parse(str.replace(/\\\\/g, ''))\n\n}"],"sourceRoot":""}