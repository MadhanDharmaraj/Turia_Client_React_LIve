{"version":3,"sources":["views/apps/organization/add/AddCard.js","views/apps/organization/add/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","assets/images/pages/create-account.svg"],"names":["ToastContent","t","name","className","size","color","icon","onClick","toast","dismiss","id","loggedUser","loggedInUser","Organization","dispatch","useDispatch","navigate","useNavigate","useState","businessEntityIdOptions","setBusinessEntityIdOptions","businessTypesOptions","setBusinessTypesOptions","stateOptions","setStateOptions","countryOptions","setCountryOptions","block","setBlock","Loader","OrganizationSchema","yup","shape","userId","default","required","businessEmail","email","contactNo","matches","message","excludeEmptyString","businessEntityId","businessTypeId","isGstRegistered","gstin","addressLine1","addressLine2","countryId","stateId","pinZipCode","city","useForm","defaultValues","cast","resolver","yupResolver","control","handleSubmit","errors","formState","setError","store","useSelector","state","organizationmain","onSubmit","data","createOrganization","createOrgUser","user","orgid","organizationId","userTypeId","usertypeid","createOrganizationUser","useEffect","axios","post","then","response","arr","businessentities","businesstypes","countries","states","console","log","registerSuccess","activeOrg","activeOrganization","localStorage","setItem","JSON","stringify","getHomeRouteForLoggedInUser","activeOrganizationId","organizationCreateError","Object","keys","map","obj","type","getRow","fieldLabel","fieldName","reqflag","sm","classnames","for","render","field","invalid","getSelectRow","options","ref","inputRef","classNamePrefix","value","find","c","onChange","val","getOptionLabel","option","getOptionValue","blocking","loader","tag","href","e","preventDefault","content","charAt","end","style","minWidth","Link","to","handleLogout","md","defaultChecked","AddCards","source","require","src","themeConfig","app","appLogoImage","alt","width","height","lg","AddCard","UILoader","props","children","overlayColor","Tag","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/79.b8bb493a.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\nimport Avatar from '@components/avatar'\nimport * as yup from 'yup'\nimport { handleLogout } from '@store/authentication'\nimport { useForm, Controller } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport Select from 'react-select'\nimport { Check, Coffee, Power, X } from 'react-feather'\nimport classnames from 'classnames'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { getHomeRouteForLoggedInUser } from '@utils'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nimport { createOrganization, createOrganizationUser } from '../store/index'\nimport toast from 'react-hot-toast'\nimport { Label, Input, Row, Col, Button, FormFeedback, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link, useNavigate } from 'react-router-dom'\nimport { loggedInUser } from '@src/helper/sassHelper.js'\nconst ToastContent = ({ t, name }) => {\n  return (\n    <div className='d-flex'>\n      <div className='me-1'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n      </div>\n      <div className='d-flex flex-column'>\n        <div className='d-flex justify-content-between'>\n          <h6>{name}</h6>\n          <X size={12} className='cursor-pointer' onClick={() => toast.dismiss(t.id)} />\n        </div>\n        <span>You have successfully logged in as an user to Turia. Now you can start to explore. Enjoy!</span>\n      </div>\n    </div>\n  )\n}\nconst loggedUser = loggedInUser()\nconst Organization = ({ }) => {\n\n  const dispatch = useDispatch()\n  const navigate = useNavigate({})\n  const [businessEntityIdOptions, setBusinessEntityIdOptions] = useState([])\n  const [businessTypesOptions, setBusinessTypesOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const pinzipcodeRegExp = /^[0-9\\- ]{6,6}$/\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const OrganizationSchema = yup.object().shape({\n    userId: yup.string().default(loggedUser.id),\n    name: yup.string().required('Please Enter Business Name'),\n    businessEmail: yup.string().email().required('Please Enter Business Email'),\n    contactNo: yup.string().required('Please Enter Contact Number').matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n    businessEntityId: yup.string().required('Please Select Business Entity'),\n    businessTypeId: yup.string().required('Please Select Business Type'),\n    isGstRegistered: yup.boolean(),\n    gstin: yup.string().required('Please Enter GSTIN'),\n    addressLine1: yup.string().required('Please Enter Address Line 1'),\n    addressLine2: yup.string().required('Please Enter Area, Street, Sector, Village'),\n    countryId: yup.string().required('Please Select CountryId'),\n    stateId: yup.string().required('Please Select State'),\n    pinZipCode: yup.string().required('Please Enter Postal Code').matches(pinzipcodeRegExp, { message: 'Postal Code is not valid', excludeEmptyString: true }),\n    city: yup.string().required('Please Enter City')\n  })\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors }, setError\n  } = useForm({\n    defaultValues: OrganizationSchema.cast(),\n    resolver: yupResolver(OrganizationSchema)\n  })\n\n  const store = useSelector(state => state.organizationmain)\n\n  const onSubmit = async data => {\n    data.userId = loggedUser.id\n    await dispatch(createOrganization(data))\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityIdOptions(arr.businessentities)\n    })\n  }\n\n  const getBusineessTypes = () => {\n    axios.post('/businesstypes/dropdown').then(response => {\n      const arr = response.data\n      setBusinessTypesOptions(arr.businesstypes)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/list').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const createOrgUser = async (user, orgid) => {\n    const data = {\n      userId: user.id,\n      name: user.name,\n      organizationId: orgid,\n      email: user.email,\n      userTypeId: user.usertypeid\n    }\n    setBlock(true)\n    await dispatch(createOrganizationUser(data))\n    setBlock(false)\n  }\n\n  useEffect(async () => {\n\n    getBusineessEntity()\n    getBusineessTypes()\n    getCountries()\n    getStates()\n    console.log(loggedUser.id)\n  }, [])\n\n  useEffect(async () => {\n\n    if (store.registerSuccess) {\n      setBlock(true)\n      const activeOrg = store.activeOrganization\n      localStorage.setItem('activeOrganization', JSON.stringify(activeOrg))\n      navigate(getHomeRouteForLoggedInUser('admin'))\n    }\n  }, [store.registerSuccess])\n\n  useEffect(() => {\n\n    if (store.activeOrganizationId !== null) {\n      const user = loggedUser\n      const orgid = store.activeOrganizationId\n      createOrgUser(user, orgid)\n      toast(t => (\n        <ToastContent t={t} name={user.name} />\n      ))\n    }\n\n  }, [store.activeOrganizationId])\n\n  useEffect(async () => {\n\n    if (store.organizationCreateError !== null) {\n      Object.keys(store.organizationCreateError).map((obj) => {\n        setError(obj, { type: 'custom', message: store.organizationCreateError[obj][0] })\n      })\n    }\n  }, [store.organizationCreateError])\n\n\n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='12' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='12'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='12' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName} >\n          {fieldLabel}\n        </Label>\n        <Col sm='12'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => { return field.onChange(val.id) }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n\n  return (\n    <Fragment>\n      <UILoader blocking={block} loader={<Loader />}>\n        <div className='content-header mb-2 d-flex'>\n          <Col>\n            <h2 className='fw-bolder mb-75'>Organization Information</h2>\n            <span>Enter Your Organization Details.</span>\n          </Col>\n          <Col>\n            <UncontrolledDropdown tag='li' className='dropdown-user nav-item'>\n              <DropdownToggle href='/' tag='a' className='nav-link dropdown-user-link' onClick={e => e.preventDefault()}>\n                <Avatar content={loggedUser['name'].charAt(0)} className='me-50' color='light-primary' />\n              </DropdownToggle>\n              <DropdownMenu end style={{ minWidth: '26rem' }}>\n                <DropdownItem tag={Link} to='/login' onClick={() => dispatch(handleLogout())}>\n                  <Power size={14} className='me-75' />\n                  <span className='align-middle'>Logout</span>\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown >\n          </Col>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <Row>\n            <Col md='6' >\n              {getRow('Business Name', 'name', true)}\n            </Col>\n            <Col md='6' >\n              {getRow('Business E-mail', 'businessEmail', true)}\n            </Col>\n            <Col md='6' >\n              {getRow('Conatct No', 'contactNo', true)}\n            </Col>\n            <Col md='6'>\n              {getSelectRow('Business Type', 'businessTypeId', businessEntityIdOptions, true)}\n            </Col>\n            <Col md='6'>\n              {getSelectRow('Business Entity', 'businessEntityId', businessTypesOptions, true)}\n            </Col>\n            <Col md='6'>\n              <Label className='form-label' for='pincode'>\n                Is GST Registered?\n              </Label>\n              <div className='form-switch form-check-success'>\n                <Input type='switch' id='switch-success' name='isGstRegistered' defaultChecked />\n              </div>\n            </Col>\n            <Col md='6'>\n              {getRow('GSTIN', 'gstin', true)}\n            </Col>\n            <Col sm='12' >\n              {getRow('Address', 'addressLine1', true)}\n            </Col>\n            <Col sm={12}>\n              {getRow('Area, Street, Sector, Village', 'addressLine2', true)}\n            </Col>\n            <Col md='6'>\n              {getSelectRow('State', 'stateId', stateOptions, true)}\n            </Col>\n            <Col md='6'>\n              {getRow('Postal Code', 'pinZipCode', true)}\n            </Col>\n            <Col md='6'>\n              {getRow('Town/City', 'city', true)}\n            </Col>\n            <Col md='6'>\n              {getSelectRow('Country', 'countryId', countryOptions, true)}\n            </Col>\n          </Row>\n          <div className='d-flex justify-content-between mt-2'>\n            <Button type='submit' color='success' className='btn-next'>\n              <span className='align-middle d-sm-inline-block d-none'>Submit</span>\n              <Check size={14} className='align-middle ms-sm-25 ms-0'></Check>\n            </Button>\n          </div>\n        </form>\n      </UILoader>\n    </Fragment>\n  )\n}\n\nexport default Organization\n","\n// ** React Imports\nimport AddCard from './AddCard'\nimport { Link } from 'react-router-dom'\nimport themeConfig from '@src/configs/themeConfig'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n// ** Styles\nimport '@styles/react/pages/page-authentication.scss'\n\nconst AddCards = () => {\n\n  const source = require('@src/assets/images/pages/create-account.svg').default\n\n  return (\n    <div className='auth-wrapper auth-cover'>\n\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/'>\n          <img src={themeConfig.app.appLogoImage} alt={'Turia Logo'} width={45} height={35} />\n          <h1 className='brand-text text-primary'>Turia</h1>\n        </Link>\n        <Col lg='3' className='d-none d-lg-flex align-items-center p-0'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center'>\n            <img className='img-fluid w-100' src={source} alt='Login Cover' />\n          </div>\n        </Col>\n        <Col lg='9' className='d-flex align-items-center auth-bg px-2 px-sm-3 px-lg-5 pt-3'>\n          <div className='width-700 mx-auto'>\n            <AddCard />\n          </div>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default AddCards","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","export default __webpack_public_path__ + \"static/media/create-account.9a7744ba.svg\";"],"sourceRoot":""}