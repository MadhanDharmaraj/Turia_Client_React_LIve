{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getControllerValue.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/logic/shouldSubscribeByName.ts","../../src/useSubscribe.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFocusFieldName.ts","../../src/logic/mapCurrentIds.ts","../../src/logic/generateId.ts","../../src/logic/mapId.ts","../../src/utils/append.ts","../../src/utils/fillEmptyArray.ts","../../src/utils/insert.ts","../../src/utils/move.ts","../../src/utils/prepend.ts","../../src/utils/remove.ts","../../src/utils/swap.ts","../../src/utils/update.ts","../../src/useFieldArray.ts","../../src/utils/omitKeys.ts","../../src/utils/isFunction.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","source","copy","HookFormContext","useFormContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","signalName","convertToArrayPayload","currentName","startsWith","tearDown","_unsubscribe","unsubscribe","updateSubscriptionProps","props","disabled","subject","subscribe","next","callback","useSubscribe","_updateSubscription","skipEarlySubscription","useController","methods","control","shouldUnregister","_formValues","_defaultValues","setInputStateValue","_formState","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","useFormState","values","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","isNameInFieldArray","_names","array","_stateFlags","action","unregister","getControllerValue","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","_fieldIds","keyName","map","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","slice","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","fieldValues","useFieldArray","mapIds","_getFieldArray","setFields","_actioned","add","fieldArrayName","updateValues","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","watchAll","watch","watchField","_executeSchema","then","_updateValid","swap","mapCurrentIds","swapArrayAt","_updateFieldArray","argA","argB","move","moveArrayAt","prependAt","fillEmptyArray","getFocusFieldName","appendValue","appendAt","remove","removeArrayAt","insertAt","update","updateAt","cloneObject","Set","isFunction","createSubject","_observers","observers","observer","subscription","tearDowns","push","teardown","createSubscription","subscriber","closed","createSubscriber","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","schemaErrorLookup","fieldName","join","foundError","pop","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","isBlurEvent","isSubmitted","reValidateMode","isString","RegExp","getValidateError","isMessage","validationData","isRegex","inputValue","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","useForm","_formControl","submitCount","isSubmitting","isSubmitSuccessful","delayErrorCallback","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","has","shouldSkipRender","resolver","executeBuildInValidation","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","updateFieldArrayDirty","setFieldArrayDirtyFields","unsetEmptyArray","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","getValues","_getWatch","isGlobal","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","handleChange","shouldSkipValidation","hasValidation","deps","skipValidation","isWatched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","live","_removeUnmounted","method","shouldSetValues","shouldSetFields","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","info","setValue","isFieldArray","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","clearErrors","inputName","setError","setFocus","createFormControl"],"mappings":"oaAEA,EAAe,SAACA,GAAD,MACI,aAAjBA,EAAQC,IADK,ECFf,EAAe,SAACC,GAAD,OAAmBA,aAAgBC,IAAnC,ECAf,EAAe,SAACC,GAAD,OAAwD,MAATA,CAA/C,ECGFC,EAAe,SAACD,GAAD,MAAqC,kBAAVA,CAA3B,EAE5B,EAAe,SAAmBA,GAAnB,OACZE,EAAkBF,KAClBG,MAAMC,QAAQJ,IACfC,EAAaD,KACZK,EAAaL,EAJD,ECAf,EAAe,SAACM,GAAD,OACbC,EAASD,IAAWA,EAAgBE,OAChCC,EAAiBH,EAAgBE,QAC9BF,EAAgBE,OAAOE,QACvBJ,EAAgBE,OAAOR,MAC1BM,CALS,ECDf,EAAe,SAACK,EAA+BC,GAAhC,OACb,YAAID,GAAOE,MAAK,SAACC,GAAD,OCLH,SAACF,GAAD,OAAkBA,EAAKG,UAAU,EAAGH,EAAKI,OAAO,SAAWJ,CAA3D,CDKgBK,CAAkBL,KAAUE,CAAzC,GADH,EEJf,EAAe,SAACd,GAAD,OAAkBA,EAAMkB,OAAOC,QAA/B,ECAf,EAAe,SAACC,GAAD,YAA4CC,IAARD,CAApC,ECKf,EAAe,SAAIE,EAAQC,EAAcC,GACvC,GAAIjB,EAASe,IAAQC,EAAM,CACzB,IAAME,EAASC,EAAQH,EAAKI,MAAM,cAAcC,QAC9C,SAACH,EAAQI,GAAT,OAAkB3B,EAAkBuB,GAAUA,EAASA,EAAOI,EAA9D,GACAP,GAGF,OAAOQ,EAAYL,IAAWA,IAAWH,EACrCQ,EAAYR,EAAIC,IACdC,EACAF,EAAIC,GACNE,CACL,CAGF,EClBYM,EAAS,CACpBC,KAAM,OACNC,OAAQ,UAGGC,EAAkC,CAC7CC,OAAQ,SACRC,SAAU,WACVC,SAAU,WACVC,UAAW,YACXC,IAAK,OAGMC,EAAyB,CACpCC,IAAK,MACLC,IAAK,MACLC,UAAW,YACXC,UAAW,YACXC,QAAS,UACTC,SAAU,WACVC,SAAU,YCtBZ,EAAe,SACbC,EACAnB,GAEA,IAAMoB,EAAO,OAAH,UAAQD,GAGlB,cAFOC,EAAKpB,GAELoB,CACR,ECHKC,EAAkB,gBAA0C,MAErDC,EAAiB,kBAG5B,aAAiBD,EAHW,ECJ9B,EAAe,SACbE,EACAC,EACAC,GACa,IAAbC,IAAa,yDAEb,SAASC,EAAaC,GACpB,OAAO,WACL,GAAIA,KAAQL,EAKV,OAJIC,EAAgBI,KAAUvB,EAAgBK,MAC5Cc,EAAgBI,IAASF,GAAUrB,EAAgBK,KAErDe,IAAwBA,EAAoBG,IAAQ,GAC7CL,EAAUK,EAGpB,CACF,CAED,IAAMhC,EAAS,CAAC,EAChB,IAAK,IAAMI,KAAOuB,EAChBM,OAAOC,eAAelC,EAAQI,EAAK,CACjC+B,IAAKJ,EAAa3B,KAItB,OAAOJ,CACR,EC1BD,EAAe,SAACzB,GAAD,OACbO,EAASP,KAAW0D,OAAOG,KAAK7D,GAAO8D,MAD1B,ECCf,EAAe,SACbC,EACAV,EACAE,GAEA,IAAMH,EAAYY,EAAKD,EAAe,QAEtC,OACEE,EAAcb,IACdM,OAAOG,KAAKT,GAAWU,QAAUJ,OAAOG,KAAKR,GAAiBS,QAC9DJ,OAAOG,KAAKT,GAAWc,MACrB,SAACrC,GAAD,OACEwB,EAAgBxB,OACd0B,GAAUrB,EAAgBK,IAF9B,GAKL,ECrBD,EAAe,SAAIvC,GAAJ,OAAkBG,MAAMC,QAAQJ,GAASA,EAAQ,CAACA,EAAlD,ECEf,EAAe,SAAIY,EAAUuD,GAAd,OACZvD,IACAuD,GACDC,EAAsBxD,GAAMC,MAC1B,SAACwD,GAAD,OACEA,IACCA,EAAYC,WAAWH,IACtBA,EAAWG,WAAWD,GAH1B,GAJW,ECiBTE,EAAW,SACfC,GAEIA,EAAa1D,UACf0D,EAAa1D,QAAQ2D,cACrBD,EAAa1D,aAAUO,EAE1B,EAEKqD,EACJ,gBAAMF,EAAN,EAAMA,aAAcG,EAApB,EAAoBA,MAApB,OACA,WACMA,EAAMC,SACRL,EAASC,GACCA,EAAa1D,UACvB0D,EAAa1D,QAAU6D,EAAME,QAAQC,UAAU,CAC7CC,KAAMJ,EAAMK,WAGjB,CATD,E,SAWcC,EAAgBN,GAC9B,IAAMH,EAAe,WACfU,EAAsB,UAAmB,WAAQ,IAEvDA,EAAoBpE,QAAU4D,EAAwB,CACpDF,eACAG,WAGDA,EAAMQ,uBAAyBD,EAAoBpE,UAEpD,aAAgB,WAEd,OADAoE,EAAoBpE,UACb,kBAAMyD,EAASC,EAAf,CACR,GAAE,GACL,C,SCrCgBY,EAIdT,GAEA,IAAMU,EAAUlC,IACRvC,EAAsD+D,EAAtD/D,KAAR,EAA8D+D,EAAhDW,eAAd,MAAwBD,EAAQC,QAAhC,EAAyCC,EAAqBZ,EAArBY,iBACzC,EAAoC,WAClC3B,EACE0B,EAAQE,YACR5E,EACAgD,EAAI0B,EAAQG,eAAgB7E,EAAM+D,EAAMnD,gBAJ5C,mBAAOxB,EAAP,KAAc0F,EAAd,KAOMtC,ECxBR,SACEuB,GAEA,IAAMU,EAAUlC,IAChB,EAAsDwB,GAAS,CAAC,EAAhE,IAAQW,eAAR,MAAkBD,EAAQC,QAA1B,EAAmCV,EAAnC,EAAmCA,SAAUhE,EAA7C,EAA6CA,KAC7C,EAAqC,WAAe0E,EAAQK,YAA5D,mBAAOvC,EAAP,KAAkBwC,EAAlB,KACMC,EAAuB,SAAa,CACxCC,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,SAAS,EACTC,QAAQ,IAEJC,EAAQ,SAAaxF,GAiB3B,OAfAwF,EAAMtF,QAAUF,EAEhBqE,EAAa,CACXL,WACAI,SAAU,SAAC5B,GAAD,OACRiD,EAAsBD,EAAMtF,QAASsC,EAAUxC,OAC/C0F,EAAsBlD,EAAWyC,EAAqB/E,UACtD8E,EAAgB,OAAD,wBACVN,EAAQK,YACRvC,GALG,EAOVyB,QAASS,EAAQiB,UAAUC,MAC3BrB,uBAAuB,IAGlBsB,EACLrD,EACAkC,EAAQjC,gBACRwC,EAAqB/E,SACrB,EAEJ,CDboB4F,CAAa,CAC7BpB,QAASA,GAAWD,EAAQC,QAC5B1E,SAEIwF,EAAQ,SAAaxF,GAE3BwF,EAAMtF,QAAUF,EAEhBqE,EAAa,CACXJ,QAASS,EAAQiB,UAAUjB,QAC3BN,SAAU,SAAClF,GAAD,QACNA,EAAKc,MAAQwF,EAAMtF,UAAYhB,EAAKc,OACtC8E,EAAmB9B,EAAI9D,EAAK6G,OAAQP,EAAMtF,SAFlC,EAGVqE,uBAAuB,IAGzB,IAAMyB,EAAgBtB,EAAQuB,SAASjG,EAAI,+BACtC+D,EAAMmC,OAAK,CACd9G,WAGI+G,EAAgB,eACpB,SAACnG,EAAyBZ,GACxB,IAAMgH,EAAepD,EAAI0B,EAAQ2B,QAASrG,GAEtCoG,IACFA,EAAME,GAAGC,MAAQnH,EAEpB,GACD,CAACsF,IAsBH,OAnBA,aAAgB,WAGd,OAFAyB,EAAcnG,GAAM,GAEb,WACL,IAAMwG,EACJ9B,EAAQ+B,SAAS9B,kBAAoBA,GAGrC+B,EAAmBhC,EAAQiC,OAAOC,MAAO5G,GACrCwG,IAA2B9B,EAAQmC,YAAYC,OAC/CN,GAEJ9B,EAAQqC,WAAW/G,GAEnBmG,EAAcnG,GAAM,EAEvB,CACF,GAAE,CAACA,EAAM0E,EAASC,EAAkBwB,IAE9B,CACLC,MAAO,CACL5E,SAAU,SAAC9B,GACT,IAAMN,EAAQ4H,EAAmBtH,GACjCoF,EAAmB1F,GAEnB4G,EAAcxE,SAAS,CACrB5B,OAAQ,CACNR,QACAY,KAAMA,GAERf,KAAMkC,EAAOE,QAEhB,EACDE,OAAQ,WACNyE,EAAczE,OAAO,CACnB3B,OAAQ,CACNR,QACAY,KAAMA,GAERf,KAAMkC,EAAOC,MAEhB,EACDpB,OACAZ,QACA6H,IAAK,SAACC,GACJ,IAAMd,EAAQpD,EAAI0B,EAAQ2B,QAASrG,GAE/BkH,GAAOd,GAASc,EAAIC,QACtBf,EAAME,GAAGW,IAAM,CACbE,MAAO,kBAAMD,EAAIC,OAAV,EACPC,kBAAmB,SAACC,GAAD,OACjBH,EAAIE,kBAAkBC,EADL,EAEnBC,eAAgB,kBAAMJ,EAAII,gBAAV,GAGrB,GAEH9E,YACA+E,WAAY,CACVC,UAAWxE,EAAIR,EAAU+C,OAAQvF,GACjCkF,UAAWlC,EAAIR,EAAU2C,YAAanF,GACtCyH,YAAazE,EAAIR,EAAU4C,cAAepF,GAC1C0H,MAAO1E,EAAIR,EAAU+C,OAAQvF,IAGnC,C,IE/HM2H,EAAa,SAIjB5D,GAJiB,OAKdA,EAAM6D,OAAOpD,EAAmCT,GALlC,ECGnB,EAAe,SACb/D,EACA6H,EACAtC,EACAtG,EACAoI,GALa,OAObQ,E,+BAEStC,EAAOvF,IAAK,CACf8H,MAAO,OAAF,wBACCvC,EAAOvF,IAASuF,EAAOvF,GAAO8H,MAAQvC,EAAOvF,GAAO8H,MAAQ,CAAC,GAD9D,eAEF7I,EAAOoI,IAAW,MAGvB,CAAC,CAfQ,ECNf,EAAe,SAACjI,GAAD,MAAmB,QAAQ2I,KAAK3I,EAAhC,ECEf,EAAe,SAAC4I,GAAD,OACblH,EAAQkH,EAAMC,QAAQ,YAAa,IAAIlH,MAAM,SADhC,E,SCISmH,EACtBC,EACAxH,EACAvB,GAOA,IALA,IAAIgJ,GAAS,EACPC,EAAWC,EAAM3H,GAAQ,CAACA,GAAQ4H,EAAa5H,GAC/CuC,EAASmF,EAASnF,OAClBsF,EAAYtF,EAAS,IAElBkF,EAAQlF,GAAQ,CACvB,IAAMjC,EAAMoH,EAASD,GACjBK,EAAWrJ,EAEf,GAAIgJ,IAAUI,EAAW,CACvB,IAAME,EAAWP,EAAOlH,GACxBwH,EACE9I,EAAS+I,IAAanJ,MAAMC,QAAQkJ,GAChCA,EACCC,OAAON,EAASD,EAAQ,IAEzB,CAAC,EADD,EAEP,CACDD,EAAOlH,GAAOwH,EACdN,EAASA,EAAOlH,EACjB,CACD,OAAOkH,CACT,CC3BA,IAAMS,EAAe,SAAfA,EACJC,EACAzE,EACA0E,GAA0D,oBAExCA,GAAehG,OAAOG,KAAK4F,IAFa,IAE1D,IAAK,EAAL,qBAAsD,KAA3C5H,EAA2C,QAC9CmF,EAAQpD,EAAI6F,EAAQ5H,GAE1B,GAAImF,EAAO,CACT,IAAME,EAAKF,EAAME,GACXpG,EAAUkD,EAAKgD,EAAO,MAE5B,GAAIE,GAAMlC,EAASkC,EAAGtG,MAAO,CAC3B,GAAIsG,EAAGW,IAAIE,OAASjG,EAAYoF,EAAGW,IAAIE,SACrC,MACK,GAAIb,EAAGyC,KAAM,CAClBzC,EAAGyC,KAAK,GAAG5B,QACX,KACD,CACF,MAAUxH,EAASO,IAClB0I,EAAa1I,EAASkE,EAEzB,CACF,CApByD,+BAqB3D,EC3BD,EAAe,SACbpE,EACAoI,GAFa,IAGbY,EAHa,uDAGoB,CAAC,EAHrB,OAKbA,EAAQC,aAAe/H,EAAY8H,EAAQC,aACvCD,EAAQE,WAAR,UACGlJ,EADH,YACWkB,EAAY8H,EAAQG,YAAcf,EAAQY,EAAQG,WAD7D,KAEA,EARS,ECCf,EAAe,SACbpD,EACAqD,EACAC,GAHa,OAKbtD,EAAOuD,KAAI,SAAClK,EAAOgJ,GACjB,IAAMmB,EAASH,EAAUlJ,QAAQkI,GAEjC,OAAO,OAAP,wBACKhJ,GACCmK,EAAS,eAAGF,EAAWE,EAAuBF,IAAa,CAAC,EAEnE,GAZY,ECJf,EAAe,WACb,IAAMG,EACmB,qBAAhBC,YAA8BtK,KAAKuK,MAA4B,IAApBD,YAAYC,MAEhE,MAAO,uCAAuCzB,QAAQ,SAAS,SAAC0B,GAC9D,IAAMC,GAAqB,GAAhBC,KAAKC,SAAgBN,GAAK,GAAK,EAE1C,OAAa,KAALG,EAAWC,EAAS,EAAJA,EAAW,GAAKG,SAAS,GAClD,GACF,ECLD,EAAe,eAMbV,EANa,qGAK0B,IAGhCC,KAAI,SAAClK,GAAD,OAAkC,+BACvCA,EAAMiK,GAAW,CAAC,EAAlB,eAAyBA,EAAUW,MACpC5K,EAFM,GARE,E,SCFS6K,EAAU/K,EAAWE,GAC3C,MAAO,GAAP,mBAAWoE,EAAsBtE,IAAjC,YAA2CsE,EAAsBpE,IACnE,CCJA,MAAe,SAAIA,GAAJ,OACbG,MAAMC,QAAQJ,GAASA,EAAMkK,KAAI,oBAAmB7I,CADvC,E,SCQSyJ,EACtBhL,EACAkJ,EACAhJ,GAEA,MAAO,GAAP,mBACKF,EAAKiL,MAAM,EAAG/B,IADnB,YAEK5E,EAAsBpE,IAF3B,YAGKF,EAAKiL,MAAM/B,IAElB,CChBA,MAAe,SACblJ,EACAkL,EACAC,GAEA,OAAI9K,MAAMC,QAAQN,IACZgC,EAAYhC,EAAKmL,MACnBnL,EAAKmL,QAAM5J,GAEbvB,EAAKoL,OAAOD,EAAI,EAAGnL,EAAKoL,OAAOF,EAAM,GAAG,IACjClL,GAGF,EACR,E,SCduBqL,EAAWrL,EAAWE,GAC5C,MAAO,GAAP,mBAAWoE,EAAsBpE,IAAjC,YAA4CoE,EAAsBtE,IACpE,CCYA,MAAe,SAAIA,EAAWkJ,GAAf,OACblH,EAAYkH,GACR,GDdN,SCA4BlJ,EAAWsL,GACrC,IADsD,EAClDC,EAAI,EACFC,EAAO,YAAIxL,GAFqC,cAIlCsL,GAJkC,IAItD,IAAK,EAAL,qBAA6B,KAAlBpC,EAAkB,QAC3BsC,EAAKJ,OAAOlC,EAAQqC,EAAG,GACvBA,GACD,CAPqD,+BAStD,OAAO3J,EAAQ4J,GAAMxH,OAASwH,EAAO,EACtC,CAKKC,CACEzL,EACCsE,EAAsB4E,GAAoBwC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,CAAd,IALzC,EChBf,EAAe,SAAI5L,EAAW6L,EAAgBC,GAC5C9L,EAAK6L,GAAU,CAAC7L,EAAK8L,GAAU9L,EAAK8L,GAAU9L,EAAK6L,IAAU,EAC9D,ECFD,EAAe,SAAIE,EAAkB7C,EAAehJ,GAElD,OADA6L,EAAY7C,GAAShJ,EACd6L,CACR,EC6BYC,GAAgB,SAK3BnH,GAEA,IAAMU,EAAUlC,IAChB,EAKIwB,EAJFW,eADF,MACYD,EAAQC,QADpB,EAEE1E,EAGE+D,EAHF/D,KAFF,EAKI+D,EAFFsF,eAHF,MAGY,KAHZ,EAIE1E,EACEZ,EADFY,iBAEF,EAA4B,WAE1BwG,EAAOzG,EAAQ0G,eAAepL,GAAOqJ,IAFvC,mBAAOR,EAAP,KAAewC,EAAf,KAGMjC,EAAY,SAAaP,GACzBrD,EAAQ,SAAaxF,GACrBsL,EAAY,UAAa,GAE/B9F,EAAMtF,QAAUF,EAChBoJ,EAAUlJ,QAAU2I,EACpBnE,EAAQiC,OAAOC,MAAM2E,IAAIvL,GAEzBqE,EAAa,CACXD,SAAU,YAAiC,IAA9B2B,EAA8B,EAA9BA,OAAcyF,EAAgB,EAAtBxL,KACfwL,IAAmBhG,EAAMtF,SAAYsL,GACvCH,EAAUF,EAAOnI,EAAI+C,EAAQP,EAAMtF,SAAUmJ,GAEhD,EACDpF,QAASS,EAAQiB,UAAUiB,MAC3BrC,uBAAuB,IAGzB,IAAMkH,EAAe,eACnB,SAKEC,GAEA,IAAMC,ECvEG,SACb9C,EACAQ,GAFa,OAGVR,EAAOS,KAAI,kBAAgBlG,EAAhB,uDAAS,CAAC,EAAkBiG,EAA5B,GAHD,CDuEuBuC,CAC9BF,EACArC,GAKF,OAHAiC,EAAUpL,SAAU,EACpBgI,EAAIxD,EAAQE,YAAa5E,EAAM2L,GAC/BN,EAAUK,GACHC,CACR,GACD,CAACjH,EAAS1E,EAAMqJ,IAsOlB,OApDA,aAAgB,WAGd,GAFA3E,EAAQmC,YAAYC,QAAS,EAEzBpC,EAAQiC,OAAOkF,SACjBnH,EAAQiB,UAAUC,MAAMzB,KAAK,CAAC,OACzB,qBACoBO,EAAQiC,OAAOmF,OADnC,IACL,IAAK,EAAL,qBAA+C,KAApCC,EAAoC,QAC7C,GAAI/L,EAAK0D,WAAWqI,GAAa,CAC/BrH,EAAQiB,UAAUC,MAAMzB,KAAK,CAAC,GAC9B,KACD,CACF,CANI,+BAON,CAEGmH,EAAUpL,SACZwE,EAAQsH,eAAe,CAAChM,IAAOiM,MAAK,SAACpL,GACnC,IAAM6G,EAAQ1E,EAAInC,EAAO0E,OAAQvF,GAE7B0H,GAASA,EAAMzI,OAAS+D,EAAI0B,EAAQK,WAAWQ,OAAQvF,KACzDkI,EAAIxD,EAAQK,WAAWQ,OAAQvF,EAAM0H,GACrChD,EAAQiB,UAAUC,MAAMzB,KAAK,CAC3BoB,OAAQb,EAAQK,WAAWQ,SAGhC,IAGHb,EAAQiB,UAAUmG,MAAM3H,KAAK,CAC3BnE,OACA+F,OAAQrB,EAAQE,cAGlBF,EAAQiC,OAAOQ,OACbyB,EAAalE,EAAQ2B,SAAS,SAACpF,GAAD,OAC5BA,EAAIyC,WAAWgB,EAAQiC,OAAOQ,MADF,IAIhCzC,EAAQiC,OAAOQ,MAAQ,GAEvBzC,EAAQjC,gBAAgB6C,SAAWZ,EAAQwH,cAC5C,GAAE,CAACrD,EAAQ7I,EAAM0E,EAAS2E,IAE3B,aAAgB,WAGd,OAFCrG,EAAI0B,EAAQE,YAAa5E,IAASkI,EAAIxD,EAAQE,YAAa5E,EAAM,IAE3D,YACD0E,EAAQ+B,SAAS9B,kBAAoBA,IACvCD,EAAQqC,WAAW/G,EAEtB,CACF,GAAE,CAACA,EAAM0E,EAAS2E,EAAS1E,IAErB,CACLwH,KAAM,eAzIK,SAACpB,EAAgBC,GAC5B,IAAMU,EAAiCU,EACrC1H,EAAQ0G,eAAepL,GACvBoJ,EACAC,GAEFgD,EAAYX,EAAgCX,EAAQC,GACpDtG,EAAQ4H,kBACNtM,EACAqM,EACA,CACEE,KAAMxB,EACNyB,KAAMxB,GAERS,EAAaC,IACb,EAEH,GAwH+B,CAACD,EAAczL,EAAM0E,EAAS2E,IAC5DoD,KAAM,eAvHK,SAACrC,EAAcC,GAC1B,IAAMqB,EAAiCU,EACrC1H,EAAQ0G,eAAepL,GACvBoJ,EACAC,GAEFqD,EAAYhB,EAAgCtB,EAAMC,GAClD3F,EAAQ4H,kBACNtM,EACA0M,EACA,CACEH,KAAMnC,EACNoC,KAAMnC,GAERoB,EAAaC,IACb,EAEH,GAsG+B,CAACD,EAAczL,EAAM0E,EAAS2E,IAC5DkB,QAAS,eA3MK,SACdnL,EAGA4J,GAEA,IAAM0C,EAAiCiB,EACrCP,EAAc1H,EAAQ0G,eAAepL,GAAOoJ,EAAWC,GACvD8B,EAAO3H,EAAsBpE,GAAQiK,IAEvC3E,EAAQ4H,kBACNtM,EACA2M,EACA,CACEJ,KAAMK,EAAexN,IAEvBqM,EAAaC,IAGfhH,EAAQiC,OAAOQ,MAAQ0F,EAAkB7M,EAAM,EAAGgJ,EACnD,GAuLqC,CAACyC,EAAczL,EAAM0E,EAAS2E,IAClEY,OAAQ,eAvOK,SACb7K,EAGA4J,GAEA,IAAM8D,EAActJ,EAAsBpE,GACpCsM,EAAiCqB,EACrCX,EAAc1H,EAAQ0G,eAAepL,GAAOoJ,EAAWC,GACvD8B,EAAO2B,EAAazD,IAEtB3E,EAAQ4H,kBACNtM,EACA+M,EACA,CACER,KAAMK,EAAexN,IAEvBqM,EAAaC,IAGfhH,EAAQiC,OAAOQ,MAAQ0F,EACrB7M,EACA0L,EAA+BxI,OAAS4J,EAAY5J,OACpD8F,EAEH,GA8MmC,CAACyC,EAAczL,EAAM0E,EAAS2E,IAChE2D,OAAQ,eAvLK,SAAC5E,GACd,IAAMsD,EAEAuB,EACJb,EAAc1H,EAAQ0G,eAAepL,GAAOoJ,EAAWC,GACvDjB,GAEF1D,EAAQ4H,kBACNtM,EACAiN,EACA,CACEV,KAAMnE,GAERqD,EAAaC,GAEhB,GAwKmC,CAACD,EAAczL,EAAM0E,EAAS2E,IAChEa,OAAQ,eAvKK,SACb9B,EACAhJ,EAGA4J,GAEA,IAAM0C,EAAiCwB,EACrCd,EAAc1H,EAAQ0G,eAAepL,GAAOoJ,EAAWC,GACvDjB,EACA+C,EAAO3H,EAAsBpE,GAAQiK,IAEvC3E,EAAQ4H,kBACNtM,EACAkN,EACA,CACEX,KAAMnE,EACNoE,KAAMI,EAAexN,IAEvBqM,EAAaC,IAGfhH,EAAQiC,OAAOQ,MAAQ0F,EAAkB7M,EAAMoI,EAAOY,EACvD,GAgJmC,CAACyC,EAAczL,EAAM0E,EAAS2E,IAChE8D,OAAQ,eAzGK,SACb/E,EACAhJ,GAEA,IAAMsM,EAAiCU,EACrC1H,EAAQ0G,eAAepL,GACvBoJ,EACAC,GAEIsC,EAA0ByB,EAC9B1B,EACAtD,EACAhJ,GAEFgK,EAAUlJ,QAAUiL,EAAOQ,EAAyBtC,GACpD3E,EAAQ4H,kBACNtM,EACAoN,EACA,CACEb,KAAMnE,EACNoE,KAAMpN,GAERqM,EAAarC,EAAUlJ,UACvB,GACA,EAEH,GA+EmC,CAACuL,EAAczL,EAAM0E,EAAS2E,IAChEpB,QAAS,eA9EK,SACd7I,GAIA,IAAMsM,EAEAP,EAAO3H,EAAsBpE,GAAQiK,GAC3C3E,EAAQ4H,kBACNtM,GACA,kBAAM0L,CAAN,GACA,CAAC,EACDD,EAAaC,IACb,GACA,EAEH,GA8DqC,CAACD,EAAczL,EAAM0E,EAAS2E,IAClER,OAAQA,EAMZ,EEzUA,GAAe,SAACzJ,GAAD,MACI,oBAAVA,CADM,E,SCGSiO,GAAenO,GACrC,IAAImD,EACE7C,EAAUD,MAAMC,QAAQN,GAE9B,GAAIA,aAAgBC,KAClBkD,EAAO,IAAIlD,KAAKD,QACX,GAAIA,aAAgBoO,IACzBjL,EAAO,IAAIiL,IAAIpO,OACV,KAAIM,IAAWG,EAAST,GAU7B,OAAOA,EARP,IAAK,IAAM+B,KADXoB,EAAO7C,EAAU,GAAK,CAAC,EACLN,EAAM,CACtB,GAAIqO,GAAWrO,EAAK+B,IAAO,CACzBoB,EAAOnD,EACP,KACD,CACDmD,EAAKpB,GAAOoM,GAAYnO,EAAK+B,GAC9B,CAGF,CAED,OAAOoB,CACT,C,SCmCwBmL,KACtB,IAAIC,EAA4B,GAmBhC,MAAO,CACDC,gBACF,OAAOD,CACR,EACDtJ,KArBW,SAAC/E,GAAQ,oBACGqO,GADH,IACpB,IAAK,EAAL,qBAAmC,SACxBtJ,KAAK/E,EACf,CAHmB,+BAIrB,EAkBC8E,UAhBgB,SAACyJ,GACjB,IAAMC,EAhDV,WACE,IAAIC,EAAwB,GAa5B,MAAO,CACLtC,IAZU,SAAC5H,GACXkK,EAAUC,KAAKnK,EAChB,EAWCE,YATkB,+BACKgK,GADL,IAClB,IAAK,EAAL,sBACEE,EADgC,UADhB,+BAIlBF,EAAY,EACb,EAMF,CA8BwBG,GACfC,EA7BV,SACEN,EACAC,GAEA,IAAIM,GAAS,EASb,OARAN,EAAarC,KAAI,kBAAO2C,GAAS,CAAhB,IAQV,CACL/J,KAPW,SAAC/E,GACP8O,GACHP,EAASxJ,KAAK/E,EAEjB,EAKF,CAasB+O,CAAiBR,EAAUC,GAE9C,OADAH,EAAWK,KAAKG,GACTL,CACR,EAYC/J,YAVkB,WAClB4J,EAAa,EACd,EAUH,CCnFA,OAAe,SAACrO,GAAD,OACbE,EAAkBF,KAAWC,EAAaD,EAD7B,E,SCASgP,GAAUC,EAAcC,GAC9C,GAAIC,GAAYF,IAAYE,GAAYD,GACtC,OAAOD,IAAYC,EAGrB,GAAI7O,EAAa4O,IAAY5O,EAAa6O,GACxC,OAAOD,EAAQG,YAAcF,EAAQE,UAGvC,IAAMC,EAAQ3L,OAAOG,KAAKoL,GACpBK,EAAQ5L,OAAOG,KAAKqL,GAE1B,GAAIG,EAAMvL,SAAWwL,EAAMxL,OACzB,OAAO,EAGT,IAAK,IAAL,MAAkBuL,EAAlB,eAAyB,CAApB,IAAMxN,EAAG,KACN0N,EAAON,EAAQpN,GAErB,IAAKyN,EAAME,SAAS3N,GAClB,OAAO,EAGT,GAAY,QAARA,EAAe,CACjB,IAAM4N,EAAOP,EAAQrN,GAErB,GACGxB,EAAakP,IAASlP,EAAaoP,IACnClP,EAASgP,IAAShP,EAASkP,IAC3BtP,MAAMC,QAAQmP,IAASpP,MAAMC,QAAQqP,IACjCT,GAAUO,EAAME,GACjBF,IAASE,EAEb,OAAO,CAEV,CACF,CAED,OAAO,CACT,CCzCA,OAAe,SACbC,GADa,MAQT,CACJC,YAAaD,GAAQA,IAASxN,EAAgBG,SAC9CuN,SAAUF,IAASxN,EAAgBC,OACnC0N,WAAYH,IAASxN,EAAgBE,SACrC0N,QAASJ,IAASxN,EAAgBK,IAClCwN,UAAWL,IAASxN,EAAgBI,UAbvB,ECHf,GAAe,SAACtC,GAAD,MAAuD,mBAAVA,CAA7C,ECEf,GAAe,SAACJ,GAAD,MACI,SAAjBA,EAAQC,IADK,ECFf,GAAe,SAACG,GAAD,OACbA,aAAiBgQ,WADJ,ECEf,GAAe,SAACpQ,GAAD,MACb,oBAAAA,EAAQC,IADK,ECAf,GAAe,SAACD,GAAD,MACI,UAAjBA,EAAQC,IADK,ECGf,GAAe,SAACgI,GAAD,OACboI,GAAapI,IAAQpH,EAAgBoH,EADxB,ECLf,GAAe,SAAC7H,GAAD,MAAsD,kBAAVA,CAA5C,ECAf,GAAiC,qBAAXkQ,QACU,qBAAvBA,OAAOF,aACM,qBAAbG,SCET,GAAe,SAACtI,GAAD,OAAcuI,GAAcvI,IAAQsI,SAASE,SAASxI,EAAtD,E,SCcSyI,GAAMvH,EAAaxH,GACzC,IAIIgP,EAJEC,EAAatH,EAAM3H,GAAQ,CAACA,GAAQ4H,EAAa5H,GACjDkP,EACiB,GAArBD,EAAW1M,OAAciF,EAd7B,SAAiBA,EAAayH,GAI5B,IAHA,IAAM1M,EAAS0M,EAAWzF,MAAM,GAAI,GAAGjH,OACnCkF,EAAQ,EAELA,EAAQlF,GACbiF,EAASjH,EAAYiH,GAAUC,IAAUD,EAAOyH,EAAWxH,MAG7D,OAAOD,CACR,CAKqC2H,CAAQ3H,EAAQyH,GAC9C3O,EAAM2O,EAAWA,EAAW1M,OAAS,GAGvC2M,UACKA,EAAY5O,GAGrB,IAAK,IAAI8O,EAAI,EAAGA,EAAIH,EAAWzF,MAAM,GAAI,GAAGjH,OAAQ6M,IAAK,CACvD,IAAI3H,GAAS,EACT4H,OAAS,EACPC,EAAeL,EAAWzF,MAAM,IAAK4F,EAAI,IACzCG,EAAqBD,EAAa/M,OAAS,EAMjD,IAJI6M,EAAI,IACNJ,EAAiBxH,KAGVC,EAAQ6H,EAAa/M,QAAQ,CACpC,IAAMiN,EAAOF,EAAa7H,GAC1B4H,EAAYA,EAAYA,EAAUG,GAAQhI,EAAOgI,GAG/CD,IAAuB9H,IACrBzI,EAASqQ,IAAc3M,EAAc2M,IACpCzQ,MAAMC,QAAQwQ,KACZA,EAAU1P,QACT,SAACpB,GAAD,OACGS,EAAST,KAAUmE,EAAcnE,IAAUkR,GAAUlR,EADxD,IAEAgE,UAENyM,SAAwBA,EAAeQ,UAAehI,EAAOgI,IAG/DR,EAAiBK,CAClB,CACF,CAED,OAAO7H,CACT,CCrDA,IAAMkI,GAAqC,CACzCjR,OAAO,EACPkG,SAAS,GAGLgL,GAAc,CAAElR,OAAO,EAAMkG,SAAS,GAE5C,GAAe,SAAC0D,GACd,GAAIzJ,MAAMC,QAAQwJ,GAAU,CAC1B,GAAIA,EAAQ9F,OAAS,EAAG,CACtB,IAAM6C,EAASiD,EACZ1I,QAAO,SAACiQ,GAAD,OAAYA,GAAUA,EAAOzQ,UAAYyQ,EAAOvM,QAAhD,IACPsF,KAAI,SAACiH,GAAD,OAAYA,EAAOnR,KAAnB,IACP,MAAO,CAAEA,MAAO2G,EAAQT,UAAWS,EAAO7C,OAC3C,CAED,OAAO8F,EAAQ,GAAGlJ,UAAYkJ,EAAQ,GAAGhF,SAErCgF,EAAQ,GAAGwH,aAAetP,EAAY8H,EAAQ,GAAGwH,WAAWpR,OAC1D8B,EAAY8H,EAAQ,GAAG5J,QAA+B,KAArB4J,EAAQ,GAAG5J,MAC1CkR,GACA,CAAElR,MAAO4J,EAAQ,GAAG5J,MAAOkG,SAAS,GACtCgL,GACFD,EACL,CAED,OAAOA,EACR,EC/BD,GAAe,SACbjR,EADa,OAEXqR,EAFW,EAEXA,cAAeC,EAFJ,EAEIA,YAAaC,EAFjB,EAEiBA,WAFjB,OAIbzP,EAAY9B,GACRA,EACAqR,EACU,KAAVrR,EACEwR,KACCxR,EACHsR,EACA,IAAIvR,KAAKC,GACTuR,EACAA,EAAWvR,GACXA,CAdS,ECETyR,GAAkC,CACtCvL,SAAS,EACTlG,MAAO,MAGT,GAAe,SAAC4J,GAAD,OACbzJ,MAAMC,QAAQwJ,GACVA,EAAQhI,QACN,SAAC8P,EAAUP,GAAX,OACEA,GAAUA,EAAOzQ,UAAYyQ,EAAOvM,SAChC,CACEsB,SAAS,EACTlG,MAAOmR,EAAOnR,OAEhB0R,CANN,GAOAD,IAEFA,EAZS,E,SCCSE,GAAczK,GACpC,IAAMW,EAAMX,EAAGW,IAEf,KAAIX,EAAGyC,KAAOzC,EAAGyC,KAAKiI,OAAM,SAAC/J,GAAD,OAASA,EAAIjD,QAAb,IAAyBiD,EAAIjD,UAIzD,OAAIiN,GAAYhK,GACPA,EAAIiK,MAGT7B,GAAapI,GACRkK,GAAc7K,EAAGyC,MAAM3J,MAG5BgS,GAAiBnK,GACZ,YAAIA,EAAIoK,iBAAiB/H,KAAI,qBAAGlK,KAAH,IAGlCkS,EAAWrK,GACNsK,GAAiBjL,EAAGyC,MAAM3J,MAG5BoS,GAAgBtQ,EAAY+F,EAAI7H,OAASkH,EAAGW,IAAI7H,MAAQ6H,EAAI7H,MAAOkH,EAC5E,CCzBA,OAAe,SACbwC,EACAzC,EACAoL,EACAC,GAEA,IAF+C,EAEzC7I,EAAiD,CAAC,EAFT,cAI5BC,GAJ4B,IAI/C,IAAK,EAAL,qBAAgC,KAArB9I,EAAqB,QACxBoG,EAAepD,EAAIqD,EAASrG,GAElCoG,GAAS8B,EAAIW,EAAQ7I,EAAMoG,EAAME,GAClC,CAR8C,+BAU/C,MAAO,CACLmL,eACA1R,MAAO,YAAI+I,GACXD,SACA6I,4BAEH,EC5BD,GAAe,SAAC1I,GAAD,OACbA,EAAQzC,QACPyC,EAAQ9G,UACP8G,EAAQlH,KACRkH,EAAQnH,KACRmH,EAAQjH,WACRiH,EAAQhH,WACRgH,EAAQ/G,SACR+G,EAAQ7G,SARG,E,SCESwP,GACtBpM,EACAc,EACArG,GAKA,IAAM0H,EAAQ1E,EAAIuC,EAAQvF,GAE1B,GAAI0H,GAASY,EAAMtI,GACjB,MAAO,CACL0H,QACA1H,QAMJ,IAFA,IAAMD,EAAQC,EAAKe,MAAM,KAElBhB,EAAMmD,QAAQ,CACnB,IAAM0O,EAAY7R,EAAM8R,KAAK,KACvBzL,EAAQpD,EAAIqD,EAASuL,GACrBE,EAAa9O,EAAIuC,EAAQqM,GAE/B,GAAIxL,IAAU7G,MAAMC,QAAQ4G,IAAUpG,IAAS4R,EAC7C,MAAO,CAAE5R,QAGX,GAAI8R,GAAcA,EAAW7S,KAC3B,MAAO,CACLe,KAAM4R,EACNlK,MAAOoK,GAIX/R,EAAMgS,KACP,CAED,MAAO,CACL/R,OAEJ,C,SC1CgBgS,GAGdpS,EAAWwC,GACX,GAAImM,GAAY3O,IAAW2O,GAAYnM,GACrC,OAAOA,EAGT,IAAK,IAAMnB,KAAOmB,EAAQ,CACxB,IAAM6P,EAAcrS,EAAOqB,GACrBiR,EAAc9P,EAAOnB,GAE3B,IACErB,EAAOqB,GACJtB,EAASsS,IAAgBtS,EAASuS,IAClC3S,MAAMC,QAAQyS,IAAgB1S,MAAMC,QAAQ0S,GACzCF,GAAUC,EAAaC,GACvBA,CACP,CAAC,SAAQ,CACX,CAED,OAAOtS,CACT,CCnBA,SAASuS,GAKPpM,EACAqM,EACAjN,EACAkN,EACAC,GAIA,IAFA,IAAIlK,GAAS,IAEJA,EAAQrC,EAAO7C,QAAQ,CAC9B,IAAK,IAAMjC,KAAO8E,EAAOqC,GACnB7I,MAAMC,QAAQuG,EAAOqC,GAAOnH,MAC7BkE,EAAYiD,KAAWjD,EAAYiD,GAAS,CAAC,GAC9CjD,EAAYiD,GAAOnH,GAAO,GAC1BkR,GACEpM,EAAOqC,GAAOnH,GACd+B,EAAIoP,EAAchK,IAAU,CAAC,EAAGnH,EAAK,IACrCkE,EAAYiD,GAAOnH,GACnBkE,EAAYiD,GACZnH,KAGD3B,EAAkB8S,IACnBhE,GAAUpL,EAAIoP,EAAchK,IAAU,CAAC,EAAGnH,GAAM8E,EAAOqC,GAAOnH,IAC1DiH,EAAI/C,EAAYiD,IAAU,CAAC,EAAGnH,GAC7BkE,EAAYiD,GAAM,+BACdjD,EAAYiD,IADE,eAEhBnH,GAAM,IAKjBoR,IACGlN,EAAYjC,eACNmP,EAAWC,EACrB,CAED,OAAOnN,CACR,CAED,OAAe,SACbY,EACAqM,EACAjN,GAHa,OAKb6M,GACEG,GAAepM,EAAQqM,EAAejN,EAAYgF,MAAM,EAAGpE,EAAO7C,SAClEiP,GAAeC,EAAerM,EAAQZ,EAAYgF,MAAM,EAAGpE,EAAO7C,SAPvD,EClDf,GAAe,SACbqP,EACA9K,EACA+K,EACAC,EAIA3D,GAQA,OAAIA,EAAKI,WAEGsD,GAAe1D,EAAKK,YACrB1H,GAAa8K,IACbC,EAAcC,EAAezD,SAAWF,EAAKE,WAC9CuD,IACCC,EAAcC,EAAexD,WAAaH,EAAKG,aACjDsD,EAGV,ECtBD,GAAe,SAAItL,EAAQjH,GAAZ,OACZc,EAAQkC,EAAIiE,EAAKjH,EAAM,KAAKkD,QAAUwM,GAAMzI,EAAKjH,EADrC,ECCf,GAAe,SAACZ,GAAD,OACbsT,GAAStT,IAAU,iBAAqBA,EAD3B,ECLf,GAAe,SAACA,GAAD,OAAqCA,aAAiBuT,MAAtD,E,SCISC,GACtB/R,EACAoG,GACiB,IAAjBhI,EAAiB,uDAAV,WAEP,GACE4T,GAAUhS,IACTtB,MAAMC,QAAQqB,IAAWA,EAAOmQ,MAAM6B,KACtCzC,GAAUvP,KAAYA,EAEvB,MAAO,CACL5B,OACAoI,QAASwL,GAAUhS,GAAUA,EAAS,GACtCoG,MAGN,CChBA,OAAe,SAAC6L,GAAD,OACbnT,EAASmT,KAAoBC,GAAQD,GACjCA,EACA,CACE1T,MAAO0T,EACPzL,QAAS,GALF,ECgBf,0CAAe,WACbjB,EACA4M,EACAnL,EACA6J,GAJa,uGAAA7G,EAAA,2DAoBTzE,EAAME,GAbRW,EAPW,EAOXA,IACA8B,EARW,EAQXA,KACA7G,EATW,EASXA,SACAH,EAVW,EAUXA,UACAC,EAXW,EAWXA,UACAF,EAZW,EAYXA,IACAD,EAbW,EAaXA,IACAI,EAdW,EAcXA,QACAE,EAfW,EAeXA,SACAnC,EAhBW,EAgBXA,KACAyQ,EAjBW,EAiBXA,cACAlK,EAlBW,EAkBXA,MACAvC,EAnBW,EAmBXA,SAEGuC,IAASvC,EArBD,yCAsBJ,CAAC,GAtBG,UAwBPiP,EAA6BlK,EAAOA,EAAK,GAAM9B,EAC/CiM,EAAmB,SAAC7L,GACpBqK,GAA6BuB,EAAS3L,iBACxC2L,EAAS7L,kBAAkBgJ,GAAU/I,GAAW,GAAKA,GAAW,KAChE4L,EAAS3L,iBAEZ,EACKI,EAA6B,CAAC,EAC9ByL,EAAU9D,GAAapI,GACvBqK,EAAazR,EAAgBoH,GAC7BmM,EAAoBD,GAAW7B,EAC/B+B,GACF5C,GAAiBQ,GAAYhK,MAAUA,EAAI7H,OAC9B,KAAf4T,GACCzT,MAAMC,QAAQwT,KAAgBA,EAAW9P,OACtCoQ,EAAoBC,EAAaC,KACrC,KACAxT,EACA6H,EACAH,GAEI+L,EAAmB,SACvBC,EACAC,EACAC,GAE0C,IAD1CC,EAC0C,uDADhCjS,EAAuBG,UACjC+R,EAA0C,uDAAhClS,EAAuBI,UAE3BqF,EAAUqM,EAAYC,EAAmBC,EAC/ClM,EAAM1H,GAAK,eACTf,KAAMyU,EAAYG,EAAUC,EAC5BzM,UACAJ,OACGqM,EAAkBI,EAAYG,EAAUC,EAASzM,GAEvD,GAGCnF,MACGkR,IAAsBC,GAAW/T,EAAkB0T,KACnD5C,GAAU4C,KAAgBA,GAC1B1B,IAAeC,GAAiBxI,GAAMzD,SACtC6N,IAAYhC,GAAcpI,GAAMzD,SAlExB,sBAoEgBuN,GAAU3Q,GACjC,CAAE9C,QAAS8C,EAAUmF,QAASnF,GAC9B6R,GAAmB7R,GAFf9C,EApEG,EAoEHA,MAAOiI,EApEJ,EAoEIA,SAIXjI,EAxEO,oBAyETsI,EAAM1H,GAAK,eACTf,KAAM2C,EAAuBM,SAC7BmF,UACAJ,IAAKgM,GACFK,EAAkB1R,EAAuBM,SAAUmF,IAEnDQ,EA/EI,wBAgFPqL,EAAiB7L,GAhFV,kBAiFAK,GAjFA,WAsFR2L,GAAa/T,EAAkBwC,IAASxC,EAAkBuC,GAtFlD,oBAyFLmS,EAAYD,GAAmBlS,GAC/BoS,EAAYF,GAAmBjS,GAEhC6G,MAAMqK,IAUHkB,EACHjN,EAAyByJ,aAAe,IAAIvR,KAAK6T,GAChDN,GAASsB,EAAU5U,SACrBsU,EAAYQ,EAAY,IAAI/U,KAAK6U,EAAU5U,QAEzCsT,GAASuB,EAAU7U,SACrB+U,EAAYD,EAAY,IAAI/U,KAAK8U,EAAU7U,UAfvCgV,EACHnN,EAAyBwJ,eAAiB4D,WAAWrB,GACnD1T,EAAkB0U,EAAU5U,SAC/BsU,EAAYU,EAAcJ,EAAU5U,OAEjCE,EAAkB2U,EAAU7U,SAC/B+U,EAAYC,EAAcH,EAAU7U,SAapCsU,IAAaS,EAhHN,oBAiHTV,IACIC,EACFM,EAAU3M,QACV4M,EAAU5M,QACVzF,EAAuBC,IACvBD,EAAuBE,KAEpB+F,EAxHI,wBAyHPqL,EAAiBxL,EAAM1H,GAAOqH,SAzHvB,kBA0HAK,GA1HA,YA+HR3F,IAAaC,GAAeqR,IAAWX,GAASM,GA/HxC,oBAgILsB,EAAkBP,GAAmBhS,GACrCwS,EAAkBR,GAAmB/R,GACrC,GACH1C,EAAkBgV,EAAgBlV,QACnC4T,EAAW9P,OAASoR,EAAgBlV,MAChC,GACHE,EAAkBiV,EAAgBnV,QACnC4T,EAAW9P,OAASqR,EAAgBnV,OAElC,IAAa,EAzIN,oBA0ITqU,EACE,EACAa,EAAgBjN,QAChBkN,EAAgBlN,SAEbQ,EA/II,wBAgJPqL,EAAiBxL,EAAM1H,GAAOqH,SAhJvB,kBAiJAK,GAjJA,YAsJTzF,GAAYoR,IAAWX,GAASM,GAtJvB,sBAuJ8Be,GAAmB9R,GAA7CuS,EAvJJ,EAuJHpV,MAAqB,EAvJlB,EAuJkBiI,SAEzB0L,GAAQyB,IAAkBxB,EAAWyB,MAAMD,GAzJpC,oBA0JT9M,EAAM1H,GAAK,eACTf,KAAM2C,EAAuBK,QAC7BoF,QAAA,EACAJ,OACGqM,EAAkB1R,EAAuBK,QAAS,IAElD4F,EAhKI,wBAiKPqL,EAAiB,GAjKV,kBAkKAxL,GAlKA,YAuKTvF,EAvKS,qBAwKPoL,GAAWpL,GAxKJ,kCAyKYA,EAAS6Q,GAzKrB,WAyKHnS,EAzKG,SA0KH6T,EAAgB9B,GAAiB/R,EAAQoS,IA1KtC,oBA6KPvL,EAAM1H,GAAK,+BACN0U,GACApB,EACD1R,EAAuBO,SACvBuS,EAAcrN,UAGbQ,EApLE,wBAqLLqL,EAAiBwB,EAAcrN,SArL1B,kBAsLEK,GAtLF,oCAyLA/H,EAASwC,GAzLT,iBA0LLwS,EAAmB,CAAC,EA1Lf,OAAA9J,EAAA,KA4LS1I,GA5LT,kDA4LElB,GA5LF,WA6LFoC,EAAcsR,IAAsB9M,EA7LlC,iEAiMe+K,GAjMf,UAkMCzQ,EAASlB,IAAK+R,GAlMf,yBAmMLC,EAnMK,KAoMLhS,IAHI,IAjMC,2BAwML0T,EAAmB,OAAH,wBACX,IACArB,EAAkBrS,GAAK,GAAcoG,UAG1C6L,EAAiB,GAAc7L,SAE3BQ,IACFH,EAAM1H,GAAQ2U,IAhNX,2BAqNJtR,EAAcsR,GArNV,oBAsNPjN,EAAM1H,GAAK,eACTiH,IAAKgM,GACF0B,GAEA9M,EA1NE,0CA2NEH,GA3NF,eAiObwL,GAAiB,GAjOJ,kBAkONxL,GAlOM,4CAAf,4DC4DMkN,GAAiB,CACrB9F,KAAMxN,EAAgBG,SACtBgR,eAAgBnR,EAAgBE,SAChCqT,kBAAkB,GAGdC,GAAsC,qBAAXxF,O,SCvEjByF,KAIkC,IAAhDhR,EAAgD,uDAAF,CAAC,EAEzCiR,EAAe,WAGrB,EAAqC,WAAwC,CAC3E9P,SAAS,EACTG,cAAc,EACdF,YAAa,CAAC,EACdqN,aAAa,EACbyC,YAAa,EACb7P,cAAe,CAAC,EAChB8P,cAAc,EACdC,oBAAoB,EACpB7P,SAAS,EACTC,OAAQ,CAAC,IAVX,mBAAO/C,EAAP,KAAkBwC,EAAlB,KAaIgQ,EAAa9U,QACf8U,EAAa9U,QAAQwE,QAAQ+B,SAAW1C,EAExCiR,EAAa9U,QAAO,+B,WDoD0B,IAkC5CkV,EAlCJrR,EAAgD,uDAAF,CAAC,EAE3C0C,EAAW,OAAH,wBACPmO,IACA7Q,GAEDgB,EAAsC,CACxCG,SAAS,EACTG,cAAc,EACdF,YAAa,CAAC,EACdqN,aAAa,EACbyC,YAAa,EACb7P,cAAe,CAAC,EAChB8P,cAAc,EACdC,oBAAoB,EACpB7P,SAAS,EACTC,OAAQ,CAAC,GAEPc,EAAU,CAAC,EACXxB,EAAiB4B,EAAS2L,eAAiB,CAAC,EAC5CxN,EAAc6B,EAAS9B,iBACvB,CAAC,EACD0I,GAAYxI,GACZgC,EAAc,CAChBC,QAAQ,EACRP,OAAO,EACPuF,OAAO,GAELnF,EAAgB,CAClBJ,MAAO,IAAI+G,IACX+H,QAAS,IAAI/H,IACb1G,MAAO,IAAI0G,IACXxB,MAAO,IAAIwB,KAGTgI,EAAQ,EACRC,EAAoD,CAAC,EACnD9S,EAAkB,CACtByC,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,SAAS,EACTC,QAAQ,GAEJI,EAAoC,CACxCmG,MAAO0B,KACP9I,QAAS8I,KACT5G,MAAO4G,KACP5H,MAAO4H,MAGHgI,EAA6BC,GAAmBhP,EAASqI,MACzD4G,EAA4BD,GAAmBhP,EAASgM,gBACxDkD,EACJlP,EAASgL,eAAiBnQ,EAAgBK,IAEtCiU,EACJ,SAAqBxR,EAAayR,GAAlC,OACA,WAAa,2BAATC,EAAS,yBAATA,EAAS,gBACXC,aAAaT,GACbA,EAAQhG,OAAO0G,YAAW,kBAAM5R,EAAQ,WAAR,EAAY0R,EAAlB,GAAyBD,EACpD,CAJD,EAMII,EAAiB,SACrBjW,EACAuS,GAFqB,OAIpBA,IACA5L,EAAOkF,UACNlF,EAAOmF,MAAMoK,IAAIlW,IACjB2G,EAAOmF,MAAMoK,KAAKlW,EAAKyU,MAAM,QAAU,IAAI,IAPxB,EASjBvI,EAAY,uCAAG,WAAOiK,GAAP,eAAAtL,EAAA,yDACfvF,GAAU,GAEV7C,EAAgB6C,QAHD,qBAIPmB,EAAS2P,SAJF,6BAKb/S,EALa,SAKQ2I,IALR,mBAK0BzG,OAL1B,6DAMP8Q,EAAyBhQ,GAAS,GAN3B,4BAIjBf,EAJiB,KAQZ6Q,GAAoB7Q,IAAYP,EAAWO,UAC9CP,EAAWO,QAAUA,EACrBK,EAAUC,MAAMzB,KAAK,CACnBmB,aAXa,iCAgBZA,GAhBY,4CAAH,sDA+DZgR,EAAe,SAACtW,EAAyB0H,GAA1B,OACnBQ,EAAInD,EAAWQ,OAAQvF,EAAM0H,GAC7B/B,EAAUC,MAAMzB,KAAK,CACnBoB,OAAQR,EAAWQ,QAHF,EAOfgR,EAAsB,SAC1BvW,EACAwW,EACAvP,GAEA,IAAMb,EAAepD,EAAIqD,EAASrG,GAElC,GAAIoG,EAAO,CACT,IAAMxF,EAAeoC,EAAI4B,EAAa5E,EAAMgD,EAAI6B,EAAgB7E,IAEhEkB,EAAYN,IACXqG,GAAQA,EAAyBwP,gBAClCD,EACItO,EACEtD,EACA5E,EACAwW,EAAuB5V,EAAemQ,GAAc3K,EAAME,KAE5DoQ,EAAc1W,EAAMY,EACzB,CAEDiG,EAAYN,OAAS2F,GACtB,EAEKyK,EAAsB,SAC1B3W,EACA4W,EACAC,GACmB,IAAnBC,IAAmB,yDAIfC,GAAe,EACbxN,EAA8D,CAClEvJ,QAEIgX,EAAyBhU,EAAI+B,EAAWK,cAAepF,GAE7D,GAAIyC,EAAgByC,QAAS,CAC3B,IAAM+R,EAAsBlS,EAAWG,QAEvCH,EAAWG,QAAUqE,EAAOrE,QAAUgS,IACtCH,EAAeE,IAAwB1N,EAAOrE,OAC/C,CAED,GAAIzC,EAAgB0C,cAAgB0R,EAAkB,CACpD,IAAMM,EAAuBnU,EAAI+B,EAAWI,YAAanF,GAC1BoO,GAC7BpL,EAAI6B,EAAgB7E,GACpB4W,GAIElH,GAAM3K,EAAWI,YAAanF,GAC9BkI,EAAInD,EAAWI,YAA6BnF,GAAM,GACtDuJ,EAAOpE,YAAcJ,EAAWI,YAChC4R,EACEA,GACAI,IAAyBnU,EAAI+B,EAAWI,YAAanF,EACxD,CAaD,OAXI6W,IAAqBG,IACvB9O,EAAInD,EAAWK,cAA+BpF,EAAM6W,GACpDtN,EAAOnE,cAAgBL,EAAWK,cAClC2R,EACEA,GACCtU,EAAgB2C,eACf4R,IAA2BH,GAGjCE,GAAgBD,GAAgBnR,EAAUC,MAAMzB,KAAKoF,GAE9CwN,EAAexN,EAAS,CAAC,CACjC,EAEK6N,EAAwB,SAACpX,EAAWZ,GAAZ,OAC5B8I,EACEnD,EAAWI,YACXnF,EACAqX,GACEjY,EACA4D,EAAI6B,EAAgB7E,EAAM,IAC1BgD,EAAI+B,EAAWI,YAAanF,EAAM,MAGtCsX,GAAgBvS,EAAWI,YAAanF,EAVZ,EAaxBuX,EAAmB,uCAAG,WAC1BpB,EACAnW,EACAsF,EACAoC,EACAH,GAL0B,mBAAAsD,EAAA,sDAWpB2M,EAAqBxU,EAAI+B,EAAWQ,OAAQvF,GAC5CyX,EACJhV,EAAgB6C,SAAWP,EAAWO,UAAYA,EAEhDvB,EAAM2T,YAAchQ,GACtB0N,EACEA,GAAsBQ,EAASU,EAAcvS,EAAM2T,aAClC1X,EAAM0H,IAEzBqO,aAAaT,GACb5N,EACIQ,EAAInD,EAAWQ,OAAQvF,EAAM0H,GAC7BgI,GAAM3K,EAAWQ,OAAQvF,KAI3B0H,EAAS0G,GAAUoJ,EAAoB9P,IAAS8P,IAC/CnU,EAAckE,KACfkQ,GACDtB,IAEKwB,EAAgB,6CACjBpQ,GACCkQ,EAAoB,CAAEnS,WAAY,CAAC,GAAC,CACxCC,OAAQR,EAAWQ,OACnBvF,SAGF+E,EAAa,OAAH,wBACLA,GACA4S,GAGLhS,EAAUC,MAAMzB,KAAKwT,IAGvBpC,EAAevV,KAEXyC,EAAgB4C,eAAiBkQ,EAAevV,KAClD2F,EAAUC,MAAMzB,KAAK,CACnBkB,cAAc,IAEhBkQ,EAAiB,CAAC,GArDM,2CAAH,8DAyDnBvJ,EAAc,uCAAG,WAAOhM,GAAP,SAAA6K,EAAA,0DACrBpE,EAAS2P,SADY,gCAEX3P,EAAS2P,SACb,iBAAKxR,GACL6B,EAASmR,QACTC,GACE7X,GAAQ2G,EAAOJ,MACfF,EACAI,EAASgL,aACThL,EAASiL,4BATI,8CAYhB,CAAC,EAZe,iFAAH,sDAcdoG,EAA2B,uCAAG,WAAO/X,GAAP,yBAAA8K,EAAA,sEACTmB,IADS,OAGlC,GAHkC,SAC1BzG,EAD0B,EAC1BA,OAEJxF,EAAO,eACUA,GADV,IACT,IAAK,EAAL,qBAAW,EAAe,SAClB,EAAQiD,EAAIuC,EAAQ,IAEtB2C,EAAInD,EAAWQ,OAAQ,EAAM,GAC7BmK,GAAM3K,EAAWQ,OAAQ,EALtB,+BAOV,MACCR,EAAWQ,OAASA,EAXY,yBAc3BA,GAd2B,2CAAH,sDAiB3B8Q,EAAwB,uCAAG,WAC/BxN,EACAkP,GAF+B,qCAAAlN,EAAA,sDAG/B+M,EAH+B,+BAGrB,CACRI,OAAO,GAJsB,OAAAnN,EAAA,KAOZhC,GAPY,iDAOpB,EAPoB,aAQvBzC,EAAQyC,EAAO,IARQ,oBAWrBoP,EAAiB7R,EAAME,GACvBsQ,EAAaxT,EAAKgD,EAAO,OAE3B6R,EAduB,kCAeAC,GACvB9R,EACApD,EAAI4B,EAAaqT,EAAejY,MAChC2V,EACAlP,EAASiL,2BAnBc,aAenByG,EAfmB,QAsBVF,EAAejY,MAtBL,oBAuBvB4X,EAAQI,OAAQ,GAEZD,EAzBmB,qDA8BpBA,IACHI,EAAWF,EAAejY,MACtBkI,EACEnD,EAAWQ,OACX0S,EAAejY,KACfmY,EAAWF,EAAejY,OAE5B0P,GAAM3K,EAAWQ,OAAQ0S,EAAejY,OArCrB,gBAyC3B4W,GAzC2B,uCA0ClBP,EACLO,EACAmB,EACAH,GA7CuB,wDAkDxBA,EAAQI,OAlDgB,4CAAH,wDAmExBd,EAAwB,SAAClX,EAAMd,GAAP,OAC5Bc,GAAQd,GAAQgJ,EAAItD,EAAa5E,EAAMd,IACtCkP,GAAUgK,IAAavT,EAFI,EAKxBwT,EAAyC,SAC7CtY,EACAa,EACA0X,GAEA,IAAMrN,EAAc,OAAH,UACXpE,EAAYN,MACZ3B,EACA1D,EAAYN,GACZiE,EACA6N,GAAS3S,GAAT,eACGA,EAAQa,GACXA,GAGN,GAAIb,EAAO,CACT,IAAMc,EAAS2C,EAAsBzD,GAAOuJ,KAC1C,SAACsI,GAAD,OACE0G,GAAY3R,EAAOmF,MAAMP,IAAIqG,GAC7B5O,EAAIiI,EAAa2G,EAFnB,IAMF,OAAOrS,MAAMC,QAAQO,GAASc,EAASA,EAAO,EAC/C,CAGD,OADAyX,IAAa3R,EAAOkF,UAAW,GACxBZ,CACR,EASKyL,EAAgB,SACpB1W,EACAZ,GAEsB,IADtB4J,EACsB,uDADI,CAAC,EAC3B8N,EAAsB,uCAEhB1Q,EAAepD,EAAIqD,EAASrG,GAC9B4W,EAAsBxX,EAE1B,GAAIgH,EAAO,CACT,IAAM6R,EAAiB7R,EAAME,GAEzB2R,IACF/P,EAAItD,EAAa5E,EAAMwR,GAAgBpS,EAAO6Y,IAE9CrB,EACE2B,IAAS/I,GAAcyI,EAAehR,MAAQ3H,EAAkBF,GAC5D,GACAA,EAEF6R,GAAYgH,EAAehR,OAASyL,GAASkE,GAC/CqB,EAAehR,IAAIiK,MAAQ0F,EAClBxF,GAAiB6G,EAAehR,KACzC,YAAIgR,EAAehR,IAAI+B,SAASwP,SAC9B,SAACC,GAAD,OACGA,EAAUC,SACT9B,EACAhI,SAAS6J,EAAUrZ,MAHvB,IAKO6Y,EAAelP,KACpBlJ,EAAgBoY,EAAehR,KACjCgR,EAAelP,KAAK7F,OAAS,EACzB+U,EAAelP,KAAKyP,SAClB,SAACG,GAAD,OACGA,EAAY7Y,QAAUP,MAAMC,QAAQoX,KAC9BA,EAAkBtT,MACnB,SAACpE,GAAD,OAAkBA,IAASyZ,EAAYvZ,KAAvC,IAEFwX,IAAe+B,EAAYvZ,KALjC,IAOD6Y,EAAelP,KAAK,GAAGjJ,UAAY8W,EAExCqB,EAAelP,KAAKyP,SAClB,SAACI,GAAD,OACGA,EAAS9Y,QAAU8Y,EAASxZ,QAAUwX,CADzC,IAKJqB,EAAehR,IAAI7H,MAAQwX,EAG7BE,GACEnR,EAAUjB,QAAQP,KAAK,CACrB4B,OAAQnB,EACR5E,SAGP,EAEAgJ,EAAQ6P,aAAe7P,EAAQ8P,cAC9BnC,EAAoB3W,EAAM4W,EAAY5N,EAAQ8P,aAEhD9P,EAAQ+P,gBAAkBC,EAAQhZ,EACnC,EAEKiZ,EAAY,SAAZA,EACJjZ,EACAZ,EACA4J,GAEA,IAAK,IAAMkQ,KAAY9Z,EAAO,CAC5B,IAAMwX,EAA0CxX,EAAM8Z,GAChDtH,EAAY,GAAH,OAAM5R,EAAN,YAAckZ,GACvB9S,EAAQpD,EAAIqD,EAASuL,IAE1BjL,EAAOC,MAAMsP,IAAIlW,IACfuO,GAAYqI,MACZxQ,GAAUA,EAAME,KAClB7G,EAAamX,GAEVF,EAAc9E,EAAWgF,EAAY5N,GAAS,GAD9CiQ,EAAUrH,EAAWgF,EAAY5N,EAEtC,CACF,EA0CKmQ,EAAY,uCAAkB,WAAOzZ,GAAP,2CAAAmL,EAAA,yDAC5BjL,EAASF,EAAME,OACjBI,EAAOJ,EAAOI,OACZoG,EAAepD,EAAIqD,EAASrG,IAHA,oBAQ1B4W,EAAahX,EAAOX,KAAO8R,GAAc3K,EAAME,IAAM1G,EAAOR,MAC5DmT,EAAc7S,EAAMT,OAASkC,EAAOC,KACpCgY,GACFC,GAAcjT,EAAME,MACnBG,EAAS2P,WACTpT,EAAI+B,EAAWQ,OAAQvF,KACvBoG,EAAME,GAAGgT,MACZC,GACEhH,EACAvP,EAAI+B,EAAWK,cAAepF,GAC9B+E,EAAWyN,YACXkD,EACAF,GAEEgE,EAAYvD,EAAejW,EAAMuS,GAEnCA,EACFnM,EAAME,GAAG/E,QAAU6E,EAAME,GAAG/E,OAAO7B,GAC1B0G,EAAME,GAAG9E,UAClB4E,EAAME,GAAG9E,SAAS9B,GAGpBwI,EAAItD,EAAa5E,EAAM4W,GAEjBrP,EAAaoP,EACjB3W,EACA4W,EACArE,GACA,GAGIuE,GAAgBzT,EAAckE,IAAeiS,GAElDjH,GACC5M,EAAUmG,MAAM3H,KAAK,CACnBnE,OACAf,KAAMS,EAAMT,QAGZma,EA/C4B,0CAiD5BtC,GACAnR,EAAUC,MAAMzB,KAAI,eAAGnE,QAAUwZ,EAAY,CAAC,EAAIjS,KAlDtB,YAsD/BgL,GAAeiH,GAAa7T,EAAUC,MAAMzB,KAAK,CAAC,GAEnDoR,EAAevV,IAAQuV,EAAevV,GAAQ,GAE9CyC,EAAgB4C,cACdM,EAAUC,MAAMzB,KAAK,CACnBkB,cAAc,KAGdoB,EAAS2P,SA/DmB,kCAgELpK,EAAe,CAAChM,IAhEX,iBAgEtBuF,EAhEsB,EAgEtBA,OACFkU,EAA4B9H,GAChC5M,EAAWQ,OACXc,EACArG,GAEI0Z,EAAoB/H,GACxBpM,EACAc,EACAoT,EAA0BzZ,MAAQA,GAGpC,EAAQ0Z,EAAkBhS,MAC1B1H,EAAO0Z,EAAkB1Z,KAEzBsF,EAAUjC,EAAckC,GA/EM,yCAkFtB2S,GACJ9R,EACApD,EAAI4B,EAAa5E,GACjB2V,EACAlP,EAASiL,2BAtFiB,oBAwF5B1R,EAPF,EAjF8B,uBA0FdkM,GAAa,GA1FC,QA0F9B5G,EA1F8B,eA6FhCc,EAAME,GAAGgT,MAAQN,EAAQ5S,EAAME,GAAGgT,MAElC/B,GAAoB,EAAOvX,EAAMsF,EAAS,EAAOiC,GA/FjB,4CAAlB,sDAmGZyR,EAAO,uCAAiC,WAAOhZ,GAAP,mCAAA6K,EAAA,yDAAa7B,EAAb,+BAAuB,CAAC,EAG9D2Q,EAAanW,EAAsBxD,GAEzC2F,EAAUC,MAAMzB,KAAK,CACnBkB,cAAc,KAGZoB,EAAS2P,SAT+B,iCAUrB0B,EACnB5W,EAAYlB,GAAQA,EAAO2Z,GAXa,OAUpCpU,EAVoC,OAc1CD,EAAUjC,EAAckC,GACxBoP,EAAmB3U,GACd2Z,EAAW1Z,MAAK,SAACD,GAAD,OAAUgD,EAAIuC,EAAQvF,EAAtB,IACjBsF,EAjBsC,4BAkBjCtF,EAlBiC,kCAoBlC4Z,QAAQjY,IACZgY,EAAWrQ,IAAX,uCAAe,WAAOsI,GAAP,eAAA/G,EAAA,6DACPzE,EAAQpD,EAAIqD,EAASuL,GADd,SAEAyE,EACXjQ,GAASA,EAAME,GAAf,eAAuBsL,EAAYxL,GAAUA,GAHlC,mFAAf,wDArBsC,QAmB1CuO,EAnB0C,OA4BxC3D,MAAMzQ,SACR2L,IA7B0C,yCA+BPmK,EAAyBhQ,GA/BlB,QA+B1CsO,EAAmBrP,EA/BuB,sBAkC5CK,EAAUC,MAAMzB,KAAI,8CACbuO,GAAS1S,IACbyC,EAAgB6C,SAAWA,IAAYP,EAAWO,QAC/C,CAAC,EACD,CAAEtF,SACFyG,EAAS2P,SAAW,CAAE9Q,WAAY,CAAC,GAAC,CACxCC,OAAQR,EAAWQ,OACnBF,cAAc,KAGhB2D,EAAQC,cACL0L,GACD/L,EACEvC,GACA,SAACpF,GAAD,OAAS+B,EAAI+B,EAAWQ,OAAQtE,EAAhC,GACAjB,EAAO2Z,EAAahT,EAAOJ,OAjDa,kBAoDrCoO,GApDqC,4CAAjC,sDAuDPyD,EAA4C,SAChDuB,GAIA,IAAM5T,EAAS,OAAH,wBACPlB,GACCgC,EAAYN,MAAQ3B,EAAc,CAAC,GAGzC,OAAO1D,EAAYyY,GACf5T,EACA2M,GAASiH,GACT3W,EAAI+C,EAAQ4T,GACZA,EAAWrQ,KAAI,SAACtJ,GAAD,OAAUgD,EAAI+C,EAAQ/F,EAAtB,GACpB,EAwDK+G,GAA8C,SAAC/G,GAAkB,MAAZgJ,EAAY,uDAAF,CAAC,EAAC,cAC7ChJ,EAAOwD,EAAsBxD,GAAQ2G,EAAOJ,OADC,IACrE,IAAK,EAAL,qBAA2E,KAAhEqL,EAAgE,QACzEjL,EAAOJ,MAAMsT,OAAOjI,GACpBjL,EAAOC,MAAMiT,OAAOjI,GAEhB5O,EAAIqD,EAASuL,KACV5I,EAAQ8Q,YACXpK,GAAMrJ,EAASuL,GACflC,GAAM9K,EAAagN,KAGpB5I,EAAQ+Q,WAAarK,GAAM3K,EAAWQ,OAAQqM,IAC9C5I,EAAQgR,WAAatK,GAAM3K,EAAWI,YAAayM,IACnD5I,EAAQiR,aAAevK,GAAM3K,EAAWK,cAAewM,IACvDnL,EAAS9B,mBACPqE,EAAQkR,kBACTxK,GAAM7K,EAAgB+M,GAE3B,CAlBoE,+BAoBrEjM,EAAUmG,MAAM3H,KAAK,CAAC,GAEtBwB,EAAUC,MAAMzB,KAAI,+BACfY,GACEiE,EAAQgR,UAAiB,CAAE9U,QAASgS,KAAhB,CAAC,KAG3BlO,EAAQmR,aAAejO,GACzB,EAEKjG,GAA0C,SAA1CA,EAA2CjG,GAAkB,IAAZgJ,EAAY,uDAAF,CAAC,EAC1D5C,EAAQpD,EAAIqD,EAASrG,GAyB3B,OAvBAkI,EAAI7B,EAASrG,EAAM,CACjBsG,GAAI,OAAF,sCACIF,GAASA,EAAME,GAAKF,EAAME,GAAK,CAAEW,IAAK,CAAEjH,UAAQ,CACpDA,OACAuG,OAAO,IACJyC,KAGPrC,EAAOJ,MAAMgF,IAAIvL,IAEhBkB,EAAY8H,EAAQ5J,QAAU8I,EAAItD,EAAa5E,EAAMgJ,EAAQ5J,OAE9DgH,EACIgK,GAAUpH,EAAQhF,WAClBkE,EACEtD,EACA5E,EACAgJ,EAAQhF,cACJvD,EACAuC,EAAI4B,EAAa5E,EAAM+Q,GAAc3K,EAAME,MAEjDiQ,EAAoBvW,GAAM,GAEvB8U,GACF,CAAE9U,KAAMA,G,6BAEPA,QACIoQ,GAAUpH,EAAQhF,UAClB,CAAEA,SAAUgF,EAAQhF,UACpB,CAAC,GAAC,CACNxC,SAAU2X,EACV5X,OAAQ4X,EACRlS,IAAK,SAAF,oGAAE,WAACA,GACJ,GAAIA,EAAK,CACPhB,EAASjG,EAAMgJ,GACf,IAAI,EAAehG,EAAIqD,EAASrG,GAC1Boa,EAAWlZ,EAAY+F,EAAI7H,QAC7B6H,EAAIoT,kBACDpT,EAAIoT,iBAAiB,yBAAyB,IAGjDpT,EAEEmM,EAAoBkH,GAA0BF,GAEpD,GACEA,IAAa,EAAM9T,GAAGW,KACrBmM,GACCtS,EAAQ,EAAMwF,GAAGyC,MAAQ,IAAIzF,MAC3B,SAACiN,GAAD,OAAYA,IAAW6J,CAAvB,IAGJ,OAGF,EAAQ,CACN9T,GAAI8M,E,+BAEK,EAAM9M,IAAE,CACXyC,KAAM,GAAF,mBACCjI,EAAQ,EAAMwF,GAAGyC,MAAQ,IAAIzI,OAAOia,KADrC,CAEFH,IAEFnT,IAAK,CAAEhI,KAAMmb,EAASnb,KAAMe,UAAM,+BAG/B,EAAMsG,IAAE,CACXW,IAAKmT,KAIblS,EAAI7B,EAASrG,EAAM,KAEjBgJ,IAAYA,EAAQhF,WACpBuS,EAAoBvW,GAAM,EAAOoa,EACpC,KAAM,CACL,IAAM,EAAepX,EAAIqD,EAASrG,EAAM,CAAC,GACnC2E,EACJ8B,EAAS9B,kBAAoBqE,EAAQrE,iBAEnC,EAAM2B,KACR,EAAMA,GAAGC,OAAQ,GAGnB5B,KAEI+B,EAAmBC,EAAOC,MAAO5G,KAAS6G,EAAYC,SAExDH,EAAO0O,QAAQ9J,IAAIvL,EACtB,CACF,KAER,EA8JD,MAAO,CACL0E,QAAS,CACPuB,YACAc,cACAiF,iBACAqM,YACAnB,YACAhL,eACAsO,iBAxrBqB,+BACJ7T,EAAO0O,SADH,IACvB,IAAK,EAAL,qBAAmC,KAAxB,EAAwB,QAC3BjP,EAAepD,EAAIqD,EAAS,GAElCD,IACGA,EAAME,GAAGyC,KACN3C,EAAME,GAAGyC,KAAKiI,OAAM,SAAC/J,GAAD,OAAUsT,GAAKtT,EAAf,KACnBsT,GAAKnU,EAAME,GAAGW,OACnBF,GAAW,EACd,CATsB,+BAWvBJ,EAAO0O,QAAU,IAAI/H,GACtB,EA6qBGhB,kBAj9B6C,SAC/CtM,EACAya,EACA3E,GAGsB,IAFtB/P,EAEsB,uDAFb,GACT2U,IACsB,yDAAtBC,IAAsB,yDAItB,GAFA9T,EAAYC,QAAS,EAEjB6T,GAAmB3X,EAAIqD,EAASrG,GAAO,CACzC,IAAMiL,EAAcwP,EAAOzX,EAAIqD,EAASrG,GAAO8V,EAAKvJ,KAAMuJ,EAAKtJ,MAC/DkO,GAAmBxS,EAAI7B,EAASrG,EAAMiL,EACvC,CAED,GAAI1L,MAAMC,QAAQwD,EAAI+B,EAAWQ,OAAQvF,IAAQ,CAC/C,IAAMuF,EAASkV,EAAOzX,EAAI+B,EAAWQ,OAAQvF,GAAO8V,EAAKvJ,KAAMuJ,EAAKtJ,MACpEkO,GAAmBxS,EAAInD,EAAWQ,OAAQvF,EAAMuF,GAChD+R,GAAgBvS,EAAWQ,OAAQvF,EACpC,CAED,GAAIyC,EAAgB2C,eAAiBpC,EAAI+B,EAAWK,cAAepF,GAAO,CACxE,IAAMoF,EAAgBqV,EACpBzX,EAAI+B,EAAWK,cAAepF,GAC9B8V,EAAKvJ,KACLuJ,EAAKtJ,MAEPkO,GACExS,EAAInD,EAAWK,cAA+BpF,EAAMoF,GACtDkS,GAAgBvS,EAAWK,cAAepF,EAC3C,EAEGyC,EAAgB0C,aAAe1C,EAAgByC,UACjDkS,EAAsBpX,EAAM+F,GAG9BJ,EAAUC,MAAMzB,KAAK,CACnBe,QAASgS,EAAUlX,EAAM+F,GACzBZ,YAAaJ,EAAWI,YACxBI,OAAQR,EAAWQ,OACnBD,QAASP,EAAWO,SAEvB,EAw6BG8F,eAzoBmB,SAACpL,GAAD,OACrBgD,EACE6D,EAAYN,MAAQ3B,EAAcC,EAClC7E,EACA+D,EAAMY,iBAAmB3B,EAAI6B,EAAgB7E,EAAM,IAAM,GAJtC,EA0oBnB2F,YACAlD,kBACI4D,cACF,OAAOA,CACR,EACGA,YAAQjH,GACViH,EAAUjH,CACX,EACGwF,kBACF,OAAOA,CACR,EACGA,gBAAYxF,GACdwF,EAAcxF,CACf,EACGyH,kBACF,OAAOA,CACR,EACGA,gBAAYzH,GACdyH,EAAczH,CACf,EACGyF,qBACF,OAAOA,CACR,EACGA,mBAAezF,GACjByF,EAAiBzF,CAClB,EACGuH,aACF,OAAOA,CACR,EACGA,WAAOvH,GACTuH,EAASvH,CACV,EACG2F,iBACF,OAAOA,CACR,EACGA,eAAW3F,GACb2F,EAAa3F,CACd,EACGqH,eACF,OAAOA,CACR,EACGA,aAASrH,GACXqH,EAAW,OAAH,wBACHA,GACArH,EAEN,GAEH4Z,UACA/S,YACA2U,aAxNA,SAACC,EAASC,GAAV,8CAAwB,WAAOC,GAAP,uBAAAlQ,EAAA,yDAClBkQ,IACFA,EAAEC,gBAAkBD,EAAEC,iBACtBD,EAAEE,SAAWF,EAAEE,WAEbC,GAAoB,EACpBjQ,EAAW,iBAAarG,GAE5Be,EAAUC,MAAMzB,KAAK,CACnB+Q,cAAc,IATM,UAahBzO,EAAS2P,SAbO,iCAcepK,IAdf,gBAcVzG,EAdU,EAcVA,OAAQQ,EAdE,EAcFA,OAChBhB,EAAWQ,OAASA,EACpB0F,EAAclF,EAhBI,yCAkBZsQ,EAAyBhQ,GAlBb,YAsBlBhD,EAAc0B,EAAWQ,UACzBzC,OAAOG,KAAK8B,EAAWQ,QAAQyL,OAAM,SAAChR,GAAD,OAAUgD,EAAIiI,EAAajL,EAA3B,IAvBnB,wBAyBlB2F,EAAUC,MAAMzB,KAAK,CACnBoB,OAAQ,CAAC,EACT2P,cAAc,IA3BE,UA6BZ2F,EAAQ5P,EAAa8P,GA7BT,wCA+BlBD,GA/BkB,uCA+BEA,EAAU/V,EAAWQ,OAAQwV,GA/B/B,QAgClBtU,EAASoO,kBACPjM,EACEvC,GACA,SAACpF,GAAD,OAAS+B,EAAI+B,EAAWQ,OAAQtE,EAAhC,GACA0F,EAAOJ,OApCO,gEAwCpB2U,GAAoB,EAxCA,8BA2CpBnW,EAAWyN,aAAc,EACzB7M,EAAUC,MAAMzB,KAAK,CACnBqO,aAAa,EACb0C,cAAc,EACdC,mBACE9R,EAAc0B,EAAWQ,SAAW2V,EACtCjG,YAAalQ,EAAWkQ,YAAc,EACtC1P,OAAQR,EAAWQ,SAlDD,6EAAxB,uDAyNAuG,MAjXwC,SACxC9L,EAIAY,GALwC,OAOxC2M,GAAWvN,GACP2F,EAAUmG,MAAM5H,UAAU,CACxBC,KAAM,SAACgX,GAAD,OACJnb,EACEqY,OACE5X,EACAG,GAEFua,EANE,IASR9C,EACErY,EACAY,GACA,EArBkC,EAkXxCwa,SAnmB8C,SAC9Cpb,EACAZ,GACY,IAAZ4J,EAAY,uDAAF,CAAC,EAEL5C,EAAQpD,EAAIqD,EAASrG,GACrBqb,EAAe1U,EAAOC,MAAMsP,IAAIlW,GAEtCkI,EAAItD,EAAa5E,EAAMZ,GAEnBic,GACF1V,EAAUiB,MAAMzC,KAAK,CACnBnE,OACA+F,OAAQnB,KAIPnC,EAAgByC,SAAWzC,EAAgB0C,cAC5C6D,EAAQ6P,cAERzB,EAAsBpX,EAAMZ,GAE5BuG,EAAUC,MAAMzB,KAAK,CACnBnE,OACAmF,YAAaJ,EAAWI,YACxBD,QAASgS,EAAUlX,EAAMZ,QAI7BgH,GAAUA,EAAME,IAAOhH,EAAkBF,GAErCsX,EAAc1W,EAAMZ,EAAO4J,GAAS,GADpCiQ,EAAUjZ,EAAMZ,EAAO4J,GAI7BiN,EAAejW,IAAS2F,EAAUC,MAAMzB,KAAK,CAAC,GAC9CwB,EAAUmG,MAAM3H,KAAK,CACnBnE,QAEH,EA8jBCoY,YACAkD,MArKwC,SACxCC,GACqB,IAArBC,EAAqB,uDAAF,CAAC,EAEdC,GAAwBpY,EAAckY,GACtCG,EAAgBH,GAAc1W,EAC9B8W,EAAqBtO,GAAYqO,GAMvC,GAJKF,EAAiBI,oBACpB/W,EAAiB6W,IAGdF,EAAiBK,WAAY,CAChC,GAAItD,GAAO,qBACU5R,EAAOJ,OADjB,IACT,IAAK,EAAL,qBAAiC,KAAtB,EAAsB,QACzBH,EAAQpD,EAAIqD,EAAS,GAC3B,GAAID,GAASA,EAAME,GAAI,CACrB,IAAM2R,EAAiB1Y,MAAMC,QAAQ4G,EAAME,GAAGyC,MAC1C3C,EAAME,GAAGyC,KAAK,GACd3C,EAAME,GAAGW,IAEb,IACEuI,GAAcyI,IACZA,EAAe6D,QAAQ,QAASR,QAClC,KACD,CAAC,SAAQ,CACX,CACF,CAdQ,+BAeV,CAED1W,EAAcb,EAAMY,iBAChB6W,EAAiBI,kBACfvO,GAAYxI,GACZ,CAAC,EACH8W,EACJtV,EAAU,CAAC,EAEXV,EAAUjB,QAAQP,KAAK,CACrB4B,OAAQ0V,EAAuBE,EAAqB9W,IAGtDc,EAAUmG,MAAM3H,KAAK,CAAC,GAEtBwB,EAAUiB,MAAMzC,KAAK,CACnB4B,OAAQ4V,GAEX,CAEDhV,EAAS,CACPJ,MAAO,IAAI+G,IACX+H,QAAS,IAAI/H,IACb1G,MAAO,IAAI0G,IACXxB,MAAO,IAAIwB,IACXzB,UAAU,EACV1E,MAAO,IAGTxB,EAAUC,MAAMzB,KAAK,CACnB8Q,YAAauG,EAAiBO,gBAC1BhX,EAAWkQ,YACX,EACJ/P,QAASsW,EAAiBxB,UACtBjV,EAAWG,UACXsW,EAAiBI,oBAChBxN,GAAUmN,EAAY1W,GAE3B2N,cAAagJ,EAAiBQ,iBAC1BjX,EAAWyN,YAEfrN,YAAaqW,EAAiBxB,UAC1BjV,EAAWI,YACTqW,EAAiBI,mBAAqBL,EACpCzY,OAAOmZ,QAAQV,GAAYva,QACzB,SAAC8P,EAAD,0BAAY7P,EAAZ,KAAiB7B,EAAjB,YAAuB,+BAClB0R,GADkB,eAEpB7P,EAAM7B,IAAU4D,EAAI6B,EAAgB5D,IAFvC,GAIA,CAAC,GAEH,CAAC,EACTmE,cAAeoW,EAAiBvB,YAC5BlV,EAAWK,cACV,CAAC,EACNG,OAAQiW,EAAiBU,WACrBnX,EAAWQ,OACV,CAAC,EACN2P,cAAc,EACdC,oBAAoB,IAGtBtO,EAAYN,OACT9D,EAAgB6C,WAAakW,EAAiBrB,YACjDtT,EAAYiF,QAAU/H,EAAMY,gBAC7B,EAyECwX,YAnZoD,SAACnc,GACrDA,EACIwD,EAAsBxD,GAAMwY,SAAQ,SAAC4D,GAAD,OAClC1M,GAAM3K,EAAWQ,OAAQ6W,EADS,IAGnCrX,EAAWQ,OAAS,CAAC,EAE1BI,EAAUC,MAAMzB,KAAK,CACnBoB,OAAQR,EAAWQ,OACnBD,SAAS,GAEZ,EAyYCyB,cACAsV,SAxY8C,SAACrc,EAAM0H,EAAOsB,GAC5D,IAAM/B,GAAQjE,EAAIqD,EAASrG,EAAM,CAAEsG,GAAI,CAAC,IAAeA,IAAM,CAAC,GAAGW,IAEjEiB,EAAInD,EAAWQ,OAAQvF,EAAI,+BACtB0H,GAAK,CACRT,SAGFtB,EAAUC,MAAMzB,KAAK,CACnBnE,OACAuF,OAAQR,EAAWQ,OACnBD,SAAS,IAGX0D,GAAWA,EAAQC,aAAehC,GAAOA,EAAIE,OAASF,EAAIE,OAC3D,EA0XCmV,SA1E8C,SAACtc,GAC/C,IAAMoG,EAAQpD,EAAIqD,EAASrG,GAAMsG,IAChCF,EAAMa,IAAIE,MAAQf,EAAMa,IAAMb,EAAM2C,KAAK,IAAI5B,OAC/C,EAyEH,CC9pCSoV,CAAkBxY,IAAM,CAC3BvB,cAIJ,IAAMkC,EAAUsQ,EAAa9U,QAAQwE,QAyCrC,OAvCAL,EAAa,CACXJ,QAASS,EAAQiB,UAAUC,MAC3BxB,SAAU,SAAC5B,GACLkD,EAAsBlD,EAAWkC,EAAQjC,iBAAiB,KAC5DiC,EAAQK,WAAU,+BACbL,EAAQK,YACRvC,GAGLwC,EAAgB,OAAD,UAAMN,EAAQK,aAEhC,IAGH,aAAgB,WACTL,EAAQmC,YAAYN,QACvB7B,EAAQjC,gBAAgB6C,SAAWZ,EAAQwH,eAC3CxH,EAAQmC,YAAYN,OAAQ,GAE1B7B,EAAQmC,YAAYiF,QACtBpH,EAAQmC,YAAYiF,OAAQ,EAC5BpH,EAAQiB,UAAUC,MAAMzB,KAAK,CAAC,IAEhCO,EAAQ8V,kBACT,IAED,aACE,kBAAM,kBACJ1X,OAAOiD,OAAOrB,EAAQiB,WAAW6S,SAAQ,SAACvU,GAAD,OACvCA,EAAQJ,aAD+B,GADrC,CAAN,GAIA,CAACa,IAGHsQ,EAAa9U,QAAQsC,UAAYqD,EAC/BrD,EACAkC,EAAQjC,iBAGHuS,EAAa9U,OACtB,C","file":"static/js/0.1ebe5371.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T>(name?: T, signalName?: string) =>\n  !name ||\n  !signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, TearDown } from './utils/createSubject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, _name.current)),\n    skipEarlySubscription: true,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport { FieldValues, UseFormStateProps, UseFormStateReturn } from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(_name.current, formState.name) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n    skipEarlySubscription: true,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n    skipEarlySubscription: true,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      setFields(updatedFieldArrayValuesWithKey);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type Subscription = {\n  add: (tearDown: TearDown) => void;\n  unsubscribe: () => void;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nfunction createSubscription() {\n  let tearDowns: TearDown[] = [];\n\n  const add = (tearDown: TearDown) => {\n    tearDowns.push(tearDown);\n  };\n\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n    tearDowns = [];\n  };\n\n  return {\n    add,\n    unsubscribe,\n  };\n}\n\nfunction createSubscriber<T>(\n  observer: Observer<T>,\n  subscription: Subscription,\n): Observer<T> {\n  let closed = false;\n  subscription.add(() => (closed = true));\n\n  const next = (value: T) => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n\n  return {\n    next,\n  };\n}\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>) => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n    _observers.push(subscriber);\n    return subscription;\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  React.useEffect(\n    () => () =>\n      Object.values(control._subjects).forEach((subject) =>\n        subject.unsubscribe(),\n      ),\n    [control],\n  );\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}