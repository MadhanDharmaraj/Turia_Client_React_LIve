{"version":3,"sources":["views/apps/proposal/add/AddCard.js","views/apps/proposal/add/index.js","views/apps/proposal/helper/hepler.js","views/apps/proposal/store/index.js"],"names":["activeOrgId","activeOrganizationid","activeOrg","activeOrganization","userId","orgUserId","AddCard","useState","clientOptions","setClientOptions","serviceOptions","setServiceOptions","taxGroupOptions","setTaxGroupOptions","stateOptions","setStateOptions","accountOptions","setAccountOptions","finalTotal","setFinalTotal","finalSubTotal","setFinalSubTotal","invoiceItems","setInvoiceItems","selectedClient","setSelectedClient","taxValues","setTaxValues","accDetails","setAccDetails","invoiceTaxes","setInvoiceTaxes","exemptionReasonOptions","setExemptionReasonOptions","navigate","useNavigate","dispatch","useDispatch","store","useSelector","state","invoice","useEffect","axios","post","then","response","arr","data","clients","services","taxgroups","exemptionreasons","transactionaccounts","states","getClientData","id","a","getClient","res","payload","schema","yup","shape","createdBy","default","contactId","required","uniqueIdentity","contactEmail","contactName","invoiceDate","paymentDue","placeOfSupplyId","subTotalAmount","totalAmount","totalTaxAmount","organizationId","isRcmApplicable","dueAmount","billingAddressLine1","billingAddressLine2","billingAddressState","billingAddressCity","billingAddressZipCode","billingCurrencyId","bankAccountBankName","bankAccountBranchName","bankAccountHolderName","bankAccountId","bankAccountIfscCode","bankAccountNumber","organizationAddressLine1","addressline1","organizationAddressLine2","addressline2","organizationCity","organizationcity","organizationState","statename","organizationZipCode","pinzipcode","organizationName","name","organizationImageUrl","organizationStateCode","stateshortname","organizationGstin","gstin","note","status","calculateTaxes","paymentStatus","rows","of","serviceId","invoiceId","sacCode","price","exemptionReasonId","nullable","isTaxApplicable","actualPrice","taxGroupId","taxes","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","useFieldArray","fields","append","remove","update","onSubmit","temp","addInvoice","InvoiceItems","forEach","obj","key","addInvoiceItems","addItem","taxPrice","description","length","ItemFinalTotalAmount","items","_formValues","finalsubTotalAmount","finalTaxAmount","parseFloat","output","map","parser","flat","reduce","acc","item","undefined","existItem","find","taxName","taxAmount","push","Object","assign","JSON","stringify","calculateInvoiceTax","loadItemData","ind","desFlg","priceFlg","sacFlg","taxFlg","itemFlg","eachObj","selectedService","saccode","sellingprice","String","taxgroupid","exemptionreasonid","calculateTaxAmount","invoice_item_taxes","taxGroups","nontaxableflag","istaxapplicable","taxid","calculateTax","percentage","dataTemp","parseInt","toFixed","taxvaluefn","taxtype","stateid","taxType","type","taxvalues","getTaxValue","keys","billingaddresscity","billingaddressline1","billingaddressstatesname","billingaddresszip","currencyid","currenciessymbol","currenciescode","currenciesname","email","placeofsupplyid","className","xl","md","sm","ErrorText","Array","isArray","message","renderError","color","Math","floor","random","content","charAt","renderOrg","size","value","placeholder","disabled","render","field","onChange","date","dateStr","options","altInput","altFormat","dateFormat","ref","inputRef","classnames","classNamePrefix","c","val","getOptionLabel","option","getOptionValue","billingaddressline2","bankName","accountHolderName","branchAddress","ifscCode","index","rules","invalid","onInput","lg","console","log","onClick","order","xs","for","block","outline","tag","Link","to","accountNumber","bankAccountfn","InvoiceAdd","amount","taxRateInPercentage","TaxType","calculatedTax","str","parse","replace","getData","createAsyncThunk","params","taskinvoices","totalPages","total","rejectWithValue","invoices","getExceptionPayload","taskinvoiceitems","getInvoice","getInvoiceItems","updateInvoice","invoicetaxes","invoiceitemtaxes","updateInvoiceItems","deleteInvoice","getState","updatedBy","deleteInvoiceItem","createSlice","initialState","allData","selectedInvoice","reducers","extraReducers","builder","addCase","fulfilled","action"],"mappings":"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","file":"static/js/58.34ebec04.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Reactstrap Imports\nimport { Row, Col, Card, Input, Label, Button, CardBody, CardText, InputGroup, InputGroupText, FormFeedback } from 'reactstrap'\nimport classnames from 'classnames'\n\nimport { addInvoice, addInvoiceItems, getClient } from '../store/index'\nimport Avatar from '@components/avatar'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { calculateTax, parser } from '../helper/hepler'\nimport { Link, useNavigate } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\nconst noteText =\n  'It was a pleasure working with you and your team. We hope you will keep us in mind for future freelance projects. Thank You!'\n\n\nconst AddCard = () => {\n\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [accountOptions, setAccountOptions] = useState([])\n  const [finalTotal, setFinalTotal] = useState(0)\n  const [finalSubTotal, setFinalSubTotal] = useState(0)\n\n  const [invoiceItems, setInvoiceItems] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [taxValues, setTaxValues] = useState([])\n  const [accDetails, setAccDetails] = useState([])\n  const [invoiceTaxes, setInvoiceTaxes] = useState([])\n  const [exemptionReasonOptions, setExemptionReasonOptions] = useState([])\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const store = useSelector(state => state.invoice)\n  const getClients = () => {\n    axios.post('/clients/dropdown').then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown').then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const getTaxValue = (taxType) => {\n    const data = {\n      type: taxType\n    }\n    axios.post('/taxvalues/list', data).then(response => {\n      const arr = response.data\n      setTaxValues(arr.taxvalues)\n    })\n  }\n\n  const getExemptionReason = () => {\n    axios.post('/exemptionreasons/dropdown').then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n  const getBankAccounts = () => {\n    axios.post('/transactionaccounts/dropdown').then(response => {\n      const arr = response.data\n      setAccountOptions(arr.transactionaccounts)\n    })\n  }\n\n  useEffect(() => {\n    // ** Get Clients\n    getClients()\n    getServices()\n    getTaxGroups()\n    getExemptionReason()\n    getBankAccounts()\n    getStates()\n\n  }, [])\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n  }\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    contactId: yup.number().required(\"Please select a Client\"),\n    uniqueIdentity: yup.string(),\n    contactEmail: yup.string(),\n    contactName: yup.string(),\n    invoiceDate: yup.number(),\n    paymentDue: yup.number(),\n    placeOfSupplyId: yup.number().required(\"Please select a Place Of Supply\"),\n    subTotalAmount: yup.string(),\n    totalAmount: yup.string(),\n    totalTaxAmount: yup.string(),\n    organizationId: yup.number().default(activeOrgId),\n    isRcmApplicable: yup.boolean().default(false),\n    dueAmount: yup.string(),\n    billingAddressLine1: yup.string(),\n    billingAddressLine2: yup.string(),\n    billingAddressState: yup.string(),\n    billingAddressCity: yup.string(),\n    billingAddressZipCode: yup.string(),\n    billingCurrencyId: yup.number(),\n    bankAccountBankName: yup.string(),\n    bankAccountBranchName: yup.string(),\n    bankAccountHolderName: yup.string(),\n    bankAccountId: yup.string().required('Please Select Account'),\n    bankAccountIfscCode: yup.string(),\n    bankAccountNumber: yup.string(),\n    organizationAddressLine1: yup.string().default(activeOrg.addressline1),\n    organizationAddressLine2: yup.string().default(activeOrg.addressline2),\n    organizationCity: yup.string().default(activeOrg.organizationcity),\n    organizationState: yup.string().default(activeOrg.statename),\n    organizationZipCode: yup.string().default(activeOrg.pinzipcode),\n    organizationName: yup.string().default(activeOrg.name),\n    organizationImageUrl: yup.string().default(''),\n    organizationStateCode: yup.string().default(activeOrg.stateshortname),\n    organizationGstin: yup.string().default(activeOrg.gstin),\n    gstin: yup.string(),\n    note: yup.string().default(noteText),\n    status: yup.number().default(4),\n    calculateTaxes: yup.string(),\n    paymentStatus: yup.number().default(5),\n    rows: yup.array().of(\n      yup.object().shape({\n        serviceId: yup.number().required(\"Please Select Service Item\"),\n        invoiceId: yup.number(),\n        sacCode: yup.string(),\n        price: yup.string(),\n        organizationId: yup.number().default(activeOrgId),\n        exemptionReasonId: yup.number().nullable(),\n        isTaxApplicable: yup.boolean().default(true),\n        actualPrice: yup.string().required(),\n        taxGroupId: yup.number().required(\"Pleace Select Tax\"),\n        subTotalAmount: yup.string().required(1),\n        taxes: yup.string()\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove, update } = useFieldArray({ control, name: 'rows' })\n\n  const onSubmit = async data => {\n    const temp = data.rows\n    setInvoiceItems(temp)\n    delete data.rows\n    await dispatch(addInvoice(data))\n  }\n\n  const InvoiceItems = async (id) => {\n    invoiceItems.forEach((obj, key) => {\n      invoiceItems[key].invoiceId = id\n    })\n    await dispatch(addInvoiceItems(invoiceItems))\n    navigate(`/proposal/view/${store.invoiceId}`)\n  }\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', exemptionReasonId: 0, isTaxApplicable: true, sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '' })\n  })\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n  useEffect(async () => {\n    if (store.invoiceId !== null && invoiceItems.length > 0) {\n      await InvoiceItems(store.invoiceId)\n    }\n  }, [store.invoiceId])\n\n  const calculateInvoiceTax = () => {\n\n    const inputArray = control._formValues.rows.map(a => parser(a.taxes))\n    let temp = []\n    temp = inputArray.flat()\n    let output = []\n    output = temp.reduce((acc, item) => {\n      if (item !== undefined) {\n        const existItem = acc.find((obj) => {\n          return item.taxName === obj.taxName\n        })\n        if (existItem) {\n          existItem.taxAmount = parseFloat(existItem.taxAmount) + parseFloat(item.taxAmount)\n        } else {\n          acc.push(Object.assign({}, item))\n        }\n      }\n      return acc\n    }, [])\n\n    setInvoiceTaxes(output)\n    setValue('calculateTaxes', JSON.stringify(output))\n\n  }\n\n  const ItemFinalTotalAmount = () => {\n\n    const items = control._formValues.rows\n    let finalTotal = 0\n    let finalsubTotalAmount = 0\n    let finalTaxAmount = 0\n    items.forEach(obj => {\n      finalTotal = parseFloat(obj.subTotalAmount) + parseFloat(finalTotal)\n      finalsubTotalAmount = parseFloat(obj.price) + parseFloat(finalsubTotalAmount)\n      finalTaxAmount = parseFloat(finalTaxAmount) + parseFloat(obj.taxPrice)\n    })\n\n    control._formValues.subTotalAmount = finalsubTotalAmount\n    control._formValues.totalAmount = finalTotal\n    control._formValues.dueAmount = finalTotal\n    control._formValues.totalTaxAmount = finalTaxAmount\n\n    setFinalTotal(finalTotal)\n    setFinalSubTotal(finalsubTotalAmount)\n\n    calculateInvoiceTax()\n  }\n\n  const removeItem = ((ind) => {\n    remove(ind)\n    ItemFinalTotalAmount()\n  })\n\n  const loadItemData = (ind, desFlg = false, priceFlg = false, sacFlg = false, taxFlg = false, itemFlg = false) => {\n    const eachObj = control._formValues.rows[ind]\n    if (eachObj.serviceId === undefined || eachObj.serviceId === '') {\n      return false\n    }\n\n    const selectedService = serviceOptions.find((a) => a.id === eachObj.serviceId)\n    if (itemFlg) {\n      eachObj['sacCode'] = selectedService.saccode\n      eachObj['actualPrice'] = selectedService.sellingprice | 0\n      eachObj['price'] = String(selectedService.sellingprice) | 0\n      eachObj['taxGroupId'] = selectedService.taxgroupid\n      eachObj['description'] = selectedService.description\n      eachObj['exemptionReasonId'] = selectedService.exemptionreasonid\n    } else {\n      eachObj['sacCode'] = sacFlg ? eachObj.sacCode : selectedService.saccode\n      eachObj['price'] = priceFlg ? eachObj.price : selectedService.sellingprice | 0\n      eachObj['actualPrice'] = String(selectedService.sellingprice) | 0\n      eachObj['taxGroupId'] = taxFlg ? eachObj.taxGroupId : selectedService.taxgroupid\n      eachObj['description'] = desFlg ? eachObj.description : selectedService.description\n      eachObj['exemptionReasonId'] = selectedService.exemptionreasonid\n    }\n\n    let calculateTaxAmount = 0\n    const invoice_item_taxes = []\n\n    const taxGroups = taxGroupOptions.find((a) => a.id === eachObj.taxGroupId)\n    eachObj['isTaxApplicable'] = taxGroups !== undefined ? !taxGroups.nontaxableflag : selectedService.istaxapplicable\n\n    if (eachObj.isTaxApplicable) {\n      if (taxGroups !== undefined) {\n        taxValues.forEach(obj => {\n          if (obj.taxid === eachObj['taxGroupId']) {\n            let temp = 0\n            temp = calculateTax(eachObj.price, obj.percentage, 2)\n            calculateTaxAmount = parseFloat(calculateTaxAmount) + parseFloat(temp)\n            const dataTemp = {}\n            dataTemp[\"taxName\"] = `${obj.name} (${obj.percentage}%)`\n            dataTemp[\"taxId\"] = parseInt(obj.id)\n            dataTemp[\"taxNameValue\"] = obj.name\n            dataTemp[\"taxPercentage\"] = String(obj.percentage)\n            dataTemp[\"taxAmount\"] = String(temp)\n\n            invoice_item_taxes.push(dataTemp)\n          }\n        })\n      }\n    }\n\n    eachObj['subTotalAmount'] = String(parseFloat(parseFloat(calculateTaxAmount | 0) + parseFloat(eachObj.price | 0)).toFixed(2))\n    eachObj['taxPrice'] = parseFloat(calculateTaxAmount).toFixed(2)\n    eachObj['taxes'] = JSON.stringify(invoice_item_taxes)\n    eachObj['createdBy'] = userId\n\n    update(ind, eachObj)\n\n    ItemFinalTotalAmount()\n\n  }\n\n  const taxvaluefn = () => {\n    let taxtype = 1\n    if (activeOrg.stateid === control._formValues.placeOfSupplyId) {\n      taxtype = 2\n    }\n\n    getTaxValue(taxtype)\n\n  }\n\n  useEffect(() => {\n    if (taxValues.length > 0) {\n      control._formValues.rows.forEach((obj, ind) => {\n        loadItemData(ind, false, false, false, false, false)\n      })\n    }\n  }, [taxValues])\n\n  const bankAccountfn = (id) => {\n    const acc = accountOptions.find((obj) => obj.id === id)\n    setAccDetails(acc)\n    setValue('bankAccountBankName', acc.bankName)\n    setValue('bankAccountBranchName', acc.branchAddress)\n    setValue('bankAccountHolderName', acc.accountHolderName)\n    setValue('bankAccountId', acc.id)\n    setValue('bankAccountIfscCode', acc.ifscCode)\n    setValue('bankAccountNumber', acc.accountNumber)\n  }\n\n  useEffect(() => {\n    if (Object.keys(selectedClient).length > 0) {\n      setValue('billingAddressCity', selectedClient.billingaddresscity)\n      setValue('billingAddressLine1', selectedClient.billingaddressline1)\n      setValue('billingAddressLine2', selectedClient.billingaddressline1)\n      setValue('billingAddressState', selectedClient.billingaddressstatesname)\n      setValue('billingAddressZipCode', selectedClient.billingaddresszip)\n      setValue('billingCurrencyId', parseInt(selectedClient.currencyid))\n      setValue('billingCurrencySymbol', selectedClient.currenciessymbol)\n      setValue('billingCurrencyShortName', selectedClient.currenciescode)\n      setValue('billingCurrencyName', selectedClient.currenciesname)\n      setValue('contactEmail', selectedClient.email)\n      setValue('gstin', selectedClient.gstin)\n      setValue('contactName', selectedClient.name)\n      setValue('placeOfSupplyId', selectedClient.placeofsupplyid)\n      taxvaluefn()\n    }\n\n  }, [selectedClient])\n\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        if (key !== 'rows') {\n          ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n        }\n      })\n    }\n    return ErrorText\n  }\n\n  const renderOrg = name => {\n    const stateNum = Math.floor(Math.random() * 6),\n      states = ['light-success', 'light-danger', 'light-warning', 'light-info', 'light-primary', 'light-secondary'],\n      color = states[stateNum]\n    return <Avatar color={color} className='me-50' content={name !== null ? name.charAt(0) : ''} />\n\n  }\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Row className='invoice-add'>\n        <Fragment>\n          <Col xl={10} md={8} sm={12}>\n\n            <Card className='invoice-preview-card'>\n\n              {/* Header */}\n              <CardBody className='invoice-padding pb-0'>\n                {\n                  renderError()\n                }\n                <div className='d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0'>\n                  <div>\n                    <div className='logo-wrapper'>\n                      {renderOrg(activeOrg.name)}\n                    </div>\n                    <h3 className='text-primary invoice-logo'>{activeOrg.name}</h3>\n                    <p className='card-text mb-25'>{activeOrg.addressline1}</p>\n                    <p className='card-text mb-25'>{activeOrg.addressline2}</p>\n                    <p className='card-text mb-0'>{activeOrg.organizationcity} - {activeOrg.pinzipcode}</p>\n                    <p className='card-text mb-0'>{activeOrg.statename}</p>\n                  </div>\n                  <div className='invoice-number-date mt-md-0 mt-2'>\n                    <div className='d-flex align-items-center justify-content-md-end mb-1'>\n                      <span className='title'>Proposal:</span>\n                      <InputGroup className='input-group-merge invoice-edit-input-group disabled'>\n                        <InputGroupText>\n                          <Hash size={15} />\n                        </InputGroupText>\n                        <Input\n                          type='number'\n                          className='invoice-edit-input'\n                          value={3171}\n                          placeholder='53634'\n                          disabled\n                        />\n                      </InputGroup>\n                    </div>\n                    <div className='d-flex align-items-center mb-1'>\n                      <span className='title'>Proposal Date:</span>\n                      <Controller\n                        control={control}\n                        name={`invoiceDate`}\n                        id='invoiceDate'\n                        render={({ field }) => (\n                          <Flatpickr\n                            value={field.value}\n                            onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                            options={{ altInput: true, altFormat: \"M j, Y\", dateFormat: \"U\" }}\n                            className='form-control invoice-edit-input date-picker'\n                          />\n                        )}\n                      />\n                    </div>\n                    <div className='d-flex align-items-center'>\n                      <span className='title'>Due Date:</span>\n                      <Controller\n                        control={control}\n                        name={`paymentDue`}\n                        id='paymentDue'\n                        render={({ field }) => (\n                          <Flatpickr\n                            value={field.value}\n                            onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                            options={{ altInput: true, altFormat: \"M j, Y\", dateFormat: \"U\" }}\n                            className='form-control invoice-edit-input due-date-picker'\n                          />\n                        )}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardBody>\n              {/* /Header */}\n\n              <hr className='invoice-spacing' />\n\n              {/* Address and Contact */}\n              <CardBody className='invoice-padding pt-0'>\n                <Row className='row-bill-to invoice-spacing'>\n                  <Col className='col-bill-to ps-0' xl='6'>\n                    <h6 className='invoice-to-title'>Proposal To:</h6>\n                    <div className='invoice-customer'>\n                      <Controller\n                        control={control}\n                        name={`contactId`}\n                        id={`contactId`}\n                        render={({ field, ref }) => (\n                          <Select\n                            inputRef={ref}\n                            className={classnames('react-select', { 'is-invalid': errors['contactId'] })}\n                            {...field}\n                            classNamePrefix='select'\n                            options={clientOptions}\n                            value={clientOptions.find(c => { return c.id === field.value })}\n                            onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                            getOptionLabel={(option) => option.name}\n                            getOptionValue={(option) => option.id}\n                          />\n                        )}\n                      />\n                    </div>\n                    <Col className='pe-0 mt-xl-2' xl='4'>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td>{selectedClient.billingaddressline1}</td>\n                          </tr>\n                          <tr>\n                            <td>{selectedClient.billingaddressline2}</td>\n                          </tr>\n                          <tr>\n                            <td>{selectedClient.billingaddresscity} {selectedClient.billingaddresszip && `-`}  {selectedClient.billingaddresszip}</td>\n                          </tr>\n                          <tr>\n                            <td>{selectedClient.billingaddressstatesname}</td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Col>\n                  <Col className='col-bill-to ps-0' xl='2'></Col>\n                  <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                    <h6 className='mb-2'>Payment Details:</h6>\n                    <table>\n                      <tbody>\n                        <tr>\n                          <td className='pe-1'>Bank Name:</td>\n                          <td>\n                            {accDetails.bankName && <span className='fw-bolder'>{accDetails.bankName}</span>}\n                          </td>\n                        </tr>\n                        <tr>\n                          <td className='pe-1'>Account name:</td>\n                          <td>{accDetails.accountHolderName && <span className='fw-bolder'>{accDetails.accountHolderName}</span>}</td>\n                        </tr>\n                        <tr>\n                          <td className='pe-1'>Branch Name:</td>\n                          <td> {accDetails.branchAddress && <span className='fw-bolder'>{accDetails.branchAddress}</span>}</td>\n                        </tr>\n                        <tr>\n                          <td className='pe-1'>IFSC Code:</td>\n                          <td>{accDetails.ifscCode && <span className='fw-bolder'>{accDetails.ifscCode} </span>}</td>\n                        </tr>\n                        {selectedClient.currenciescode &&\n                          <tr>\n                            <td className='pe-1'>Currency code:</td>\n                            <td>{selectedClient.currenciescode}</td>\n                          </tr>\n                        }\n                      </tbody>\n                    </table>\n                  </Col>\n                </Row>\n                <Row className='row-bill-to invoice-spacing'>\n                  <Col className='col-bill-to ps-0' xl='6'>\n                    <h6 className='invoice-to-title mt-2'>Place Of Supply:</h6>\n                    <div className='invoice-customer'>\n                      <Controller\n                        control={control}\n                        name={`placeOfSupplyId`}\n                        id={`placeOfSupplyId`}\n                        render={({ field, ref }) => (\n                          <Select\n                            inputRef={ref}\n                            className={classnames('react-select', { 'is-invalid': errors['placeOfSupplyId'] })}\n                            {...field}\n                            classNamePrefix='select'\n                            options={stateOptions}\n                            value={stateOptions.find(c => { return c.id === field.value })}\n                            onChange={val => { field.onChange(val.id); taxvaluefn() }}\n                            getOptionLabel={(option) => option.name}\n                            getOptionValue={(option) => option.id}\n                          />\n                        )}\n                      />\n                    </div>\n                    {(selectedClient.gstin !== '' && selectedClient.gstin !== undefined) && <div className='mt-1'> GSTIN : {selectedClient.gstin}</div>}\n                  </Col>\n                  <Col className='col-bill-to ps-0' xl='2'></Col>\n                  <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                    <table>\n                      <tbody>\n                        <tr>\n                          <td className='pe-1'>RCM Applicable:</td>\n                          <td>\n                            <div className='form-switch form-check-success'>\n                              <Controller\n                                control={control}\n                                name={`isRcmApplicable`}\n                                id='isRcmApplicable'\n                                render={({ }) => (\n                                  <Input type='switch' id='switch-success'  />\n                                )}\n                              />\n                            </div></td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </Col>\n                </Row>\n              </CardBody>\n              {/* /Address and Contact */}\n\n              {/* Product Details */}\n              <CardBody className='invoice-padding invoice-product-details'>\n                {fields.map((item, index) => {\n                  return (\n                    <div key={item.id} className='repeater-wrapper'>\n                      <Row>\n                        <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                          <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                            <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-12'>\n                              <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                              <Controller\n                                control={control}\n                                name={`rows[${index}].serviceId`}\n                                rules={{ required: true }}\n                                render={({ field, ref }) => (\n                                  <Select\n                                    {...field}\n                                    inputRef={ref}\n                                    className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.serviceId })}\n                                    classNamePrefix='select'\n                                    options={serviceOptions}\n                                    value={serviceOptions.find(c => c.id === field.value)}\n                                    onChange={val => { field.onChange(val.id); loadItemData(index, false, false, false, false, true) }}\n                                    getOptionLabel={(option) => option.name}\n                                    getOptionValue={(option) => option.id}\n                                  />\n                                )}\n                              />\n                              {errors.rows?.[index]?.serviceId && <FormFeedback>{errors.rows?.[index]?.serviceId.message}</FormFeedback>}\n                              <Controller\n                                id={`rows_${index}_description`}\n                                name={`rows[${index}].description`}\n                                control={control}\n                                render={({ field }) => <Input className='mt-1' invalid={errors.rows?.[index]?.description && true} onInput={(val) => { field.onChange(val); loadItemData(index, true, false, false, false, false) }} {...field} />}\n                              />\n                            </Col>\n                            <Col className='my-lg-0 my-2 col-lg-2 col-sm-12'>\n                              <CardText className='col-title mb-md-2 mb-0'>SAC Code</CardText>\n                              <Controller\n                                id={`rows_${index}_sacCode`}\n                                name={`rows[${index}].sacCode`}\n                                control={control}\n                                render={({ field }) => <Input type='text' invalid={errors.rows?.[index]?.sacCode && true} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, true, false, false) }} {...field} />}\n                              />\n                              {errors.rows?.[index]?.sacCode && <FormFeedback>{errors.rows?.[index]?.sacCode.message}</FormFeedback>}\n                            </Col>\n                            <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                              <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                              <Controller\n                                id={`rows_${index}_price`}\n                                name={`rows[${index}].price`}\n                                control={control}\n                                render={({ field }) => <Input type='number' id={`input_rows_${index}_price`} onInput={(val) => { field.onChange(val); console.log(val); loadItemData(index, false, true, false, false, false) }} {...field} invalid={errors.rows?.[index]?.price && true} />}\n                              />\n                              {errors.rows?.[index]?.price && <FormFeedback>{errors.rows?.[index]?.price.message}</FormFeedback>}\n                            </Col>\n                            <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                              <CardText className='col-title mb-md-50 mb-0'>Tax Rate</CardText>\n                              <Controller\n                                control={control}\n                                name={`rows[${index}].taxGroupId`}\n                                rules={{ required: true }}\n                                render={({ field, ref }) => (\n                                  <Select\n                                    {...field}\n                                    inputRef={ref}\n                                    className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                    classNamePrefix='select'\n                                    options={taxGroupOptions}\n                                    value={taxGroupOptions.find(c => c.id === field.value)}\n                                    onChange={(val) => { field.onChange(val.id); loadItemData(index, false, true, false, true, false) }}\n                                    getOptionLabel={(option) => option.name}\n                                    getOptionValue={(option) => option.id}\n                                  />\n                                )}\n                              />\n                              {errors.rows?.[index]?.taxGroupId && <FormFeedback>{errors.rows?.[index]?.taxGroupId.message}</FormFeedback>}\n\n                              {\n                                !item.isTaxApplicable && <Controller\n                                  control={control}\n                                  name={`rows[${index}].exemptionReasonId`}\n                                  rules={{ required: true }}\n                                  render={({ field, ref }) => (\n                                    <Select\n                                      {...field}\n                                      inputRef={ref}\n                                      className={classnames('react-select mt-1', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                      classNamePrefix='select'\n                                      options={exemptionReasonOptions}\n                                      value={exemptionReasonOptions.find(c => c.id === field.value)}\n                                      onChange={(val) => { field.onChange(val.id) }}\n                                      getOptionLabel={(option) => option.name}\n                                      getOptionValue={(option) => option.id}\n                                    />\n                                  )}\n                                />\n                              }\n\n                            </Col>\n                            <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                              <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                              {item.subTotalAmount}\n                            </Col>\n                          </Row>\n                          <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                            <X size={18} className='cursor-pointer' onClick={() => { removeItem(index) }} />\n                          </div>\n                        </Col>\n                      </Row>\n                    </div>\n                  )\n                })}\n                <Row className='mt-1'>\n                  <Col sm='12' className='px-0'>\n                    <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                      <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                    </Button>\n                  </Col>\n                </Row>\n              </CardBody>\n\n              {/* /Product Details */}\n\n              {/* Invoice Total */}\n              <CardBody className='invoice-padding'>\n                <Row className='invoice-sales-total-wrapper'>\n                  <Col className='mt-md-0 mt-3' md={{ size: '6', order: 1 }} xs={{ size: 12, order: 2 }}>\n\n                  </Col>\n                  <Col className='d-flex justify-content-end' md={{ size: '6', order: 2 }} xs={{ size: 12, order: 1 }}>\n                    <div className='invoice-total-wrapper'>\n                      <div className='invoice-total-item'>\n                        <p className='invoice-total-title'>Pre Tax Amount:</p>\n                        <p className='invoice-total-amount'>{finalSubTotal}</p>\n                      </div>\n                      {\n                        invoiceTaxes.map((obj, ind) => {\n                          return (<div key={ind} className='invoice-total-item'>\n                            <p className='invoice-total-title'>{obj?.taxName}</p>\n                            <p className='invoice-total-amount'>{obj?.taxAmount}</p>\n                          </div>)\n                        })\n                      }\n                      <hr className='my-50' />\n                      <div className='invoice-total-item'>\n                        <p className='invoice-total-title'>Total Payable:</p>\n                        <p className='invoice-total-amount'>{finalTotal}</p>\n                      </div>\n                    </div>\n                  </Col>\n                </Row>\n              </CardBody>\n              {/* /Invoice Total */}\n\n              <hr className='invoice-spacing mt-0' />\n\n              {/* Invoice Note */}\n              <CardBody className='invoice-padding py-0'>\n                <Row>\n                  <Col>\n                    <div className='mb-2'>\n                      <Label for='note' className='form-label fw-bold'>\n                        Note:\n                      </Label>\n                      <Controller\n                        id='note'\n                        name='note'\n                        control={control}\n                        render={({ field }) => <Input type=\"textarea\" value={field.value} invalid={errors.note && true} {...field} />}\n                      />\n                    </div>\n                  </Col>\n                </Row>\n              </CardBody>\n              {/* /Invoice Note */}\n            </Card>\n\n          </Col>\n          <Col xl={2} md={4} sm={12}>\n            <Card className='invoice-action-wrapper'>\n              <CardBody>\n                <Button color='primary' type='submit' block outline className='mb-75'>\n                  Save\n                </Button>\n                <Button color='warning' block outline tag={Link} to='/invoice/list'>\n                  Cancel\n                </Button>\n              </CardBody>\n            </Card>\n            <div className='mt-2'>\n              <div className='invoice-payment-option'>\n                <p className='mb-50'>Accept payments via</p>\n                <Controller\n                  control={control}\n                  name={`bankAccountId`}\n                  rules={{ required: true }}\n                  render={({ field, ref }) => (\n                    <Select\n                      {...field}\n                      inputRef={ref}\n                      className={classnames('react-select mt-1', { 'is-invalid': errors.bankAccountId })}\n                      classNamePrefix='select'\n                      options={accountOptions}\n                      value={accountOptions.find(c => c.id === field.value)}\n                      onChange={(val) => { field.onChange(val.id); bankAccountfn(val.id) }}\n                      getOptionLabel={(option) => option.accountHolderName}\n                      getOptionValue={(option) => option.id}\n                    />\n                  )}\n                />\n              </div>\n            </div>\n          </Col>\n        </Fragment >\n      </Row>\n    </form >\n\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst InvoiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <AddCard />\n    </div>\n  )\n}\n\nexport default InvoiceAdd\n","export const calculateTax = (amount, taxRateInPercentage, TaxType) => {\n    let calculatedTax = 0\n    if (TaxType === 1) { //Inclusive\n        calculatedTax = parseFloat(amount) - (parseFloat(amount) * (100 / (100 + parseFloat(taxRateInPercentage))))\n        // calculatedTax = parseFloat(amount) - parseFloat(calculatedTax);\n\n    } else if (TaxType === 2) { //Exclusive\n        calculatedTax = (parseFloat(amount) * parseFloat(taxRateInPercentage)) / 100\n    }\n    return parseFloat(calculatedTax)\n}\n\nexport const parser = (str) => {\n\n    return JSON.parse(str.replace(/\\\\/g, ''))\n\n}","// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\n// ** Axios Imports\nimport axios from '@src/configs/axios/axiosConfig'\nimport { orgUserId } from '@src/helper/sassHelper'\nconst userId = orgUserId()\n\nexport const getData = createAsyncThunk('appInvoice/getData', async params => {\n  const response = await axios.post('/taskinvoices/list', params)\n  return {\n    params,\n    data: response.data.taskinvoices.taskinvoices,\n    totalPages: response.data.taskinvoices.total\n  }\n})\n\nexport const addInvoice = createAsyncThunk('appInvoice/addInvoice', async (invoice, { rejectWithValue }) => {\n  try {\n    const response = await axios.post(`/taskinvoices/create`, invoice)\n    return { invoices: response.data.taskinvoices }\n  } catch (ex) {\n    return rejectWithValue(getExceptionPayload(ex))\n  }\n})\n\nexport const addInvoiceItems = createAsyncThunk('appInvoice/addInvoiceItems', async (invoiceItems, { rejectWithValue }) => {\n  try {\n    const response = await axios.post(`/taskinvoiceitems/create`, { rows: invoiceItems })\n    return { invoiceItems: response.data.taskinvoiceitems }\n  } catch (ex) {\n    return rejectWithValue(getExceptionPayload(ex))\n  }\n})\n\nexport const getInvoice = createAsyncThunk('appInvoice/getInvoice', async id => {\n  const response = await axios.post('/taskinvoices/get', { id })\n  return { invoice: response.data.taskinvoices }\n})\n\nexport const getInvoiceItems = createAsyncThunk('appInvoice/getInvoiceItem', async invoiceId => {\n  const response = await axios.post('/taskinvoiceitems/list', { invoiceId })\n  return response.data.taskinvoiceitems\n})\n\nexport const getInvoiceTaxes = createAsyncThunk('appInvoice/getInvoiceTax', async invoiceId => {\n  const response = await axios.post('/invoicetaxes/list', { invoiceId })\n  return response.data.invoicetaxes\n})\n\nexport const getInvoiceItemTaxes = createAsyncThunk('appInvoice/getInvoiceItemTax', async invoiceId => {\n  const response = await axios.post('/invoiceitemtaxes/list', { invoiceId })\n  return response.data.invoiceitemtaxes\n})\n\nexport const updateInvoice = createAsyncThunk('appInvoice/updateInvoice', async (invoice, { rejectWithValue }) => {\n  try {\n    const response = await axios.post(`/taskinvoices/update`, invoice)\n    return { invoices: response.data.taskinvoices }\n  } catch (ex) {\n    return rejectWithValue(getExceptionPayload(ex))\n  }\n})\n\nexport const updateInvoiceItems = createAsyncThunk('appInvoice/updateInvoiceItems', async (invoiceItems, { rejectWithValue }) => {\n  try {\n    const response = await axios.post(`/taskinvoiceitems/update`, { rows: invoiceItems })\n    return { invoiceItems: response.data.taskinvoiceitems }\n  } catch (ex) {\n    return rejectWithValue(getExceptionPayload(ex))\n  }\n})\n\nexport const getClient = createAsyncThunk('appInvoice/getClient', async id => {\n  const response = await axios.post('/clients/get', { id })\n  return response.data.clients\n})\n\nexport const deleteInvoice = createAsyncThunk('appInvoice/deleteInvoice', async (id, { dispatch, getState }) => {\n  await axios.post('/taskinvoices/delete', { id, updatedBy: userId })\n  await dispatch(getData(getState().invoice.params))\n  return id\n})\n\nexport const deleteInvoiceItem = createAsyncThunk('appInvoice/deleteInvoiceItem', async (id, { }) => {\n  await axios.post('/taskinvoiceitems/delete', { id, updatedBy: userId })\n  return []\n})\n\nexport const appInvoiceSlice = createSlice({\n  name: 'appInvoice',\n  initialState: {\n    data: [],\n    total: 1,\n    params: {},\n    allData: [],\n    invoiceId: null,\n    invoiceItems: [],\n    selectedInvoice: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getData.fulfilled, (state, action) => {\n      state.data = action.payload.data\n      state.allData = action.payload.allData\n      state.total = action.payload.totalPages\n      state.params = action.payload.params\n    })\n    builder.addCase(addInvoice.fulfilled, (state, action) => {\n      state.invoiceId = action.payload.invoices.id\n    })\n    builder.addCase(updateInvoice.fulfilled, (state, action) => {\n      state.invoiceId = action.payload.invoices.id\n    })\n    builder.addCase(addInvoiceItems.fulfilled, (state, action) => {\n      state.invoiceItems = action.payload.invoiceItems\n    })\n    builder.addCase(updateInvoiceItems.fulfilled, (state, action) => {\n      state.invoiceItems = action.payload.invoiceItems\n    })\n    builder.addCase(getInvoice.fulfilled, (state, action) => {\n      state.selectedInvoice = action.payload.invoice\n    })\n\n  }\n})\n\nexport default appInvoiceSlice.reducer\n"],"sourceRoot":""}