{"version":3,"sources":["views/apps/client/edit/EditCard.js","views/apps/client/edit/index.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","EditCard","MySwal","withReactContent","Swal","phoneRegExp","navigate","useNavigate","store","useSelector","state","client","dispatch","useDispatch","useState","businessEntityOptions","setBusinessEntityOptions","stateOptions","setStateOptions","countryOptions","setCountryOptions","currencyOptions","setCurrencyOptions","gstRegistrationTypeOptions","setGstRegistrationTypeOptions","clientType","setClientType","clientInfo","setClientInfo","contactId","setConatctId","clientDetails","setClientDetails","schema","yup","shape","updatedBy","default","uniqueIdentity","required","contactPersonName","name","when","is","then","contactnumber","matches","message","excludeEmptyString","email","businessEntity","gstRegistrationType","gstin","placeOfSupply","currency","billingAddressZip","contact_info","of","min","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","reset","control","errors","formState","id","useParams","useFieldArray","keyName","fields","append","remove","onSubmit","data","a","temp","updateClient","predata","deletefun","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","value","deleteContactInfo","dismiss","DismissReason","cancel","removeItem","ind","undefined","tempid","_formValues","flg","getClientInfo","getConatctInfo","getClientData","getClient","payload","useEffect","Object","keys","length","uniqueidentity","contactpersonname","organization","organizationid","businessentityid","gstregistrationtypeid","placeofsupplyid","currencyid","billingAddressLine1","billingaddressline1","billingAddressLine2","billingaddressline2","billingAddressCountry","billingaddresscountry","billingAddressState","billingaddressstate","billingaddresszip","billingAddressCity","billingaddresscity","clientInformations","forEach","obj","rows","updateContactInfo","saveContactInfo","axios","post","response","arr","businessentities","countries","currencies","gstregistrationtypes","states","getRow","fieldLabel","fieldName","reqflag","className","sm","size","classnames","for","render","field","invalid","getSelectRow","options","ref","inputRef","classNamePrefix","find","c","onChange","val","getOptionLabel","option","getOptionValue","md","type","defaultChecked","onInput","map","item","i","lg","designation","onClick","rowid","color","contactid","primarystatus","outline","tag","Link","to","ClientEdit","xl"],"mappings":"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","file":"static/js/68.cd05f81f.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport classnames from 'classnames'\nimport { useDispatch, useSelector } from 'react-redux'\n// ** Custom Components\nimport { updateClient, updateContactInfo, getClient, getConatctInfo, deleteContactInfo } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\n\nimport { X, Plus } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback, CardTitle, CardHeader } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\nconst EditCard = () => {\n\n  // ** States\n  const MySwal = withReactContent(Swal)\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const zipcodeExp = /^[0-9\\- ]{6,6}$/\n  const navigate = useNavigate({})\n  const store = useSelector(state => state.client)\n  const dispatch = useDispatch()\n  const [businessEntityOptions, setBusinessEntityOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [gstRegistrationTypeOptions, setGstRegistrationTypeOptions] = useState([])\n  const [clientType, setClientType] = useState(2)\n  const [clientInfo, setClientInfo] = useState([])\n  const [contactId, setConatctId] = useState(null)\n  const [clientDetails, setClientDetails] = useState({})\n\n  const schema = yup.object().shape({\n    clientType: yup.number(),\n    updatedBy : yup.string().default(userId),\n    uniqueIdentity: yup.string().required(\"Please Enter Unique Identity\"),\n    contactPersonName: yup.string().required(\"Please Enter a Contact Person Name\"),\n    name: yup.string().when([\"clientType\"], { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Enter Business Name.\") }),\n    contactnumber: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n    email: yup.string().email(\"Please Enter valid Email\").required(\"Please Enter valid Email\"),\n    businessEntity: yup.string().when([\"clientType\"], { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Select Business Enity.\") }),\n    gstRegistrationType: yup.string().required(\"Please select a GST Type\"),\n    gstin: yup.string().required(\"Please Enter GSTIN No\"),\n    placeOfSupply: yup.string().required(\"Please select Place Of Supply\"),\n    currency: yup.string(),\n    billingAddressZip: yup.string().matches(zipcodeExp, { message: 'Zip Code is not valid', excludeEmptyString: true }),\n    contact_info: yup.array().of(\n      yup.object().shape({\n        name: yup.string().required(\"Please Enter A Name\"),\n        email: yup.string().email().required(\"Please Enter valid Email\"),\n        contactnumber: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true })\n      })\n    ).min(1, \"Please Enter atleast one contact Info\")\n\n  })\n\n  const { handleSubmit, reset, control, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n  const { id } = useParams()\n  const { fields, append, remove } = useFieldArray({ name: 'contact_info', control, keyName: 'rowid' })\n\n  const saveContactInfo = () => {\n\n    const data = { rows: clientInfo }\n    dispatch(updateContactInfo(data))\n    navigate(`/client/view/${contactId}`)\n\n  }\n\n  const onSubmit = async (data) => {\n\n    const temp = data.contact_info\n    delete data.contact_info\n    const id = clientDetails.id\n    await dispatch(updateClient({ data, id }))\n\n    setClientInfo(predata => ([...predata, ...temp]))\n\n  }\n\n  const deletefun = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteContactInfo(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Conatct has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  const addItem = (() => {\n    append({ id: '', name: '', email: '', contactnumber: '', contactid: id, organizationid: activeOrgId, designation: '', primarystatus: false })\n  })\n\n  const removeItem = async (ind) => {\n    const tempid = control._formValues.contact_info[ind].id\n    let flg\n    if (tempid !== undefined) {\n      flg = await deletefun(tempid)\n    }\n    if (flg) {\n      remove(ind)\n    }\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityOptions(arr.businessentities)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/list').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getCurrency = () => {\n    axios.post('/currencies/list').then(response => {\n      const arr = response.data\n      setCurrencyOptions(arr.currencies)\n    })\n  }\n\n  const getGSTRegType = () => {\n    axios.post('/gstregistrationtypes/list').then(response => {\n      const arr = response.data\n      setGstRegistrationTypeOptions(arr.gstregistrationtypes)\n    })\n  }\n\n  const getClientInfo = async () => {\n    await dispatch(getConatctInfo(contactId))\n\n  }\n\n  const getClientData = async () => {\n    const client = await dispatch(getClient(id))\n    setClientDetails(client.payload)\n  }\n\n  useEffect(() => {\n\n    if (Object.keys(clientDetails).length > 0) {\n      reset({\n        clientType: 1,\n        uniqueIdentity: clientDetails.uniqueidentity,\n        contactPersonName: clientDetails.contactpersonname,\n        organization: clientDetails.organizationid,\n        name: clientDetails.name,\n        contactnumber: clientDetails.contactnumber,\n        businessEntity: clientDetails.businessentityid,\n        email: clientDetails.email,\n        gstRegistrationType: clientDetails.gstregistrationtypeid,\n        gstin: clientDetails.gstin,\n        placeOfSupply: clientDetails.placeofsupplyid,\n        currency: clientDetails.currencyid,\n        billingAddressLine1: clientDetails.billingaddressline1,\n        billingAddressLine2: clientDetails.billingaddressline2,\n        billingAddressCountry: clientDetails.billingaddresscountry,\n        billingAddressState: clientDetails.billingaddressstate,\n        billingAddressZip: clientDetails.billingaddresszip,\n        billingAddressCity: clientDetails.billingaddresscity\n      })\n\n      setConatctId(clientDetails.id)\n\n    }\n\n    if (contactId !== null) {\n      getClientInfo()\n    }\n\n  }, [contactId, clientDetails])\n\n  useEffect(() => {\n    store.clientInformations.forEach((obj) => {\n      append(obj)\n    })\n  }, [store.clientInformations])\n\n  useEffect(() => {\n    if (clientInfo.length) {\n      saveContactInfo()\n    }\n  }, [clientInfo])\n\n  useEffect(() => {\n    getBusineessEntity()\n    getCountries()\n    getCurrency()\n    getGSTRegType()\n    getStates()\n\n    getClientData()\n\n  }, [])\n\n\n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => field.onChange(val.id)}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardHeader>\n          <CardTitle> Edit Client</CardTitle>\n        </CardHeader>\n        <CardBody className='pb-0'>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label required' for='contactPersonName'>\n                  Client Type\n                </Label>\n                <Col sm='9'>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      control={control}\n                      render={({ field }) => <Input type='radio' id='clientType_1' defaultChecked value={2} {...field} onInput={() => setClientType(2)} />}\n                    />\n                    <Label className='form-check-label' for='clientType_1'>\n                      Business\n                    </Label>\n                  </div>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      control={control}\n                      render={({ field }) => <Input id='clientType_2' type='radio' value={1} {...field} onInput={() => setClientType(1)} />}\n                    />\n                    <Label className='form-check-label' for='clientType_2'>\n                      Individual\n                    </Label>\n                  </div>\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Unique No', 'uniqueIdentity', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Contact Person Name', 'contactPersonName', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Business Name', 'name', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Mobile Number', 'contactnumber')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Email ID', 'email', true)}\n            </Col>\n          </Row>\n\n          {clientType === 2 && (\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('Business Entity', 'businessEntity', businessEntityOptions, true)}\n              </Col>\n            </Row>\n          )}\n        </CardBody>\n        {/* /Header */}\n\n        <hr className='invoice-spacing' />\n        {errors.contact_info && <p className='text-danger ms-2'>{errors.contact_info?.message}</p>}\n        {/* Product Details */}\n        <CardBody className='invoice-padding invoice-product-details'>\n          {fields.map((item, i) => (\n\n            <div key={item.rowid} className='repeater-wrapper'>\n              <Row >\n                <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                  <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                    <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-50 mb-0'>First Name</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_name'\n                        name={`contact_info[${i}].name`}\n                        render={({ field }) => (\n                          <Input type='text' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.name && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.name && <FormFeedback>{errors.contact_info?.[i]?.name.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-2 mb-0 '>Email</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_email'\n                        name={`contact_info[${i}].email`}\n                        render={({ field }) => (\n                          <Input type='email' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.email && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.email && <FormFeedback>{errors.contact_info?.[i]?.email.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-2 mb-0'>Mobile</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_contactnumber'\n                        name={`contact_info[${i}].contactnumber`}\n                        render={({ field }) => (\n                          <Input type='number' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.contactnumber && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.contactnumber && <FormFeedback>{errors.contact_info?.[i]?.contactnumber.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Designation</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_designation'\n                        name={`contact_info[${i}].designation`}\n                        render={({ field }) => (\n                          <Input type='text' invalid={errors.contact_info?.[i]?.designation && true} onChange={(val) => { field.onChange(val) }}  {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.designation && <FormFeedback>{errors.contact_info?.[i]?.designation.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Primary</CardText>\n                      <div className='form-switch form-check-primary'>\n                        <Controller\n                          control={control}\n                          id='contact_info_primarystatus'\n                          name={`contact_info[${i}].primarystatus`}\n                          render={({ field }) => (\n                            <Input type='switch' onChange={(val) => { field.onChange(val) }} {...field} defaultChecked={field.value} />\n                          )}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                  <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                    <X size={18} className='cursor-pointer' onClick={() => removeItem(i)} />\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          ))}\n\n          <Row className='mt-1'>\n            <Col sm='12' className='px-0'>\n              <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n              </Button>\n            </Col>\n          </Row>\n\n        </CardBody>\n\n        <hr className='invoice-spacing' />\n        {/* Product Details */}\n        <CardBody>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('GST Type', 'gstRegistrationType', gstRegistrationTypeOptions, true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Place of Supply', 'placeOfSupply', stateOptions, true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('GSTIN', 'gstin', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Currency', 'currency', currencyOptions, true)}\n            </Col>\n          </Row>\n        </CardBody>\n        {/* Invoice Total */}\n        <CardBody className=''>\n          <h4 className='text-primary'>Billing Address</h4>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line1', 'billingAddressLine1')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line2', 'billingAddressLine2')}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('City', 'billingAddressCity')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('State', 'billingAddressState', stateOptions)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Country', 'billingAddressCountry', countryOptions)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Zip Code', 'billingAddressZip')}\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/client/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form >\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ClientEdit = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ClientEdit\n"],"sourceRoot":""}