{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js"],"names":["ToastContent","t","name","className","size","color","icon","onClick","toast","dismiss","id","defaultValues","password","email","Login","skin","useSkin","dispatch","useDispatch","navigate","useNavigate","ability","useContext","AbilityContext","useForm","control","setError","handleSubmit","errors","formState","illustration","source","require","default","getOrganization","data","a","user","userId","users","axios","post","res","localStorage","setItem","JSON","stringify","organizations","getHomeRouteForLoggedInUser","role","to","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","md","tag","onSubmit","Object","values","every","field","length","useJwt","login","then","action","subject","handleLogin","update","catch","err","keys","response","forEach","key","type","message","for","render","autoFocus","placeholder","invalid","block","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","classnames","renderIcon","defaultProps"],"mappings":"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","file":"static/js/15.1e0ae904.chunk.js","sourcesContent":["// ** React Imports\nimport { useContext } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\n\n// ** Custom Hooks\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\n\n// ** Third Party Components\nimport toast from 'react-hot-toast'\nimport { useDispatch } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport { Coffee, X } from 'react-feather'\n\n// ** Actions\nimport { handleLogin } from '@store/authentication'\n\n// ** Context\nimport { AbilityContext } from '@src/utility/context/Can'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\nimport InputPasswordToggle from '@components/input-password-toggle'\n\n// ** Utils\nimport { getHomeRouteForLoggedInUser } from '@utils'\n\n// ** Reactstrap Imports\nimport { Row, Col, Form, Input, Label, Button, CardText, CardTitle, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/pages/page-authentication.scss'\nimport axios from '@src/configs/axios/axiosConfig'\n\nconst ToastContent = ({ t, name }) => {\n  return (\n    <div className='d-flex'>\n      <div className='me-1'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n      </div>\n      <div className='d-flex flex-column'>\n        <div className='d-flex justify-content-between'>\n          <h6>{name}</h6>\n          <X size={12} className='cursor-pointer' onClick={() => toast.dismiss(t.id)} />\n        </div>\n        <span>You have successfully logged in as an user to Vuexy. Now you can start to explore. Enjoy!</span>\n      </div>\n    </div>\n  )\n}\n\nconst defaultValues = {\n  password: '',\n  email: ''\n}\n\nconst Login = () => {\n  // ** Hooks\n  const { skin } = useSkin()\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const ability = useContext(AbilityContext)\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({ defaultValues })\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const getOrganization = async (data) => {\n    const user = { userId: data.users.id }\n    const res = await axios.post('organizationusers/usersorganization', user)\n    await localStorage.setItem('activeOrganization', JSON.stringify(res.data.organizations[0]))\n    await navigate(getHomeRouteForLoggedInUser(data.role))\n  }\n  const onSubmit = data => {\n    if (Object.values(data).every(field => field.length > 0)) {\n      useJwt\n        .login({ email: data.email, password: data.password })\n        .then(async res => {\n          const data = res.data\n          data.role = 'admin'\n          data.ability = [\n            {\n              action: 'manage',\n              subject: 'all'\n            }\n          ]\n          await dispatch(handleLogin(data))\n          await ability.update(data.ability)\n\n          await getOrganization(data)\n          toast(t => (\n            <ToastContent t={t} name={data.name} />\n          ))\n        })\n        .catch(err => {\n          Object.keys(err.response.data.errors).forEach(key => {\n            setError(key, { type: 'custom', message: err.response.data.errors[key][0] })\n          })\n        })\n    } else {\n      for (const key in data) {\n        if (data[key].length === 0) {\n          setError(key, {\n            type: 'manual',\n            message: `Please Enter a ${key}`\n          })\n        }\n      }\n    }\n  }\n\n  return (\n    <div className='auth-wrapper auth-cover'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\n            <defs>\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\n                <stop stopColor='#000000' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n            </defs>\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\n                  <path\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\n                    id='Path'\n                    className='text-primary'\n                    style={{ fill: 'currentColor' }}\n                  ></path>\n                  <path\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\n                    id='Path'\n                    fill='url(#linearGradient-1)'\n                    opacity='0.2'\n                  ></path>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.049999997'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\n                  ></polygon>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.099999994'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\n                  ></polygon>\n                  <polygon\n                    id='Path-3'\n                    fill='url(#linearGradient-2)'\n                    opacity='0.099999994'\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\n                  ></polygon>\n                </g>\n              </g>\n            </g>\n          </svg>\n          <h2 className='brand-text text-primary ms-1'>Turia</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login Cover' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='fw-bold mb-1'>\n              Welcome to Turia! 👋\n            </CardTitle>\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n\n              {errors['action'] && <p className='text-danger'>{errors['action']?.message}</p>}\n              <div className='mb-1'>\n                <Label className='form-label' for='email'>\n                  Email\n                </Label>\n                <Controller\n                  id='email'\n                  name='email'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      autoFocus\n                      type='email'\n                      placeholder='john@example.com'\n                      invalid={errors.email && true}\n                      {...field}\n                    />\n                  )}\n                />\n                {errors['email'] && <FormFeedback>{errors['email']?.message}</FormFeedback>}\n              </div>\n              <div className='mb-1'>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                  <Link to='/forgot-password'>\n                    <small>Forgot Password?</small>\n                  </Link>\n                </div>\n                <Controller\n                  id='password'\n                  name='password'\n                  control={control}\n                  render={({ field }) => (\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\n                  )}\n                />\n                {errors['password'] && <FormFeedback>{errors['password']?.message}</FormFeedback>}\n              </div>\n              <div className='form-check mb-1'>\n                <Input type='checkbox' id='remember-me' />\n                <Label className='form-check-label' for='remember-me'>\n                  Remember Me\n                </Label>\n              </div>\n              <Button type='submit' color='primary' block>\n                Sign in\n              </Button>\n            </Form>\n            <p className='text-center mt-2'>\n              <span className='me-25'>New on our platform?</span>\n              <Link to='/register'>\n                <span>Create an account</span>\n              </Link>\n            </p>\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Login\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}