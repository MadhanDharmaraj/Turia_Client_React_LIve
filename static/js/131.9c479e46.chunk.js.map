{"version":3,"sources":["views/pages/authentication/InvitationRegister.js","@core/components/input-password-toggle/index.js"],"names":["passwordRegx","invitationRegister","uniquekey","useParams","useState","invitaion","setInvitation","dispatch","useDispatch","navigate","useNavigate","ability","useContext","AbilityContext","store","useSelector","state","register","SignupSchema","yup","shape","default","name","email","required","password","matches","useForm","defaultValues","cast","resolver","yupResolver","control","handleSubmit","errors","formState","setValue","onSubmit","data","a","inviteregister","useJwt","login","then","res","role","action","subject","handleLogin","update","toast","t","ToastContent","catch","err","console","log","createOrgUser","createOrganizationUser","useEffect","registerSuccess","user","loginUser","getHomeRouteForLoggedInUser","OrgUser","fullname","firstname","lastname","designationid","departmentid","usertypeid","organizationid","roleid","loginError","axios","post","invitation","className","to","onClick","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","id","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","tag","for","render","field","autoFocus","type","disabled","placeholder","invalid","loginEmail","message","color","block","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","classnames","size","renderIcon","defaultProps"],"mappings":"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","file":"static/js/131.9c479e46.chunk.js","sourcesContent":["// ** React Imports\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport axios from '@src/configs/axios/axiosConfig'\n// ** Custom Components\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport * as yup from 'yup'\nimport { yupResolver } from '@hookform/resolvers/yup'\n// ** Reactstrap Imports\nimport { Card, CardBody, CardTitle, CardText, Form, Label, Input, Button, FormFeedback } from 'reactstrap'\nimport useJwt from '@src/auth/jwt/useJwt'\n// ** Styles\nimport { inviteregister, createOrganizationUser } from './register-multi-steps/store/index'\nimport { AbilityContext } from '@src/utility/context/Can'\nimport { handleLogin } from '@store/authentication'\nimport '@styles/react/pages/page-authentication.scss'\nimport { useEffect, useState, useContext } from 'react'\nimport { Controller, useForm } from 'react-hook-form'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getHomeRouteForLoggedInUser } from '@utils'\n\nconst passwordRegx = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/\n\nconst invitationRegister = () => {\n\n  const { uniquekey } = useParams()\n  const [invitaion, setInvitation] = useState({})\n  const dispatch = useDispatch()\n  const navigate = useNavigate({})\n  const ability = useContext(AbilityContext)\n  const store = useSelector(state => state.register)\n\n  const SignupSchema = yup.object().shape({\n    uniquekey: yup.string().default(uniquekey),\n    name: yup.string(),\n    email: yup.string().email().required(),\n    password: yup.string().required().matches(\n      passwordRegx,\n      \"Password must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\n    )\n  })\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors }, setValue\n  } = useForm({\n    defaultValues: SignupSchema.cast(),\n    resolver: yupResolver(SignupSchema)\n  })\n\n  const getInvitation = () => {\n    axios.post('/invitations/getinvitation', { uniquekey })\n      .then((res) => {\n        setInvitation(res.data.invitation)\n        setValue('email', res.data.invitation.email)\n        setValue('name', `${res.data.invitation.firstname} ${res.data.invitation.lastname}`)\n      })\n      .catch((err) => { console.log(err) })\n  }\n\n  const onSubmit = async (data) => {\n    await dispatch(inviteregister(data))\n\n    useJwt\n      .login({ email: data.email, password: data.password })\n      .then(res => {\n        const data = res.data\n        data.role = 'admin'\n        data.ability = [\n          {\n            action: 'manage',\n            subject: 'all'\n          }\n        ]\n        dispatch(handleLogin(data))\n        ability.update(data.ability)\n\n        toast(t => (\n          <ToastContent t={t} name={data.name} />\n        ))\n      })\n      .catch(err => console.log(err))\n\n  }\n\n  const createOrgUser = async (data) => {\n    await dispatch(createOrganizationUser(data))\n  }\n\n  useEffect(async () => {\n    if (store.registerSuccess) {\n      const user = store.loginUser\n      navigate(getHomeRouteForLoggedInUser(user.role))\n    }\n  }, [store.registerSuccess])\n\n  useEffect(async () => {\n    if (store.loginUser !== null) {\n      const OrgUser = {}\n      const fullname = `${invitaion.firstname} ${invitaion.lastname}`\n      OrgUser['name'] = fullname\n      OrgUser['email'] = invitaion.email\n      OrgUser['departmentId'] = invitaion.designationid\n      OrgUser['designationId'] = invitaion.departmentid\n      OrgUser['userTypeId'] = invitaion.usertypeid\n      OrgUser['organizationId'] = invitaion.organizationid\n      OrgUser['roleId'] = invitaion.roleid\n\n      createOrgUser(OrgUser)\n    }\n    if (store.loginError !== null) {\n      errors.email = store.loginError.email\n    }\n  }, [dispatch, store.loginUser, store.loginError])\n\n  useEffect(() => {\n    if (uniquekey) {\n      getInvitation()\n    }\n  }, [uniquekey])\n\n  return (\n    <div className='auth-wrapper auth-basic px-2'>\n      <div className='auth-inner my-2'>\n        <Card className='mb-0'>\n          <CardBody>\n            <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n              <svg viewBox='0 0 139 95' version='1.1' height='28'>\n                <defs>\n                  <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\n                    <stop stopColor='#000000' offset='0%'></stop>\n                    <stop stopColor='#FFFFFF' offset='100%'></stop>\n                  </linearGradient>\n                  <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\n                    <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\n                    <stop stopColor='#FFFFFF' offset='100%'></stop>\n                  </linearGradient>\n                </defs>\n                <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\n                  <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\n                    <g id='Group' transform='translate(400.000000, 178.000000)'>\n                      <path\n                        d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\n                        id='Path'\n                        className='text-primary'\n                        style={{ fill: 'currentColor' }}\n                      ></path>\n                      <path\n                        d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\n                        id='Path'\n                        fill='url(#linearGradient-1)'\n                        opacity='0.2'\n                      ></path>\n                      <polygon\n                        id='Path-2'\n                        fill='#000000'\n                        opacity='0.049999997'\n                        points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\n                      ></polygon>\n                      <polygon\n                        id='Path-2'\n                        fill='#000000'\n                        opacity='0.099999994'\n                        points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\n                      ></polygon>\n                      <polygon\n                        id='Path-3'\n                        fill='url(#linearGradient-2)'\n                        opacity='0.099999994'\n                        points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\n                      ></polygon>\n                    </g>\n                  </g>\n                </g>\n              </svg>\n              <h2 className='brand-text text-primary ms-1'>Turia</h2>\n            </Link>\n            <CardTitle tag='h4' className='mb-1'>\n              Welcome to Turia! 👋\n            </CardTitle>\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <div className='mb-1'>\n                <Label className='form-label required' for='login-email'>\n                  Email\n                </Label>\n                <Controller\n                  id='loginEmail'\n                  name='email'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      autoFocus\n                      type='email'\n                      disabled\n                      placeholder='john@example.com'\n                      invalid={errors.loginEmail && true}\n                      {...field}\n                    />\n                  )}\n                />\n              </div>\n              <div className='mb-1'>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label required' for='login-password'>\n                    Password\n                  </Label>\n                </div>\n                <Controller\n                  id='password'\n                  name='password'\n                  control={control}\n                  render={({ field }) => (\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\n                  )}\n                />\n                {errors.password && <FormFeedback>{errors.password?.message}</FormFeedback>}\n              </div>\n              <div className='form-check mb-1'>\n                <Input type='checkbox' id='remember-me' />\n                <Label className='form-check-label' for='remember-me'>\n                  Remember Me\n                </Label>\n              </div>\n              <Button color='primary' block>\n                Sign in\n              </Button>\n            </Form>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nexport default invitationRegister\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}