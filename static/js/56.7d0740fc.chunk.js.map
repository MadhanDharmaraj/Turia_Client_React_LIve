{"version":3,"sources":["views/apps/service/add/AddCard.js","views/apps/service/add/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","AddCard","useState","block","setBlock","Loader","navigate","useNavigate","dispatch","useDispatch","categoryOptions","setCateoryOptions","isTaxApplicable","setIsTaxApplicable","taxGroupOptions","setTaxGroupOptions","exemptionReasonOptions","setExemptionReasonOptions","schema","yup","shape","createdBy","default","categoryId","nullable","categoryType","name","required","organizationId","taxGroupId","sellingPrice","exemptionReasonId","sacCode","description","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","control","errors","formState","setValue","useEffect","axios","post","then","response","arr","data","taxgroups","categories","exemptionreasons","onSubmit","addService","datatemp","seviceId","payload","id","showExemption","val","nontaxableflag","getRow","fieldLabel","fieldName","reqflag","className","sm","size","classnames","for","render","field","invalid","message","getSelectRow","options","ref","inputRef","classNamePrefix","value","find","c","onChange","getOptionLabel","option","getOptionValue","blocking","loader","md","type","color","outline","tag","Link","to","ServiceAdd","xl","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/56.7d0740fc.chunk.js","sourcesContent":["import Select from \"react-select\"\nimport { Link, useNavigate } from 'react-router-dom'\nimport { useDispatch } from \"react-redux\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { addService } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\nimport classnames from 'classnames'\n\n// ** Reactstrap Importsz\nimport { Row, Col, Card, Label, Button, CardBody, Input, FormFeedback, CardTitle, CardHeader } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { useEffect, useState, Fragment } from \"react\"\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\nconst AddCard = () => {\n  // ** States\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const navigate = useNavigate({})\n  const dispatch = useDispatch()\n  const [categoryOptions, setCateoryOptions] = useState([])\n  const [isTaxApplicable, setIsTaxApplicable] = useState(true)\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [exemptionReasonOptions, setExemptionReasonOptions] = useState([])\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    categoryId: yup.string().nullable(),\n    categoryType: yup.number().default(1),\n    name: yup.string().required(\"Please Enter Service Name\"),\n    organizationId: yup.string().default(activeOrgId),\n    taxGroupId: yup.string().nullable(),\n    sellingPrice: yup.string().nullable(),\n    isTaxApplicable: yup.boolean().default(false),\n    exemptionReasonId: yup.number().nullable(),\n    sacCode: yup.string().nullable(),\n    description: yup.string().nullable()\n  })\n\n  const { handleSubmit, control, formState: { errors }, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const getExemptionReason = () => {\n    axios.post('/exemptionreasons/dropdown').then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n  const getCategories = () => {\n    axios.post('/categories/dropdown').then(response => {\n      const arr = response.data\n      setCateoryOptions(arr.categories)\n    })\n  }\n\n  useEffect(() => {\n    getTaxGroups()\n    getCategories()\n    getExemptionReason()\n\n  }, [])\n\n  const onSubmit = async (data) => {\n    setBlock(true)\n    const datatemp = await dispatch(addService(data))\n    const seviceId = datatemp.payload.id\n    navigate(`/services/view/${seviceId}`)\n  }\n\n  const showExemption = (val) => {\n    if (val.nontaxableflag) {\n      setIsTaxApplicable(false)\n      setValue('isTaxApplicable', false)\n    } else {\n      setIsTaxApplicable(true)\n      setValue('exemptionReasonId', null)\n      setValue('isTaxApplicable', true)\n    }\n  }\n\n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => { field.onChange(val.id); if (fieldName === 'taxGroupId') { showExemption(val) } }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n  return (\n\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Card className='invoice-preview-card'>\n          {/* Header */}\n          <CardHeader>\n            <CardTitle> Add Service</CardTitle>\n          </CardHeader>\n          <CardBody className='pb-0'>\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getRow('Service Name', 'name', true)}\n              </Col>\n            </Row>\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('Category', 'categoryId', categoryOptions, false)}\n              </Col>\n            </Row>\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getRow('SAC Code', 'sacCode', false)}\n              </Col>\n            </Row>\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getRow('Professional Fee', 'sellingPrice', false)}\n              </Col>\n            </Row>\n            <Row>\n              <Col md='6' className='mb-1'>\n                {getSelectRow('Tax Rate', 'taxGroupId', taxGroupOptions, false)}\n              </Col>\n            </Row>\n            {!isTaxApplicable &&\n              <Row>\n                <Col md='6' className='mb-1'>\n                  {getSelectRow('Exemption Reason', 'exemptionReasonId', exemptionReasonOptions, false)}\n                </Col>\n              </Row>\n            }\n            <Row>\n              <Col md='6' className='mb-1'>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='description'>\n                    Description\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      id='description'\n                      name='description'\n                      control={control}\n                      render={({ field }) => <Input type=\"textarea\" invalid={errors.description && true} {...field} />}\n                    />\n                    {errors.description && <FormFeedback>{errors.description.message}</FormFeedback>}\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </CardBody>\n          {/* /Header */}\n        </Card>\n        <Card>\n          <CardBody>\n            <div className='modal-footer border-0'>\n              <Button color='warning' outline tag={Link} to='/services/list'>\n                Cancel\n              </Button>\n              <Button color='primary' type=\"submit\" >\n                Save\n              </Button>\n            </div>\n          </CardBody>\n        </Card>\n      </form>\n    </UILoader>\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ServiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ServiceAdd\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}