{"version":3,"sources":["views/apps/task/edit/AddCard.js","views/apps/task/edit/index.js"],"names":["AddCard","inputRef","useRef","useState","date","setDate","schema","yup","shape","client_id","required","service_id","assignee","min","start_date","nullable","end_date","priority","invoice_items","of","item_id","sac_code","price","positive","tax_group_id","useForm","resolver","yupResolver","defaultValues","description","reviewer","register","handleSubmit","errors","formState","control","setValue","clientOptions","setClientOptions","serviceOptions","setServiceOptions","priorityOptions","setPriorityOptions","userOptions","setUserOptions","taxGroupOptions","setTaxGroupOptions","invoiceFlag","setinvoiceFlag","useFieldArray","name","fields","append","remove","addItem","subTotal","taxPrice","useEffect","axios","get","then","response","arr","data","clients","services","users","tax_group","handleAssigneeChange","e","tempArr","Array","isArray","map","x","value","handleReviwerChange","onSubmit","console","log","className","sm","size","for","id","render","field","ref","classnames","classNamePrefix","options","find","c","onChange","val","message","type","invalid","multiple","event","target","files","outline","color","onClick","current","click","isMulti","rules","dateFormat","FormFeedback","defaultChecked","item","i","lg","tag","Link","to","TaskEdit","xl","md"],"mappings":"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","file":"static/js/77.0e15e03f.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect, useRef } from 'react'\nimport { Link } from 'react-router-dom'\n// ** Custom Components\nimport classnames from 'classnames'\n\n// ** Third Party Components\nimport axios from 'axios'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus } from 'react-feather'\nimport Select, { components } from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, Form, Label, Button, CardBody, CardText, FormFeedback, Input } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst AddCard = () => {\n  // ** States\n\n  const inputRef = useRef(null)\n  const [setOpen] = useState(false)\n  const [date, setDate] = useState(\"\")\n\n  const schema = yup.object().shape({\n    client_id: yup.string().required(\"Please select a Client\"),\n    service_id: yup.string().required(\"Please select a Service\"),\n    assignee: yup.array().min(1, \"Please select Assignee\"),\n    start_date: yup.date()\n      .nullable()\n      .required('Please Select Start Date'),\n    end_date: yup.date()\n      .nullable()\n      .required('Please Select End Date'),\n    priority: yup.string().required(\"Please select a Priority\"),\n    invoice_items: yup.array().of(\n      yup.object().shape({\n        item_id: yup.string().required(\"Please Select Service\"),\n        sac_code: yup.string(),\n        price: yup.number().min(1).positive(\"Must be more than 0\").required(),\n        tax_group_id: yup.string().required(\"Pleace Select Tax\")\n      })\n    )\n  })\n\n  const { register, handleSubmit, formState: { errors }, control, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: {\n      client_id: '',\n      service_id: '',\n      description: '',\n      assignee: [],\n      reviewer: [],\n      start_date: null,\n      end_date: null,\n      priority: '',\n      invoice_items: []\n    }\n  })\n\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [priorityOptions, setPriorityOptions] = useState([])\n  const [userOptions, setUserOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [invoiceFlag, setinvoiceFlag] = useState(true)\n\n  const { fields, append, remove } = useFieldArray({ name: 'invoice_items', control })\n  const onSubmit = data => console.log(data)\n\n  const addItem = (() => {\n    append({ item_id: '', sac_code: '', price: 0, tax_group_id: '', subTotal: 0, taxPrice: 0 })\n  })\n\n  const removeItem = ((val) => {\n    remove(val)\n  })\n\n  useEffect(() => {\n    // ** Get Clients\n    axios.get('/api/task/utilities').then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n      setServiceOptions(arr.services)\n      setPriorityOptions(arr.priority)\n      setUserOptions(arr.users)\n      setTaxGroupOptions(arr.tax_group)\n    })\n\n\n  }, [])\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n\n  // handle onChange event of the dropdown\n  const handleAssigneeChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.value) : []\n    setValue(\"assignee\", tempArr)\n  }\n\n  const handleReviwerChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.value) : []\n    setValue(\"reviewer\", tempArr)\n  }\n\n  const changeHandler = (event) => {\n    console.log(event.target.files)\n  }\n\n  // const handleSubmission = () => {\n  //   const formData = new FormData()\n\n  //     // Update the formData object\n  //     formData.append(\n  //       \"myFile\",\n  //       selectedFile,\n  //       selectedFile.name\n  //     )\n\n  //     // Details of the uploaded file\n  //     console.log(selectedFile)\n  // }\n\n  // ** Custom Options Component\n  const OptionComponent = ({ data, ...props }) => {\n    if (data.type === 'button') {\n      return (\n        <Button className='text-start rounded-0 px-50' color={data.color} block onClick={() => setOpen(true)}>\n          <Plus className='font-medium-1 me-50' />\n          <span className='align-middle'>{data.label}</span>\n        </Button>\n      )\n    } else {\n      return <components.Option {...props}> {data.label} </components.Option>\n    }\n  }\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardBody className='pb-2 px-2'>\n          <Row>\n            <div className='col-lg-6 col-sm-12'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='client_id'>\n                  Client\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"client_id\"\n                    id=\"client_id\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.client_id })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={clientOptions}\n                        value={clientOptions.find(c => { return c.value === value })}\n                        onChange={val => field.onChange(val.value)}\n                      />\n                    )}\n\n                  />\n                  {errors.client_id && <FormFeedback className='text-danger'>{errors.client_id?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='service_id'>\n                  Service\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"service_id\"\n                    id=\"service_id\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.service_id })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={serviceOptions}\n                        value={serviceOptions.find(c => { return c.value === value })}\n                        onChange={val => field.onChange(val.value)}\n                      />\n                    )}\n\n                  />\n                  {errors.service_id && <FormFeedback className='text-danger'>{errors.service_id?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='description'>\n                  Description\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='description'\n                    name='description'\n                    control={control}\n                    render={({ field }) => <Input type=\"textarea\" invalid={errors.description && true} {...field} />}\n                  />\n                  {errors.description && <FormFeedback>{errors.description.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='my-2'>\n                <Col>\n                  <div className='d-lg-flex'>\n                    <input type='file' className='hidden' multiple onChange={changeHandler} ref={inputRef} />\n                    <Button type='button' outline color='primary' onClick={() => inputRef.current.click()}>\n                      <Plus size={14} className='me-25'></Plus> Add Attachment</Button>\n                  </div>\n                </Col>\n              </Row>\n            </div>\n            <div className='col-lg-6 col-sm-12'>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='assignee'>\n                  Assignee\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"assignee\"\n                    id=\"assignee\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.assignee })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleAssigneeChange}\n                      />\n                    )}\n\n                  />\n                  {errors.assignee && <FormFeedback className='text-danger'>{errors.assignee?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='reviewer'>\n                  Reviewer\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleReviwerChange}\n                      />\n                    )}\n\n                  />\n                  {errors.reviewer && <FormFeedback className='text-danger'>{errors.reviewer?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='start_date'>\n                  Start Date\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    value={date}\n                    name=\"start_date\"\n                    control={control}\n                    rules={{ required: true }}\n                    options={{ dateFormat: \"d-m-Y\" }}\n                    render={({ field, value }) => (\n                      <Flatpickr className={classnames('form-control', { 'is-invalid': errors.start_date })} options={{ dateFormat: \"d-m-Y\" }} name=\"start_date\" onChange={date => field.onChange(date)} value={value} />\n                    )}\n                  />\n\n                  {errors.start_date && <FormFeedback className='text-danger'>{errors.start_date?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='end_date'>\n                  End Date\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    value={date}\n                    onChange={date => setDate(date)}\n                    name=\"end_date\"\n                    control={control}\n                    rules={{ required: true }}\n                    options={{ dateFormat: \"d-m-Y\" }}\n                    render={({ field, value }) => (\n                      <Flatpickr className={classnames('form-control', { 'is-invalid': errors.end_date })} options={{ dateFormat: \"d-m-Y\" }} name=\"end_date\" FormFeedback onChange={date => field.onChange(date)} value={value} />\n                    )}\n                  />\n\n                  {errors.end_date && <FormFeedback className='text-danger'>{errors.end_date?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='priority'>\n                  Priority\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"priority\"\n                    id=\"priority\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.priority })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={priorityOptions}\n                        value={priorityOptions.find(c => { return c.value === value })}\n                        onChange={val => field.onChange(val.value)}\n                      />\n                    )}\n\n                  />\n                  {errors.priority && <FormFeedback className='text-danger'>{errors.priority?.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </div>\n          </Row>\n        </CardBody>\n        <hr className='invoice-spacing' />\n        <Row className='px-1'>\n          <div className='form-check form-check-primary mx-2'>\n            <Input className='form-check-input' defaultChecked type='checkbox' id='invoice_flag' name='invoice_flag' value={true} {...register(\"invoice_flag\")} onChange={ () => setinvoiceFlag(!invoiceFlag)} />\n            <Label className='form-check-label' for='invoice_flag'>\n              Create Proposal for this Task\n            </Label>\n          </div>\n        </Row>\n\n        <CardBody className='invoice-padding invoice-product-details'>\n          {fields.map((item, i) => (\n\n            <div key={i} className='repeater-wrapper'>\n              <Row>\n                <Col className='d-lg-flex product-details-border position-relative pe-0 ps-sm-0' sm='12'>\n                  <Row className='w-100 pe-lg-0 py-2 ms-sm-1'>\n                    <Col className='my-lg-0 my-2' lg='4' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                      <Controller\n                        control={control}\n                        name={`invoice_items.${i}.item_id`}\n                        rules={{ required: true }}\n                        render={({ field, value, ref }) => (\n                          <Select\n                            inputRef={ref}\n                            className={classnames('react-select', { 'is-invalid': errors.invoice_items?.[i]?.item_id })}\n                            classNamePrefix='select'\n                            options={serviceOptions}\n                            value={serviceOptions.find(c => c.value === value)}\n                            onChange={val => field.onChange(val.value)}\n                          />\n                        )}\n                      />\n                      {errors.invoice_items?.[i]?.item_id && <FormFeedback className='text-danger'>{errors.invoice_items?.[i]?.item_id?.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-2 mb-0'>SAC Code</CardText>\n\n                      <Controller\n                        name={`invoice_items.${i}.sac_code`}\n                        control={control}\n                        render={({ field }) => <Input type=\"text\" invalid={errors.invoice_items?.[i]?.sac_code && true} {...field} />}\n                      />\n                      {errors.invoice_items?.[i]?.sac_code && <FormFeedback>{errors.invoice_items?.[i]?.sac_code?.message}</FormFeedback>}\n\n\n                    </Col>\n                    <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                      <Controller\n                        name={`invoice_items.${i}.price`}\n                        control={control}\n                        render={({ field }) => <Input type=\"number\" invalid={errors.invoice_items?.[i]?.price && true} {...field} />}\n                      />\n                      {errors.invoice_items?.[i]?.price && <FormFeedback>{errors.invoice_items?.[i]?.price?.message}</FormFeedback>}\n\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Tax Rate</CardText>\n                      <Controller\n                        control={control}\n                        name={`invoice_items.${i}.tax_group_id`}\n                        rules={{ required: true }}\n                        render={({ field, value, ref }) => (\n                          <Select\n                            inputRef={ref}\n                            className={classnames('react-select', { 'is-invalid': errors.invoice_items?.[i]?.tax_group_id })}\n                            classNamePrefix='select'\n                            options={taxGroupOptions}\n                            value={taxGroupOptions.find(c => c.value === value)}\n                            onChange={val => field.onChange(val.value)}\n                          />\n                        )}\n                      />\n                      {errors.invoice_items?.[i]?.tax_group_id && <FormFeedback className='text-danger'>{errors.invoice_items?.[i]?.tax_group_id?.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n\n                    </Col>\n                  </Row>\n                  <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                    <X size={18} className='cursor-pointer' onClick={() => removeItem(i)} />\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          ))}\n          <Row className='mt-1'>\n            <Col sm='12' className='px-0'>\n              <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n              </Button>\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button className='add-new-user' outline color='warning' tag={Link} to='/task/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form >\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst TaskEdit = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default TaskEdit\n"],"sourceRoot":""}