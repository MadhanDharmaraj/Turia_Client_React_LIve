{"version":3,"sources":["views/apps/client/add/AddCard.js","views/apps/client/add/index.js"],"names":["AddCard","phoneRegExp","navigate","useNavigate","dispatch","useDispatch","useState","businessEntityOptions","setBusinessEntityOptions","stateOptions","setStateOptions","countryOptions","setCountryOptions","currencyOptions","setCurrencyOptions","gstRegistrationTypeOptions","setGstRegistrationTypeOptions","clientInfo","setClientInfo","contactId","setConatctId","schema","yup","shape","clientType","uniqueIdentity","required","contactPersonName","name","when","is","then","contactNumber","matches","message","excludeEmptyString","email","businessEntity","gstRegistrationType","gstin","placeOfSupply","currency","billingAddressZip","contact_info","of","designation","min","useForm","resolver","yupResolver","defaultValues","cast","register","handleSubmit","control","errors","formState","useFieldArray","fields","append","onSubmit","data","a","temp","predata","addClient","datatemp","payload","client","id","addItem","organizationId","primaryStatus","removeItem","e","preventDefault","target","closest","remove","getRow","fieldLabel","fieldName","reqflag","className","sm","size","classnames","for","render","field","invalid","getSelectRow","options","ref","inputRef","classNamePrefix","value","find","c","onChange","val","getOptionLabel","option","getOptionValue","useEffect","axios","post","response","arr","businessentities","countries","currencies","gstregistrationtypes","states","clientId","length","forEach","obj","ind","rows","addContactInfo","saveContactInfo","md","type","map","item","i","lg","onClick","color","outline","tag","Link","to","ClientAdd","xl"],"mappings":"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","file":"static/js/63.9e2c99ae.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport classnames from 'classnames'\nimport { useDispatch } from 'react-redux'\n// ** Custom Components\nimport { addClient, addContactInfo } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\n\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst AddCard = () => {\n\n  // ** States\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const zipcodeExp = /^[0-9\\- ]{6,6}$/\n  const navigate = useNavigate({})\n\n  const dispatch = useDispatch()\n  const [businessEntityOptions, setBusinessEntityOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [gstRegistrationTypeOptions, setGstRegistrationTypeOptions] = useState([])\n  //const [setClientType] = useState(2)\n  const [clientInfo, setClientInfo] = useState([])\n  const [contactId, setConatctId] = useState(null)\n\n  const schema = yup.object().shape({\n    clientType: yup.number(),\n    uniqueIdentity: yup.string().required(\"Please Enter Unique Identity\"),\n    contactPersonName: yup.string().required(\"Please Enter a Contact Person Name\"),\n    name: yup.string().when(\"clientType\", { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Enter Business Name.\") }),\n    contactNumber: yup.string().required(\"Please Enter Conatct Number\").matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n    email: yup.string().email(\"Please Enter valid Email\").required(\"Please Enter valid Email\"),\n    businessEntity: yup.string().when(\"clientType\", { is: (clientType) => clientType === 2, then: yup.string().required(\"Please Select Business Enity.\") }),\n    gstRegistrationType: yup.string().required(\"Please select a GST Type\"),\n    gstin: yup.string().required(\"Please Enter GSTIN No\"),\n    placeOfSupply: yup.string().required(\"Please select Place Of Supply\"),\n    currency: yup.string(),\n    billingAddressZip: yup.string().matches(zipcodeExp, { message: 'Zip Code is not valid', excludeEmptyString: true }),\n    contact_info: yup.array().of(\n      yup.object().shape({\n        name: yup.string().required(\"Please Enter A Name\"),\n        email: yup.string().email().required(\"Please Enter valid Email\"),\n        designation: yup.string().required(\"Please Enter Designation\"),\n        contactNumber: yup.string().required(\"Please Enter Conatct Number\").matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true })\n      })\n    ).min(1, \"Please Enter atleast one contact Info\")\n\n  })\n\n\n  const { register, handleSubmit, control, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append } = useFieldArray({ name: 'contact_info', control })\n\n  const saveContactInfo = (clientId) => {\n    if (clientInfo.length > 0) {\n      clientInfo.forEach((obj, ind) => {\n        clientInfo[ind].contactId = clientId\n      })\n      const rows = clientInfo\n      dispatch(addContactInfo({ rows }))\n      navigate(`/client/view/${clientId}`)\n    }\n  }\n\n  const onSubmit = async (data) => {\n\n    const temp = data.contact_info\n    setClientInfo(predata => ([...predata, ...temp]))\n    delete data.contact_info\n    const datatemp = await dispatch(addClient(data))\n    setConatctId(datatemp.payload.client.id)\n\n  }\n\n  const addItem = (() => {\n    append({ organizationId: 1, contactId: 0, name: '', email: '', contactNumber: '', designation: '', primaryStatus: true })\n  })\n\n  const removeItem = e => {\n    e.preventDefault()\n    e.target.closest('.repeater-wrapper').remove()\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityOptions(arr.businessentities)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/list').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getCurrency = () => {\n    axios.post('/currencies/list').then(response => {\n      const arr = response.data\n      setCurrencyOptions(arr.currencies)\n    })\n  }\n\n  const getGSTRegType = () => {\n    axios.post('/gstregistrationtypes/list').then(response => {\n      const arr = response.data\n      setGstRegistrationTypeOptions(arr.gstregistrationtypes)\n    })\n  }\n\n  const getRow = (fieldLabel, fieldName, reqflag = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='3' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName} >\n          {fieldLabel}\n        </Label>\n        <Col sm='9'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => { return field.onChange(val.id) }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n  useEffect(() => {\n    getBusineessEntity()\n    getCountries()\n    getCurrency()\n    getGSTRegType()\n    getStates()\n\n    addItem()\n    if (contactId !== null) {\n      saveContactInfo(contactId)\n    }\n\n  }, [clientInfo, contactId])\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardBody className='pb-0'>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label required' for='contactPersonName'>\n                  Client Type\n                </Label>\n                <Col sm='9'>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      id='clientType_2'\n                      control={control}\n                      render={({ field }) => (<Input name='clientType' id='clientType_2' type='radio'\n                        {...field} onChange={val => { return val.target.value }} value={1} />)}\n                    />\n                    <Label className='form-check-label' for='clientType_2'>\n                      Business\n                    </Label>\n                  </div>\n                  <div className='form-check form-check-primary form-check-inline'>\n                    <Controller\n                      name='clientType'\n                      id='clientType_1'\n                      control={control}\n                      render={({ field }) => (<Input name='clientType' id='clientType_1' type='radio'\n                        {...field} onChange={val => { return val.target.value }} value={2} />)}\n                    />\n                    <Label className='form-check-label' for='clientType_1'>\n                      Individual\n                    </Label>\n                  </div>\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Unique No', 'uniqueIdentity', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Contact Person Name', 'contactPersonName', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Business Name', 'name', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Mobile Number', 'contactNumber')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Email ID', 'email', true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Business Entity', 'businessEntity', businessEntityOptions, true)}\n            </Col>\n          </Row>\n\n        </CardBody>\n        {/* /Header */}\n\n        <hr className='invoice-spacing' />\n        {errors.contact_info && <p className='text-danger ms-2'>{errors.contact_info?.message}</p>}\n        {/* Product Details */}\n        <CardBody className='invoice-padding invoice-product-details'>\n          {fields.map((item, i) => (\n\n            <div key={i} className='repeater-wrapper'>\n              <Row >\n                <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                  <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                    <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-50 mb-0'>First Name</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_firstName'\n                        name={`contact_info.${i}.name`}\n                        render={({ field }) => (\n                          <Input type='text' {...register(`contact_info.${i}.name`)} invalid={errors.contact_info?.[i]?.name && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.name && <FormFeedback>{errors.contact_info?.[i]?.name.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2 col-lg-3 col-sm-12'>\n                      <CardText className='col-title mb-md-2 mb-0 '>Email</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_email'\n                        name={`contact_info.${i}.email`}\n                        render={({ field }) => (\n                          <Input type='email' {...register(`contact_info.${i}.email`)} invalid={errors.contact_info?.[i]?.email && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.email && <FormFeedback>{errors.contact_info?.[i]?.email.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-2 mb-0'>Mobile</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_contactNumber'\n                        name={`contact_info.${i}.contactNumber`}\n                        render={({ field }) => (\n                          <Input type='number'  {...register(`contact_info.${i}.contactNumber`)} invalid={errors.contact_info?.[i]?.contactNumber && true} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.contactNumber && <FormFeedback>{errors.contact_info?.[i]?.contactNumber.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Designation</CardText>\n                      <Controller\n                        control={control}\n                        id='contact_info_designation'\n                        name={`contact_info.${i}.designation`}\n                        render={({ field }) => (\n                          <Input type='text' invalid={errors.contact_info?.[i]?.designation && true} {...register(`contact_info.${i}.designation`)} {...field} />\n                        )}\n                      />\n                      {errors.contact_info?.[i]?.designation && <FormFeedback>{errors.contact_info?.[i]?.designation.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Primary</CardText>\n                      <div className='form-switch form-check-primary'>\n                        <Controller\n                          control={control}\n                          id='contact_info_primaryStatus'\n                          name={`contact_info.${i}.primaryStatus`}\n                          render={({ field }) => (\n                            <Input type='switch' {...register(`contact_info.${i}.primaryStatus`)} {...field} />\n                          )}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                  <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                    <X size={18} className='cursor-pointer' onClick={removeItem} />\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          ))}\n\n          <Row className='mt-1'>\n            <Col sm='12' className='px-0'>\n              <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n              </Button>\n            </Col>\n          </Row>\n\n        </CardBody>\n\n        <hr className='invoice-spacing' />\n        {/* Product Details */}\n        <CardBody>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('GST Type', 'gstRegistrationType', gstRegistrationTypeOptions, true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Place of Supply', 'placeOfSupply', stateOptions, true)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('GSTIN', 'gstin', true)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Currency', 'currency', currencyOptions, true)}\n            </Col>\n          </Row>\n        </CardBody>\n        {/* Invoice Total */}\n        <CardBody className=''>\n          <h4 className='text-primary'>Billing Address</h4>\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line1', 'billingAddressLine1')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Address Line2', 'billingAddressLine2')}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getRow('City', 'billingAddressCity')}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('State', 'billingAddressState', stateOptions)}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              {getSelectRow('Country', 'billingAddressCountry', countryOptions)}\n            </Col>\n            <Col md='6' className='mb-1'>\n              {getRow('Zip Code', 'billingAddressZip')}\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/client/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form >\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ClientAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ClientAdd\n"],"sourceRoot":""}